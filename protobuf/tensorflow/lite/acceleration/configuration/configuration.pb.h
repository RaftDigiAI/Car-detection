// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/lite/acceleration/configuration/configuration.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto;
namespace tflite {
namespace proto {
class BenchmarkError;
struct BenchmarkErrorDefaultTypeInternal;
extern BenchmarkErrorDefaultTypeInternal _BenchmarkError_default_instance_;
class BenchmarkEvent;
struct BenchmarkEventDefaultTypeInternal;
extern BenchmarkEventDefaultTypeInternal _BenchmarkEvent_default_instance_;
class BenchmarkEventStorage;
struct BenchmarkEventStorageDefaultTypeInternal;
extern BenchmarkEventStorageDefaultTypeInternal _BenchmarkEventStorage_default_instance_;
class BenchmarkInitializationFailure;
struct BenchmarkInitializationFailureDefaultTypeInternal;
extern BenchmarkInitializationFailureDefaultTypeInternal _BenchmarkInitializationFailure_default_instance_;
class BenchmarkMetric;
struct BenchmarkMetricDefaultTypeInternal;
extern BenchmarkMetricDefaultTypeInternal _BenchmarkMetric_default_instance_;
class BenchmarkResult;
struct BenchmarkResultDefaultTypeInternal;
extern BenchmarkResultDefaultTypeInternal _BenchmarkResult_default_instance_;
class BenchmarkResult_InferenceOutput;
struct BenchmarkResult_InferenceOutputDefaultTypeInternal;
extern BenchmarkResult_InferenceOutputDefaultTypeInternal _BenchmarkResult_InferenceOutput_default_instance_;
class BenchmarkStoragePaths;
struct BenchmarkStoragePathsDefaultTypeInternal;
extern BenchmarkStoragePathsDefaultTypeInternal _BenchmarkStoragePaths_default_instance_;
class BestAccelerationDecision;
struct BestAccelerationDecisionDefaultTypeInternal;
extern BestAccelerationDecisionDefaultTypeInternal _BestAccelerationDecision_default_instance_;
class CPUSettings;
struct CPUSettingsDefaultTypeInternal;
extern CPUSettingsDefaultTypeInternal _CPUSettings_default_instance_;
class CompilationCachingSettings;
struct CompilationCachingSettingsDefaultTypeInternal;
extern CompilationCachingSettingsDefaultTypeInternal _CompilationCachingSettings_default_instance_;
class ComputeSettings;
struct ComputeSettingsDefaultTypeInternal;
extern ComputeSettingsDefaultTypeInternal _ComputeSettings_default_instance_;
class CoralSettings;
struct CoralSettingsDefaultTypeInternal;
extern CoralSettingsDefaultTypeInternal _CoralSettings_default_instance_;
class CoreMLSettings;
struct CoreMLSettingsDefaultTypeInternal;
extern CoreMLSettingsDefaultTypeInternal _CoreMLSettings_default_instance_;
class EdgeTpuDeviceSpec;
struct EdgeTpuDeviceSpecDefaultTypeInternal;
extern EdgeTpuDeviceSpecDefaultTypeInternal _EdgeTpuDeviceSpec_default_instance_;
class EdgeTpuInactivePowerConfig;
struct EdgeTpuInactivePowerConfigDefaultTypeInternal;
extern EdgeTpuInactivePowerConfigDefaultTypeInternal _EdgeTpuInactivePowerConfig_default_instance_;
class EdgeTpuSettings;
struct EdgeTpuSettingsDefaultTypeInternal;
extern EdgeTpuSettingsDefaultTypeInternal _EdgeTpuSettings_default_instance_;
class ErrorCode;
struct ErrorCodeDefaultTypeInternal;
extern ErrorCodeDefaultTypeInternal _ErrorCode_default_instance_;
class FallbackSettings;
struct FallbackSettingsDefaultTypeInternal;
extern FallbackSettingsDefaultTypeInternal _FallbackSettings_default_instance_;
class GPUSettings;
struct GPUSettingsDefaultTypeInternal;
extern GPUSettingsDefaultTypeInternal _GPUSettings_default_instance_;
class GoogleEdgeTpuSettings;
struct GoogleEdgeTpuSettingsDefaultTypeInternal;
extern GoogleEdgeTpuSettingsDefaultTypeInternal _GoogleEdgeTpuSettings_default_instance_;
class HexagonSettings;
struct HexagonSettingsDefaultTypeInternal;
extern HexagonSettingsDefaultTypeInternal _HexagonSettings_default_instance_;
class MiniBenchmarkEvent;
struct MiniBenchmarkEventDefaultTypeInternal;
extern MiniBenchmarkEventDefaultTypeInternal _MiniBenchmarkEvent_default_instance_;
class MinibenchmarkSettings;
struct MinibenchmarkSettingsDefaultTypeInternal;
extern MinibenchmarkSettingsDefaultTypeInternal _MinibenchmarkSettings_default_instance_;
class ModelFile;
struct ModelFileDefaultTypeInternal;
extern ModelFileDefaultTypeInternal _ModelFile_default_instance_;
class ModelIdGroup;
struct ModelIdGroupDefaultTypeInternal;
extern ModelIdGroupDefaultTypeInternal _ModelIdGroup_default_instance_;
class NNAPISettings;
struct NNAPISettingsDefaultTypeInternal;
extern NNAPISettingsDefaultTypeInternal _NNAPISettings_default_instance_;
class StableDelegateLoaderSettings;
struct StableDelegateLoaderSettingsDefaultTypeInternal;
extern StableDelegateLoaderSettingsDefaultTypeInternal _StableDelegateLoaderSettings_default_instance_;
class TFLiteSettings;
struct TFLiteSettingsDefaultTypeInternal;
extern TFLiteSettingsDefaultTypeInternal _TFLiteSettings_default_instance_;
class ValidationSettings;
struct ValidationSettingsDefaultTypeInternal;
extern ValidationSettingsDefaultTypeInternal _ValidationSettings_default_instance_;
class XNNPackSettings;
struct XNNPackSettingsDefaultTypeInternal;
extern XNNPackSettingsDefaultTypeInternal _XNNPackSettings_default_instance_;
}  // namespace proto
}  // namespace tflite
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tflite {
namespace proto {
enum CoreMLSettings_EnabledDevices : int {
  CoreMLSettings_EnabledDevices_DEVICES_ALL = 0,
  CoreMLSettings_EnabledDevices_DEVICES_WITH_NEURAL_ENGINE = 1,
};

bool CoreMLSettings_EnabledDevices_IsValid(int value);
constexpr CoreMLSettings_EnabledDevices CoreMLSettings_EnabledDevices_EnabledDevices_MIN = static_cast<CoreMLSettings_EnabledDevices>(0);
constexpr CoreMLSettings_EnabledDevices CoreMLSettings_EnabledDevices_EnabledDevices_MAX = static_cast<CoreMLSettings_EnabledDevices>(1);
constexpr int CoreMLSettings_EnabledDevices_EnabledDevices_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
CoreMLSettings_EnabledDevices_descriptor();
template <typename T>
const std::string& CoreMLSettings_EnabledDevices_Name(T value) {
  static_assert(std::is_same<T, CoreMLSettings_EnabledDevices>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to EnabledDevices_Name().");
  return CoreMLSettings_EnabledDevices_Name(static_cast<CoreMLSettings_EnabledDevices>(value));
}
template <>
inline const std::string& CoreMLSettings_EnabledDevices_Name(CoreMLSettings_EnabledDevices value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CoreMLSettings_EnabledDevices_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool CoreMLSettings_EnabledDevices_Parse(absl::string_view name, CoreMLSettings_EnabledDevices* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CoreMLSettings_EnabledDevices>(
      CoreMLSettings_EnabledDevices_descriptor(), name, value);
}
enum EdgeTpuDeviceSpec_PlatformType : int {
  EdgeTpuDeviceSpec_PlatformType_MMIO = 0,
  EdgeTpuDeviceSpec_PlatformType_REFERENCE = 1,
  EdgeTpuDeviceSpec_PlatformType_SIMULATOR = 2,
  EdgeTpuDeviceSpec_PlatformType_REMOTE_SIMULATOR = 3,
};

bool EdgeTpuDeviceSpec_PlatformType_IsValid(int value);
constexpr EdgeTpuDeviceSpec_PlatformType EdgeTpuDeviceSpec_PlatformType_PlatformType_MIN = static_cast<EdgeTpuDeviceSpec_PlatformType>(0);
constexpr EdgeTpuDeviceSpec_PlatformType EdgeTpuDeviceSpec_PlatformType_PlatformType_MAX = static_cast<EdgeTpuDeviceSpec_PlatformType>(3);
constexpr int EdgeTpuDeviceSpec_PlatformType_PlatformType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
EdgeTpuDeviceSpec_PlatformType_descriptor();
template <typename T>
const std::string& EdgeTpuDeviceSpec_PlatformType_Name(T value) {
  static_assert(std::is_same<T, EdgeTpuDeviceSpec_PlatformType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PlatformType_Name().");
  return EdgeTpuDeviceSpec_PlatformType_Name(static_cast<EdgeTpuDeviceSpec_PlatformType>(value));
}
template <>
inline const std::string& EdgeTpuDeviceSpec_PlatformType_Name(EdgeTpuDeviceSpec_PlatformType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<EdgeTpuDeviceSpec_PlatformType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool EdgeTpuDeviceSpec_PlatformType_Parse(absl::string_view name, EdgeTpuDeviceSpec_PlatformType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EdgeTpuDeviceSpec_PlatformType>(
      EdgeTpuDeviceSpec_PlatformType_descriptor(), name, value);
}
enum EdgeTpuSettings_FloatTruncationType : int {
  EdgeTpuSettings_FloatTruncationType_UNSPECIFIED = 0,
  EdgeTpuSettings_FloatTruncationType_NO_TRUNCATION = 1,
  EdgeTpuSettings_FloatTruncationType_BFLOAT16 = 2,
  EdgeTpuSettings_FloatTruncationType_HALF = 3,
};

bool EdgeTpuSettings_FloatTruncationType_IsValid(int value);
constexpr EdgeTpuSettings_FloatTruncationType EdgeTpuSettings_FloatTruncationType_FloatTruncationType_MIN = static_cast<EdgeTpuSettings_FloatTruncationType>(0);
constexpr EdgeTpuSettings_FloatTruncationType EdgeTpuSettings_FloatTruncationType_FloatTruncationType_MAX = static_cast<EdgeTpuSettings_FloatTruncationType>(3);
constexpr int EdgeTpuSettings_FloatTruncationType_FloatTruncationType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
EdgeTpuSettings_FloatTruncationType_descriptor();
template <typename T>
const std::string& EdgeTpuSettings_FloatTruncationType_Name(T value) {
  static_assert(std::is_same<T, EdgeTpuSettings_FloatTruncationType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to FloatTruncationType_Name().");
  return EdgeTpuSettings_FloatTruncationType_Name(static_cast<EdgeTpuSettings_FloatTruncationType>(value));
}
template <>
inline const std::string& EdgeTpuSettings_FloatTruncationType_Name(EdgeTpuSettings_FloatTruncationType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<EdgeTpuSettings_FloatTruncationType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool EdgeTpuSettings_FloatTruncationType_Parse(absl::string_view name, EdgeTpuSettings_FloatTruncationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EdgeTpuSettings_FloatTruncationType>(
      EdgeTpuSettings_FloatTruncationType_descriptor(), name, value);
}
enum EdgeTpuSettings_QosClass : int {
  EdgeTpuSettings_QosClass_QOS_UNDEFINED = 0,
  EdgeTpuSettings_QosClass_BEST_EFFORT = 1,
  EdgeTpuSettings_QosClass_REALTIME = 2,
};

bool EdgeTpuSettings_QosClass_IsValid(int value);
constexpr EdgeTpuSettings_QosClass EdgeTpuSettings_QosClass_QosClass_MIN = static_cast<EdgeTpuSettings_QosClass>(0);
constexpr EdgeTpuSettings_QosClass EdgeTpuSettings_QosClass_QosClass_MAX = static_cast<EdgeTpuSettings_QosClass>(2);
constexpr int EdgeTpuSettings_QosClass_QosClass_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
EdgeTpuSettings_QosClass_descriptor();
template <typename T>
const std::string& EdgeTpuSettings_QosClass_Name(T value) {
  static_assert(std::is_same<T, EdgeTpuSettings_QosClass>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to QosClass_Name().");
  return EdgeTpuSettings_QosClass_Name(static_cast<EdgeTpuSettings_QosClass>(value));
}
template <>
inline const std::string& EdgeTpuSettings_QosClass_Name(EdgeTpuSettings_QosClass value) {
  return ::google::protobuf::internal::NameOfDenseEnum<EdgeTpuSettings_QosClass_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool EdgeTpuSettings_QosClass_Parse(absl::string_view name, EdgeTpuSettings_QosClass* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EdgeTpuSettings_QosClass>(
      EdgeTpuSettings_QosClass_descriptor(), name, value);
}
enum GoogleEdgeTpuSettings_Priority : int {
  GoogleEdgeTpuSettings_Priority_PRIORITY_UNDEFINED = 0,
  GoogleEdgeTpuSettings_Priority_PRIORITY_LOW = 1,
  GoogleEdgeTpuSettings_Priority_PRIORITY_MEDIUM = 2,
  GoogleEdgeTpuSettings_Priority_PRIORITY_HIGH = 3,
};

bool GoogleEdgeTpuSettings_Priority_IsValid(int value);
constexpr GoogleEdgeTpuSettings_Priority GoogleEdgeTpuSettings_Priority_Priority_MIN = static_cast<GoogleEdgeTpuSettings_Priority>(0);
constexpr GoogleEdgeTpuSettings_Priority GoogleEdgeTpuSettings_Priority_Priority_MAX = static_cast<GoogleEdgeTpuSettings_Priority>(3);
constexpr int GoogleEdgeTpuSettings_Priority_Priority_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
GoogleEdgeTpuSettings_Priority_descriptor();
template <typename T>
const std::string& GoogleEdgeTpuSettings_Priority_Name(T value) {
  static_assert(std::is_same<T, GoogleEdgeTpuSettings_Priority>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Priority_Name().");
  return GoogleEdgeTpuSettings_Priority_Name(static_cast<GoogleEdgeTpuSettings_Priority>(value));
}
template <>
inline const std::string& GoogleEdgeTpuSettings_Priority_Name(GoogleEdgeTpuSettings_Priority value) {
  return ::google::protobuf::internal::NameOfDenseEnum<GoogleEdgeTpuSettings_Priority_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool GoogleEdgeTpuSettings_Priority_Parse(absl::string_view name, GoogleEdgeTpuSettings_Priority* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GoogleEdgeTpuSettings_Priority>(
      GoogleEdgeTpuSettings_Priority_descriptor(), name, value);
}
enum GoogleEdgeTpuSettings_TriState : int {
  GoogleEdgeTpuSettings_TriState_TRISTATE_UNDEFINED = 0,
  GoogleEdgeTpuSettings_TriState_TRISTATE_FALSE = 1,
  GoogleEdgeTpuSettings_TriState_TRISTATE_TRUE = 2,
};

bool GoogleEdgeTpuSettings_TriState_IsValid(int value);
constexpr GoogleEdgeTpuSettings_TriState GoogleEdgeTpuSettings_TriState_TriState_MIN = static_cast<GoogleEdgeTpuSettings_TriState>(0);
constexpr GoogleEdgeTpuSettings_TriState GoogleEdgeTpuSettings_TriState_TriState_MAX = static_cast<GoogleEdgeTpuSettings_TriState>(2);
constexpr int GoogleEdgeTpuSettings_TriState_TriState_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
GoogleEdgeTpuSettings_TriState_descriptor();
template <typename T>
const std::string& GoogleEdgeTpuSettings_TriState_Name(T value) {
  static_assert(std::is_same<T, GoogleEdgeTpuSettings_TriState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TriState_Name().");
  return GoogleEdgeTpuSettings_TriState_Name(static_cast<GoogleEdgeTpuSettings_TriState>(value));
}
template <>
inline const std::string& GoogleEdgeTpuSettings_TriState_Name(GoogleEdgeTpuSettings_TriState value) {
  return ::google::protobuf::internal::NameOfDenseEnum<GoogleEdgeTpuSettings_TriState_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool GoogleEdgeTpuSettings_TriState_Parse(absl::string_view name, GoogleEdgeTpuSettings_TriState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GoogleEdgeTpuSettings_TriState>(
      GoogleEdgeTpuSettings_TriState_descriptor(), name, value);
}
enum CoralSettings_Performance : int {
  CoralSettings_Performance_UNDEFINED = 0,
  CoralSettings_Performance_MAXIMUM = 1,
  CoralSettings_Performance_HIGH = 2,
  CoralSettings_Performance_MEDIUM = 3,
  CoralSettings_Performance_LOW = 4,
};

bool CoralSettings_Performance_IsValid(int value);
constexpr CoralSettings_Performance CoralSettings_Performance_Performance_MIN = static_cast<CoralSettings_Performance>(0);
constexpr CoralSettings_Performance CoralSettings_Performance_Performance_MAX = static_cast<CoralSettings_Performance>(4);
constexpr int CoralSettings_Performance_Performance_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
CoralSettings_Performance_descriptor();
template <typename T>
const std::string& CoralSettings_Performance_Name(T value) {
  static_assert(std::is_same<T, CoralSettings_Performance>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Performance_Name().");
  return CoralSettings_Performance_Name(static_cast<CoralSettings_Performance>(value));
}
template <>
inline const std::string& CoralSettings_Performance_Name(CoralSettings_Performance value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CoralSettings_Performance_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool CoralSettings_Performance_Parse(absl::string_view name, CoralSettings_Performance* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CoralSettings_Performance>(
      CoralSettings_Performance_descriptor(), name, value);
}
enum ExecutionPreference : int {
  ANY = 0,
  LOW_LATENCY = 1,
  LOW_POWER = 2,
  FORCE_CPU = 3,
};

bool ExecutionPreference_IsValid(int value);
constexpr ExecutionPreference ExecutionPreference_MIN = static_cast<ExecutionPreference>(0);
constexpr ExecutionPreference ExecutionPreference_MAX = static_cast<ExecutionPreference>(3);
constexpr int ExecutionPreference_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
ExecutionPreference_descriptor();
template <typename T>
const std::string& ExecutionPreference_Name(T value) {
  static_assert(std::is_same<T, ExecutionPreference>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ExecutionPreference_Name().");
  return ExecutionPreference_Name(static_cast<ExecutionPreference>(value));
}
template <>
inline const std::string& ExecutionPreference_Name(ExecutionPreference value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ExecutionPreference_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool ExecutionPreference_Parse(absl::string_view name, ExecutionPreference* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExecutionPreference>(
      ExecutionPreference_descriptor(), name, value);
}
enum Delegate : int {
  NONE = 0,
  NNAPI = 1,
  GPU = 2,
  HEXAGON = 3,
  XNNPACK = 4,
  EDGETPU = 5,
  EDGETPU_CORAL = 6,
  CORE_ML = 7,
};

bool Delegate_IsValid(int value);
constexpr Delegate Delegate_MIN = static_cast<Delegate>(0);
constexpr Delegate Delegate_MAX = static_cast<Delegate>(7);
constexpr int Delegate_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor*
Delegate_descriptor();
template <typename T>
const std::string& Delegate_Name(T value) {
  static_assert(std::is_same<T, Delegate>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Delegate_Name().");
  return Delegate_Name(static_cast<Delegate>(value));
}
template <>
inline const std::string& Delegate_Name(Delegate value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Delegate_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool Delegate_Parse(absl::string_view name, Delegate* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Delegate>(
      Delegate_descriptor(), name, value);
}
enum NNAPIExecutionPreference : int {
  UNDEFINED = 0,
  NNAPI_LOW_POWER = 1,
  NNAPI_FAST_SINGLE_ANSWER = 2,
  NNAPI_SUSTAINED_SPEED = 3,
};

bool NNAPIExecutionPreference_IsValid(int value);
constexpr NNAPIExecutionPreference NNAPIExecutionPreference_MIN = static_cast<NNAPIExecutionPreference>(0);
constexpr NNAPIExecutionPreference NNAPIExecutionPreference_MAX = static_cast<NNAPIExecutionPreference>(3);
constexpr int NNAPIExecutionPreference_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
NNAPIExecutionPreference_descriptor();
template <typename T>
const std::string& NNAPIExecutionPreference_Name(T value) {
  static_assert(std::is_same<T, NNAPIExecutionPreference>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to NNAPIExecutionPreference_Name().");
  return NNAPIExecutionPreference_Name(static_cast<NNAPIExecutionPreference>(value));
}
template <>
inline const std::string& NNAPIExecutionPreference_Name(NNAPIExecutionPreference value) {
  return ::google::protobuf::internal::NameOfDenseEnum<NNAPIExecutionPreference_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool NNAPIExecutionPreference_Parse(absl::string_view name, NNAPIExecutionPreference* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NNAPIExecutionPreference>(
      NNAPIExecutionPreference_descriptor(), name, value);
}
enum NNAPIExecutionPriority : int {
  NNAPI_PRIORITY_UNDEFINED = 0,
  NNAPI_PRIORITY_LOW = 1,
  NNAPI_PRIORITY_MEDIUM = 2,
  NNAPI_PRIORITY_HIGH = 3,
};

bool NNAPIExecutionPriority_IsValid(int value);
constexpr NNAPIExecutionPriority NNAPIExecutionPriority_MIN = static_cast<NNAPIExecutionPriority>(0);
constexpr NNAPIExecutionPriority NNAPIExecutionPriority_MAX = static_cast<NNAPIExecutionPriority>(3);
constexpr int NNAPIExecutionPriority_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
NNAPIExecutionPriority_descriptor();
template <typename T>
const std::string& NNAPIExecutionPriority_Name(T value) {
  static_assert(std::is_same<T, NNAPIExecutionPriority>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to NNAPIExecutionPriority_Name().");
  return NNAPIExecutionPriority_Name(static_cast<NNAPIExecutionPriority>(value));
}
template <>
inline const std::string& NNAPIExecutionPriority_Name(NNAPIExecutionPriority value) {
  return ::google::protobuf::internal::NameOfDenseEnum<NNAPIExecutionPriority_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool NNAPIExecutionPriority_Parse(absl::string_view name, NNAPIExecutionPriority* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NNAPIExecutionPriority>(
      NNAPIExecutionPriority_descriptor(), name, value);
}
enum GPUBackend : int {
  UNSET = 0,
  OPENCL = 1,
  OPENGL = 2,
};

bool GPUBackend_IsValid(int value);
constexpr GPUBackend GPUBackend_MIN = static_cast<GPUBackend>(0);
constexpr GPUBackend GPUBackend_MAX = static_cast<GPUBackend>(2);
constexpr int GPUBackend_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
GPUBackend_descriptor();
template <typename T>
const std::string& GPUBackend_Name(T value) {
  static_assert(std::is_same<T, GPUBackend>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to GPUBackend_Name().");
  return GPUBackend_Name(static_cast<GPUBackend>(value));
}
template <>
inline const std::string& GPUBackend_Name(GPUBackend value) {
  return ::google::protobuf::internal::NameOfDenseEnum<GPUBackend_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool GPUBackend_Parse(absl::string_view name, GPUBackend* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GPUBackend>(
      GPUBackend_descriptor(), name, value);
}
enum GPUInferencePriority : int {
  GPU_PRIORITY_AUTO = 0,
  GPU_PRIORITY_MAX_PRECISION = 1,
  GPU_PRIORITY_MIN_LATENCY = 2,
  GPU_PRIORITY_MIN_MEMORY_USAGE = 3,
};

bool GPUInferencePriority_IsValid(int value);
constexpr GPUInferencePriority GPUInferencePriority_MIN = static_cast<GPUInferencePriority>(0);
constexpr GPUInferencePriority GPUInferencePriority_MAX = static_cast<GPUInferencePriority>(3);
constexpr int GPUInferencePriority_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
GPUInferencePriority_descriptor();
template <typename T>
const std::string& GPUInferencePriority_Name(T value) {
  static_assert(std::is_same<T, GPUInferencePriority>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to GPUInferencePriority_Name().");
  return GPUInferencePriority_Name(static_cast<GPUInferencePriority>(value));
}
template <>
inline const std::string& GPUInferencePriority_Name(GPUInferencePriority value) {
  return ::google::protobuf::internal::NameOfDenseEnum<GPUInferencePriority_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool GPUInferencePriority_Parse(absl::string_view name, GPUInferencePriority* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GPUInferencePriority>(
      GPUInferencePriority_descriptor(), name, value);
}
enum GPUInferenceUsage : int {
  GPU_INFERENCE_PREFERENCE_FAST_SINGLE_ANSWER = 0,
  GPU_INFERENCE_PREFERENCE_SUSTAINED_SPEED = 1,
};

bool GPUInferenceUsage_IsValid(int value);
constexpr GPUInferenceUsage GPUInferenceUsage_MIN = static_cast<GPUInferenceUsage>(0);
constexpr GPUInferenceUsage GPUInferenceUsage_MAX = static_cast<GPUInferenceUsage>(1);
constexpr int GPUInferenceUsage_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
GPUInferenceUsage_descriptor();
template <typename T>
const std::string& GPUInferenceUsage_Name(T value) {
  static_assert(std::is_same<T, GPUInferenceUsage>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to GPUInferenceUsage_Name().");
  return GPUInferenceUsage_Name(static_cast<GPUInferenceUsage>(value));
}
template <>
inline const std::string& GPUInferenceUsage_Name(GPUInferenceUsage value) {
  return ::google::protobuf::internal::NameOfDenseEnum<GPUInferenceUsage_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool GPUInferenceUsage_Parse(absl::string_view name, GPUInferenceUsage* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GPUInferenceUsage>(
      GPUInferenceUsage_descriptor(), name, value);
}
enum XNNPackFlags : int {
  TFLITE_XNNPACK_DELEGATE_NO_FLAGS = 0,
  TFLITE_XNNPACK_DELEGATE_FLAG_QS8 = 1,
  TFLITE_XNNPACK_DELEGATE_FLAG_QU8 = 2,
  TFLITE_XNNPACK_DELEGATE_FLAG_QS8_QU8 = 3,
  TFLITE_XNNPACK_DELEGATE_FLAG_FORCE_FP16 = 4,
};

bool XNNPackFlags_IsValid(int value);
constexpr XNNPackFlags XNNPackFlags_MIN = static_cast<XNNPackFlags>(0);
constexpr XNNPackFlags XNNPackFlags_MAX = static_cast<XNNPackFlags>(4);
constexpr int XNNPackFlags_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
XNNPackFlags_descriptor();
template <typename T>
const std::string& XNNPackFlags_Name(T value) {
  static_assert(std::is_same<T, XNNPackFlags>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to XNNPackFlags_Name().");
  return XNNPackFlags_Name(static_cast<XNNPackFlags>(value));
}
template <>
inline const std::string& XNNPackFlags_Name(XNNPackFlags value) {
  return ::google::protobuf::internal::NameOfDenseEnum<XNNPackFlags_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool XNNPackFlags_Parse(absl::string_view name, XNNPackFlags* value) {
  return ::google::protobuf::internal::ParseNamedEnum<XNNPackFlags>(
      XNNPackFlags_descriptor(), name, value);
}
enum EdgeTpuPowerState : int {
  UNDEFINED_POWERSTATE = 0,
  TPU_CORE_OFF = 1,
  READY = 2,
  ACTIVE_MIN_POWER = 3,
  ACTIVE_VERY_LOW_POWER = 4,
  ACTIVE_LOW_POWER = 5,
  ACTIVE = 6,
  OVER_DRIVE = 7,
};

bool EdgeTpuPowerState_IsValid(int value);
constexpr EdgeTpuPowerState EdgeTpuPowerState_MIN = static_cast<EdgeTpuPowerState>(0);
constexpr EdgeTpuPowerState EdgeTpuPowerState_MAX = static_cast<EdgeTpuPowerState>(7);
constexpr int EdgeTpuPowerState_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor*
EdgeTpuPowerState_descriptor();
template <typename T>
const std::string& EdgeTpuPowerState_Name(T value) {
  static_assert(std::is_same<T, EdgeTpuPowerState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to EdgeTpuPowerState_Name().");
  return EdgeTpuPowerState_Name(static_cast<EdgeTpuPowerState>(value));
}
template <>
inline const std::string& EdgeTpuPowerState_Name(EdgeTpuPowerState value) {
  return ::google::protobuf::internal::NameOfDenseEnum<EdgeTpuPowerState_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool EdgeTpuPowerState_Parse(absl::string_view name, EdgeTpuPowerState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EdgeTpuPowerState>(
      EdgeTpuPowerState_descriptor(), name, value);
}
enum BenchmarkEventType : int {
  UNDEFINED_BENCHMARK_EVENT_TYPE = 0,
  START = 1,
  END = 2,
  ERROR = 3,
  LOGGED = 4,
  RECOVERED_ERROR = 5,
};

bool BenchmarkEventType_IsValid(int value);
constexpr BenchmarkEventType BenchmarkEventType_MIN = static_cast<BenchmarkEventType>(0);
constexpr BenchmarkEventType BenchmarkEventType_MAX = static_cast<BenchmarkEventType>(5);
constexpr int BenchmarkEventType_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
BenchmarkEventType_descriptor();
template <typename T>
const std::string& BenchmarkEventType_Name(T value) {
  static_assert(std::is_same<T, BenchmarkEventType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to BenchmarkEventType_Name().");
  return BenchmarkEventType_Name(static_cast<BenchmarkEventType>(value));
}
template <>
inline const std::string& BenchmarkEventType_Name(BenchmarkEventType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<BenchmarkEventType_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool BenchmarkEventType_Parse(absl::string_view name, BenchmarkEventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BenchmarkEventType>(
      BenchmarkEventType_descriptor(), name, value);
}
enum BenchmarkStage : int {
  UNKNOWN = 0,
  INITIALIZATION = 1,
  INFERENCE = 2,
};

bool BenchmarkStage_IsValid(int value);
constexpr BenchmarkStage BenchmarkStage_MIN = static_cast<BenchmarkStage>(0);
constexpr BenchmarkStage BenchmarkStage_MAX = static_cast<BenchmarkStage>(2);
constexpr int BenchmarkStage_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
BenchmarkStage_descriptor();
template <typename T>
const std::string& BenchmarkStage_Name(T value) {
  static_assert(std::is_same<T, BenchmarkStage>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to BenchmarkStage_Name().");
  return BenchmarkStage_Name(static_cast<BenchmarkStage>(value));
}
template <>
inline const std::string& BenchmarkStage_Name(BenchmarkStage value) {
  return ::google::protobuf::internal::NameOfDenseEnum<BenchmarkStage_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool BenchmarkStage_Parse(absl::string_view name, BenchmarkStage* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BenchmarkStage>(
      BenchmarkStage_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ComputeSettings final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.proto.ComputeSettings) */ {
 public:
  inline ComputeSettings() : ComputeSettings(nullptr) {}
  ~ComputeSettings() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ComputeSettings(::google::protobuf::internal::ConstantInitialized);

  ComputeSettings(const ComputeSettings& from);
  ComputeSettings(ComputeSettings&& from) noexcept
    : ComputeSettings() {
    *this = ::std::move(from);
  }

  inline ComputeSettings& operator=(const ComputeSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComputeSettings& operator=(ComputeSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComputeSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComputeSettings* internal_default_instance() {
    return reinterpret_cast<const ComputeSettings*>(
               &_ComputeSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ComputeSettings& a, ComputeSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(ComputeSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComputeSettings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComputeSettings* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ComputeSettings>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ComputeSettings& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ComputeSettings& from) {
    ComputeSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComputeSettings* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tflite.proto.ComputeSettings";
  }
  protected:
  explicit ComputeSettings(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelNamespaceForStatisticsFieldNumber = 3,
    kModelIdentifierForStatisticsFieldNumber = 4,
    kTfliteSettingsFieldNumber = 2,
    kSettingsToTestLocallyFieldNumber = 5,
    kPreferenceFieldNumber = 1,
  };
  // optional string model_namespace_for_statistics = 3;
  bool has_model_namespace_for_statistics() const;
  void clear_model_namespace_for_statistics() ;
  const std::string& model_namespace_for_statistics() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_model_namespace_for_statistics(Arg_&& arg, Args_... args);
  std::string* mutable_model_namespace_for_statistics();
  PROTOBUF_NODISCARD std::string* release_model_namespace_for_statistics();
  void set_allocated_model_namespace_for_statistics(std::string* ptr);

  private:
  const std::string& _internal_model_namespace_for_statistics() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_namespace_for_statistics(
      const std::string& value);
  std::string* _internal_mutable_model_namespace_for_statistics();

  public:
  // optional string model_identifier_for_statistics = 4;
  bool has_model_identifier_for_statistics() const;
  void clear_model_identifier_for_statistics() ;
  const std::string& model_identifier_for_statistics() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_model_identifier_for_statistics(Arg_&& arg, Args_... args);
  std::string* mutable_model_identifier_for_statistics();
  PROTOBUF_NODISCARD std::string* release_model_identifier_for_statistics();
  void set_allocated_model_identifier_for_statistics(std::string* ptr);

  private:
  const std::string& _internal_model_identifier_for_statistics() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_identifier_for_statistics(
      const std::string& value);
  std::string* _internal_mutable_model_identifier_for_statistics();

  public:
  // optional .tflite.proto.TFLiteSettings tflite_settings = 2;
  bool has_tflite_settings() const;
  void clear_tflite_settings() ;
  const ::tflite::proto::TFLiteSettings& tflite_settings() const;
  PROTOBUF_NODISCARD ::tflite::proto::TFLiteSettings* release_tflite_settings();
  ::tflite::proto::TFLiteSettings* mutable_tflite_settings();
  void set_allocated_tflite_settings(::tflite::proto::TFLiteSettings* value);
  void unsafe_arena_set_allocated_tflite_settings(::tflite::proto::TFLiteSettings* value);
  ::tflite::proto::TFLiteSettings* unsafe_arena_release_tflite_settings();

  private:
  const ::tflite::proto::TFLiteSettings& _internal_tflite_settings() const;
  ::tflite::proto::TFLiteSettings* _internal_mutable_tflite_settings();

  public:
  // optional .tflite.proto.MinibenchmarkSettings settings_to_test_locally = 5;
  bool has_settings_to_test_locally() const;
  void clear_settings_to_test_locally() ;
  const ::tflite::proto::MinibenchmarkSettings& settings_to_test_locally() const;
  PROTOBUF_NODISCARD ::tflite::proto::MinibenchmarkSettings* release_settings_to_test_locally();
  ::tflite::proto::MinibenchmarkSettings* mutable_settings_to_test_locally();
  void set_allocated_settings_to_test_locally(::tflite::proto::MinibenchmarkSettings* value);
  void unsafe_arena_set_allocated_settings_to_test_locally(::tflite::proto::MinibenchmarkSettings* value);
  ::tflite::proto::MinibenchmarkSettings* unsafe_arena_release_settings_to_test_locally();

  private:
  const ::tflite::proto::MinibenchmarkSettings& _internal_settings_to_test_locally() const;
  ::tflite::proto::MinibenchmarkSettings* _internal_mutable_settings_to_test_locally();

  public:
  // optional .tflite.proto.ExecutionPreference preference = 1;
  bool has_preference() const;
  void clear_preference() ;
  ::tflite::proto::ExecutionPreference preference() const;
  void set_preference(::tflite::proto::ExecutionPreference value);

  private:
  ::tflite::proto::ExecutionPreference _internal_preference() const;
  void _internal_set_preference(::tflite::proto::ExecutionPreference value);

  public:
  // @@protoc_insertion_point(class_scope:tflite.proto.ComputeSettings)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 3, 98, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr model_namespace_for_statistics_;
    ::google::protobuf::internal::ArenaStringPtr model_identifier_for_statistics_;
    ::tflite::proto::TFLiteSettings* tflite_settings_;
    ::tflite::proto::MinibenchmarkSettings* settings_to_test_locally_;
    int preference_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto;
};// -------------------------------------------------------------------

class NNAPISettings final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.proto.NNAPISettings) */ {
 public:
  inline NNAPISettings() : NNAPISettings(nullptr) {}
  ~NNAPISettings() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NNAPISettings(::google::protobuf::internal::ConstantInitialized);

  NNAPISettings(const NNAPISettings& from);
  NNAPISettings(NNAPISettings&& from) noexcept
    : NNAPISettings() {
    *this = ::std::move(from);
  }

  inline NNAPISettings& operator=(const NNAPISettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline NNAPISettings& operator=(NNAPISettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NNAPISettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const NNAPISettings* internal_default_instance() {
    return reinterpret_cast<const NNAPISettings*>(
               &_NNAPISettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NNAPISettings& a, NNAPISettings& b) {
    a.Swap(&b);
  }
  inline void Swap(NNAPISettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NNAPISettings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NNAPISettings* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NNAPISettings>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NNAPISettings& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const NNAPISettings& from) {
    NNAPISettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NNAPISettings* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tflite.proto.NNAPISettings";
  }
  protected:
  explicit NNAPISettings(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcceleratorNameFieldNumber = 1,
    kCacheDirectoryFieldNumber = 2,
    kModelTokenFieldNumber = 3,
    kFallbackSettingsFieldNumber = 6,
    kExecutionPreferenceFieldNumber = 4,
    kNoOfNnapiInstancesToCacheFieldNumber = 5,
    kExecutionPriorityFieldNumber = 8,
    kAllowNnapiCpuOnAndroid10PlusFieldNumber = 7,
    kAllowDynamicDimensionsFieldNumber = 9,
    kAllowFp16PrecisionForFp32FieldNumber = 10,
    kUseBurstComputationFieldNumber = 11,
    kSupportLibraryHandleFieldNumber = 12,
  };
  // optional string accelerator_name = 1;
  bool has_accelerator_name() const;
  void clear_accelerator_name() ;
  const std::string& accelerator_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_accelerator_name(Arg_&& arg, Args_... args);
  std::string* mutable_accelerator_name();
  PROTOBUF_NODISCARD std::string* release_accelerator_name();
  void set_allocated_accelerator_name(std::string* ptr);

  private:
  const std::string& _internal_accelerator_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accelerator_name(
      const std::string& value);
  std::string* _internal_mutable_accelerator_name();

  public:
  // optional string cache_directory = 2 [deprecated = true];
  [[deprecated]]  bool has_cache_directory() const;
  [[deprecated]]  void clear_cache_directory() ;
  [[deprecated]] const std::string& cache_directory() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void set_cache_directory(Arg_&& arg, Args_... args);
  [[deprecated]] std::string* mutable_cache_directory();
  [[deprecated]] PROTOBUF_NODISCARD std::string* release_cache_directory();
  [[deprecated]] void set_allocated_cache_directory(std::string* ptr);

  private:
  const std::string& _internal_cache_directory() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cache_directory(
      const std::string& value);
  std::string* _internal_mutable_cache_directory();

  public:
  // optional string model_token = 3 [deprecated = true];
  [[deprecated]]  bool has_model_token() const;
  [[deprecated]]  void clear_model_token() ;
  [[deprecated]] const std::string& model_token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void set_model_token(Arg_&& arg, Args_... args);
  [[deprecated]] std::string* mutable_model_token();
  [[deprecated]] PROTOBUF_NODISCARD std::string* release_model_token();
  [[deprecated]] void set_allocated_model_token(std::string* ptr);

  private:
  const std::string& _internal_model_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_token(
      const std::string& value);
  std::string* _internal_mutable_model_token();

  public:
  // optional .tflite.proto.FallbackSettings fallback_settings = 6 [deprecated = true];
  [[deprecated]]  bool has_fallback_settings() const;
  [[deprecated]]  void clear_fallback_settings() ;
  [[deprecated]] const ::tflite::proto::FallbackSettings& fallback_settings() const;
  [[deprecated]] PROTOBUF_NODISCARD ::tflite::proto::FallbackSettings* release_fallback_settings();
  [[deprecated]] ::tflite::proto::FallbackSettings* mutable_fallback_settings();
  [[deprecated]] void set_allocated_fallback_settings(::tflite::proto::FallbackSettings* value);
  [[deprecated]] void unsafe_arena_set_allocated_fallback_settings(::tflite::proto::FallbackSettings* value);
  [[deprecated]] ::tflite::proto::FallbackSettings* unsafe_arena_release_fallback_settings();

  private:
  const ::tflite::proto::FallbackSettings& _internal_fallback_settings() const;
  ::tflite::proto::FallbackSettings* _internal_mutable_fallback_settings();

  public:
  // optional .tflite.proto.NNAPIExecutionPreference execution_preference = 4;
  bool has_execution_preference() const;
  void clear_execution_preference() ;
  ::tflite::proto::NNAPIExecutionPreference execution_preference() const;
  void set_execution_preference(::tflite::proto::NNAPIExecutionPreference value);

  private:
  ::tflite::proto::NNAPIExecutionPreference _internal_execution_preference() const;
  void _internal_set_execution_preference(::tflite::proto::NNAPIExecutionPreference value);

  public:
  // optional int32 no_of_nnapi_instances_to_cache = 5;
  bool has_no_of_nnapi_instances_to_cache() const;
  void clear_no_of_nnapi_instances_to_cache() ;
  ::int32_t no_of_nnapi_instances_to_cache() const;
  void set_no_of_nnapi_instances_to_cache(::int32_t value);

  private:
  ::int32_t _internal_no_of_nnapi_instances_to_cache() const;
  void _internal_set_no_of_nnapi_instances_to_cache(::int32_t value);

  public:
  // optional .tflite.proto.NNAPIExecutionPriority execution_priority = 8;
  bool has_execution_priority() const;
  void clear_execution_priority() ;
  ::tflite::proto::NNAPIExecutionPriority execution_priority() const;
  void set_execution_priority(::tflite::proto::NNAPIExecutionPriority value);

  private:
  ::tflite::proto::NNAPIExecutionPriority _internal_execution_priority() const;
  void _internal_set_execution_priority(::tflite::proto::NNAPIExecutionPriority value);

  public:
  // optional bool allow_nnapi_cpu_on_android_10_plus = 7;
  bool has_allow_nnapi_cpu_on_android_10_plus() const;
  void clear_allow_nnapi_cpu_on_android_10_plus() ;
  bool allow_nnapi_cpu_on_android_10_plus() const;
  void set_allow_nnapi_cpu_on_android_10_plus(bool value);

  private:
  bool _internal_allow_nnapi_cpu_on_android_10_plus() const;
  void _internal_set_allow_nnapi_cpu_on_android_10_plus(bool value);

  public:
  // optional bool allow_dynamic_dimensions = 9;
  bool has_allow_dynamic_dimensions() const;
  void clear_allow_dynamic_dimensions() ;
  bool allow_dynamic_dimensions() const;
  void set_allow_dynamic_dimensions(bool value);

  private:
  bool _internal_allow_dynamic_dimensions() const;
  void _internal_set_allow_dynamic_dimensions(bool value);

  public:
  // optional bool allow_fp16_precision_for_fp32 = 10;
  bool has_allow_fp16_precision_for_fp32() const;
  void clear_allow_fp16_precision_for_fp32() ;
  bool allow_fp16_precision_for_fp32() const;
  void set_allow_fp16_precision_for_fp32(bool value);

  private:
  bool _internal_allow_fp16_precision_for_fp32() const;
  void _internal_set_allow_fp16_precision_for_fp32(bool value);

  public:
  // optional bool use_burst_computation = 11;
  bool has_use_burst_computation() const;
  void clear_use_burst_computation() ;
  bool use_burst_computation() const;
  void set_use_burst_computation(bool value);

  private:
  bool _internal_use_burst_computation() const;
  void _internal_set_use_burst_computation(bool value);

  public:
  // optional int64 support_library_handle = 12;
  bool has_support_library_handle() const;
  void clear_support_library_handle() ;
  ::int64_t support_library_handle() const;
  void set_support_library_handle(::int64_t value);

  private:
  ::int64_t _internal_support_library_handle() const;
  void _internal_set_support_library_handle(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tflite.proto.NNAPISettings)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 12, 3, 85, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr accelerator_name_;
    ::google::protobuf::internal::ArenaStringPtr cache_directory_;
    ::google::protobuf::internal::ArenaStringPtr model_token_;
    ::tflite::proto::FallbackSettings* fallback_settings_;
    int execution_preference_;
    ::int32_t no_of_nnapi_instances_to_cache_;
    int execution_priority_;
    bool allow_nnapi_cpu_on_android_10_plus_;
    bool allow_dynamic_dimensions_;
    bool allow_fp16_precision_for_fp32_;
    bool use_burst_computation_;
    ::int64_t support_library_handle_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto;
};// -------------------------------------------------------------------

class GPUSettings final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.proto.GPUSettings) */ {
 public:
  inline GPUSettings() : GPUSettings(nullptr) {}
  ~GPUSettings() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GPUSettings(::google::protobuf::internal::ConstantInitialized);

  GPUSettings(const GPUSettings& from);
  GPUSettings(GPUSettings&& from) noexcept
    : GPUSettings() {
    *this = ::std::move(from);
  }

  inline GPUSettings& operator=(const GPUSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline GPUSettings& operator=(GPUSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GPUSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const GPUSettings* internal_default_instance() {
    return reinterpret_cast<const GPUSettings*>(
               &_GPUSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GPUSettings& a, GPUSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(GPUSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GPUSettings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GPUSettings* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GPUSettings>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GPUSettings& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GPUSettings& from) {
    GPUSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GPUSettings* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tflite.proto.GPUSettings";
  }
  protected:
  explicit GPUSettings(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCacheDirectoryFieldNumber = 8,
    kModelTokenFieldNumber = 9,
    kIsPrecisionLossAllowedFieldNumber = 1,
    kForceBackendFieldNumber = 3,
    kInferencePriority1FieldNumber = 4,
    kInferencePriority2FieldNumber = 5,
    kInferencePriority3FieldNumber = 6,
    kInferencePreferenceFieldNumber = 7,
    kEnableQuantizedInferenceFieldNumber = 2,
  };
  // optional string cache_directory = 8;
  bool has_cache_directory() const;
  void clear_cache_directory() ;
  const std::string& cache_directory() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cache_directory(Arg_&& arg, Args_... args);
  std::string* mutable_cache_directory();
  PROTOBUF_NODISCARD std::string* release_cache_directory();
  void set_allocated_cache_directory(std::string* ptr);

  private:
  const std::string& _internal_cache_directory() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cache_directory(
      const std::string& value);
  std::string* _internal_mutable_cache_directory();

  public:
  // optional string model_token = 9;
  bool has_model_token() const;
  void clear_model_token() ;
  const std::string& model_token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_model_token(Arg_&& arg, Args_... args);
  std::string* mutable_model_token();
  PROTOBUF_NODISCARD std::string* release_model_token();
  void set_allocated_model_token(std::string* ptr);

  private:
  const std::string& _internal_model_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_token(
      const std::string& value);
  std::string* _internal_mutable_model_token();

  public:
  // optional bool is_precision_loss_allowed = 1;
  bool has_is_precision_loss_allowed() const;
  void clear_is_precision_loss_allowed() ;
  bool is_precision_loss_allowed() const;
  void set_is_precision_loss_allowed(bool value);

  private:
  bool _internal_is_precision_loss_allowed() const;
  void _internal_set_is_precision_loss_allowed(bool value);

  public:
  // optional .tflite.proto.GPUBackend force_backend = 3;
  bool has_force_backend() const;
  void clear_force_backend() ;
  ::tflite::proto::GPUBackend force_backend() const;
  void set_force_backend(::tflite::proto::GPUBackend value);

  private:
  ::tflite::proto::GPUBackend _internal_force_backend() const;
  void _internal_set_force_backend(::tflite::proto::GPUBackend value);

  public:
  // optional .tflite.proto.GPUInferencePriority inference_priority1 = 4 [default = GPU_PRIORITY_AUTO];
  bool has_inference_priority1() const;
  void clear_inference_priority1() ;
  ::tflite::proto::GPUInferencePriority inference_priority1() const;
  void set_inference_priority1(::tflite::proto::GPUInferencePriority value);

  private:
  ::tflite::proto::GPUInferencePriority _internal_inference_priority1() const;
  void _internal_set_inference_priority1(::tflite::proto::GPUInferencePriority value);

  public:
  // optional .tflite.proto.GPUInferencePriority inference_priority2 = 5 [default = GPU_PRIORITY_AUTO];
  bool has_inference_priority2() const;
  void clear_inference_priority2() ;
  ::tflite::proto::GPUInferencePriority inference_priority2() const;
  void set_inference_priority2(::tflite::proto::GPUInferencePriority value);

  private:
  ::tflite::proto::GPUInferencePriority _internal_inference_priority2() const;
  void _internal_set_inference_priority2(::tflite::proto::GPUInferencePriority value);

  public:
  // optional .tflite.proto.GPUInferencePriority inference_priority3 = 6 [default = GPU_PRIORITY_AUTO];
  bool has_inference_priority3() const;
  void clear_inference_priority3() ;
  ::tflite::proto::GPUInferencePriority inference_priority3() const;
  void set_inference_priority3(::tflite::proto::GPUInferencePriority value);

  private:
  ::tflite::proto::GPUInferencePriority _internal_inference_priority3() const;
  void _internal_set_inference_priority3(::tflite::proto::GPUInferencePriority value);

  public:
  // optional .tflite.proto.GPUInferenceUsage inference_preference = 7;
  bool has_inference_preference() const;
  void clear_inference_preference() ;
  ::tflite::proto::GPUInferenceUsage inference_preference() const;
  void set_inference_preference(::tflite::proto::GPUInferenceUsage value);

  private:
  ::tflite::proto::GPUInferenceUsage _internal_inference_preference() const;
  void _internal_set_inference_preference(::tflite::proto::GPUInferenceUsage value);

  public:
  // optional bool enable_quantized_inference = 2 [default = true];
  bool has_enable_quantized_inference() const;
  void clear_enable_quantized_inference() ;
  bool enable_quantized_inference() const;
  void set_enable_quantized_inference(bool value);

  private:
  bool _internal_enable_quantized_inference() const;
  void _internal_set_enable_quantized_inference(bool value);

  public:
  // @@protoc_insertion_point(class_scope:tflite.proto.GPUSettings)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 9, 5, 67, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr cache_directory_;
    ::google::protobuf::internal::ArenaStringPtr model_token_;
    bool is_precision_loss_allowed_;
    int force_backend_;
    int inference_priority1_;
    int inference_priority2_;
    int inference_priority3_;
    int inference_preference_;
    bool enable_quantized_inference_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto;
};// -------------------------------------------------------------------

class HexagonSettings final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.proto.HexagonSettings) */ {
 public:
  inline HexagonSettings() : HexagonSettings(nullptr) {}
  ~HexagonSettings() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HexagonSettings(::google::protobuf::internal::ConstantInitialized);

  HexagonSettings(const HexagonSettings& from);
  HexagonSettings(HexagonSettings&& from) noexcept
    : HexagonSettings() {
    *this = ::std::move(from);
  }

  inline HexagonSettings& operator=(const HexagonSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline HexagonSettings& operator=(HexagonSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HexagonSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const HexagonSettings* internal_default_instance() {
    return reinterpret_cast<const HexagonSettings*>(
               &_HexagonSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HexagonSettings& a, HexagonSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(HexagonSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HexagonSettings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HexagonSettings* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HexagonSettings>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HexagonSettings& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const HexagonSettings& from) {
    HexagonSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HexagonSettings* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tflite.proto.HexagonSettings";
  }
  protected:
  explicit HexagonSettings(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDebugLevelFieldNumber = 1,
    kPowersaveLevelFieldNumber = 2,
    kPrintGraphProfileFieldNumber = 3,
    kPrintGraphDebugFieldNumber = 4,
  };
  // optional int32 debug_level = 1;
  bool has_debug_level() const;
  void clear_debug_level() ;
  ::int32_t debug_level() const;
  void set_debug_level(::int32_t value);

  private:
  ::int32_t _internal_debug_level() const;
  void _internal_set_debug_level(::int32_t value);

  public:
  // optional int32 powersave_level = 2;
  bool has_powersave_level() const;
  void clear_powersave_level() ;
  ::int32_t powersave_level() const;
  void set_powersave_level(::int32_t value);

  private:
  ::int32_t _internal_powersave_level() const;
  void _internal_set_powersave_level(::int32_t value);

  public:
  // optional bool print_graph_profile = 3;
  bool has_print_graph_profile() const;
  void clear_print_graph_profile() ;
  bool print_graph_profile() const;
  void set_print_graph_profile(bool value);

  private:
  bool _internal_print_graph_profile() const;
  void _internal_set_print_graph_profile(bool value);

  public:
  // optional bool print_graph_debug = 4;
  bool has_print_graph_debug() const;
  void clear_print_graph_debug() ;
  bool print_graph_debug() const;
  void set_print_graph_debug(bool value);

  private:
  bool _internal_print_graph_debug() const;
  void _internal_set_print_graph_debug(bool value);

  public:
  // @@protoc_insertion_point(class_scope:tflite.proto.HexagonSettings)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t debug_level_;
    ::int32_t powersave_level_;
    bool print_graph_profile_;
    bool print_graph_debug_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto;
};// -------------------------------------------------------------------

class XNNPackSettings final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.proto.XNNPackSettings) */ {
 public:
  inline XNNPackSettings() : XNNPackSettings(nullptr) {}
  ~XNNPackSettings() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR XNNPackSettings(::google::protobuf::internal::ConstantInitialized);

  XNNPackSettings(const XNNPackSettings& from);
  XNNPackSettings(XNNPackSettings&& from) noexcept
    : XNNPackSettings() {
    *this = ::std::move(from);
  }

  inline XNNPackSettings& operator=(const XNNPackSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline XNNPackSettings& operator=(XNNPackSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const XNNPackSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const XNNPackSettings* internal_default_instance() {
    return reinterpret_cast<const XNNPackSettings*>(
               &_XNNPackSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(XNNPackSettings& a, XNNPackSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(XNNPackSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XNNPackSettings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  XNNPackSettings* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<XNNPackSettings>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const XNNPackSettings& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const XNNPackSettings& from) {
    XNNPackSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XNNPackSettings* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tflite.proto.XNNPackSettings";
  }
  protected:
  explicit XNNPackSettings(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumThreadsFieldNumber = 1,
    kFlagsFieldNumber = 2,
  };
  // optional int32 num_threads = 1;
  bool has_num_threads() const;
  void clear_num_threads() ;
  ::int32_t num_threads() const;
  void set_num_threads(::int32_t value);

  private:
  ::int32_t _internal_num_threads() const;
  void _internal_set_num_threads(::int32_t value);

  public:
  // optional .tflite.proto.XNNPackFlags flags = 2 [default = TFLITE_XNNPACK_DELEGATE_NO_FLAGS];
  bool has_flags() const;
  void clear_flags() ;
  ::tflite::proto::XNNPackFlags flags() const;
  void set_flags(::tflite::proto::XNNPackFlags value);

  private:
  ::tflite::proto::XNNPackFlags _internal_flags() const;
  void _internal_set_flags(::tflite::proto::XNNPackFlags value);

  public:
  // @@protoc_insertion_point(class_scope:tflite.proto.XNNPackSettings)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t num_threads_;
    int flags_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto;
};// -------------------------------------------------------------------

class CoreMLSettings final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.proto.CoreMLSettings) */ {
 public:
  inline CoreMLSettings() : CoreMLSettings(nullptr) {}
  ~CoreMLSettings() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CoreMLSettings(::google::protobuf::internal::ConstantInitialized);

  CoreMLSettings(const CoreMLSettings& from);
  CoreMLSettings(CoreMLSettings&& from) noexcept
    : CoreMLSettings() {
    *this = ::std::move(from);
  }

  inline CoreMLSettings& operator=(const CoreMLSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline CoreMLSettings& operator=(CoreMLSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CoreMLSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const CoreMLSettings* internal_default_instance() {
    return reinterpret_cast<const CoreMLSettings*>(
               &_CoreMLSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CoreMLSettings& a, CoreMLSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(CoreMLSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CoreMLSettings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CoreMLSettings* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CoreMLSettings>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CoreMLSettings& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CoreMLSettings& from) {
    CoreMLSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CoreMLSettings* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tflite.proto.CoreMLSettings";
  }
  protected:
  explicit CoreMLSettings(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using EnabledDevices = CoreMLSettings_EnabledDevices;
  static constexpr EnabledDevices DEVICES_ALL = CoreMLSettings_EnabledDevices_DEVICES_ALL;
  static constexpr EnabledDevices DEVICES_WITH_NEURAL_ENGINE = CoreMLSettings_EnabledDevices_DEVICES_WITH_NEURAL_ENGINE;
  static inline bool EnabledDevices_IsValid(int value) {
    return CoreMLSettings_EnabledDevices_IsValid(value);
  }
  static constexpr EnabledDevices EnabledDevices_MIN = CoreMLSettings_EnabledDevices_EnabledDevices_MIN;
  static constexpr EnabledDevices EnabledDevices_MAX = CoreMLSettings_EnabledDevices_EnabledDevices_MAX;
  static constexpr int EnabledDevices_ARRAYSIZE = CoreMLSettings_EnabledDevices_EnabledDevices_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* EnabledDevices_descriptor() {
    return CoreMLSettings_EnabledDevices_descriptor();
  }
  template <typename T>
  static inline const std::string& EnabledDevices_Name(T value) {
    return CoreMLSettings_EnabledDevices_Name(value);
  }
  static inline bool EnabledDevices_Parse(absl::string_view name, EnabledDevices* value) {
    return CoreMLSettings_EnabledDevices_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledDevicesFieldNumber = 1,
    kCoremlVersionFieldNumber = 2,
    kMaxDelegatedPartitionsFieldNumber = 3,
    kMinNodesPerPartitionFieldNumber = 4,
  };
  // optional .tflite.proto.CoreMLSettings.EnabledDevices enabled_devices = 1;
  bool has_enabled_devices() const;
  void clear_enabled_devices() ;
  ::tflite::proto::CoreMLSettings_EnabledDevices enabled_devices() const;
  void set_enabled_devices(::tflite::proto::CoreMLSettings_EnabledDevices value);

  private:
  ::tflite::proto::CoreMLSettings_EnabledDevices _internal_enabled_devices() const;
  void _internal_set_enabled_devices(::tflite::proto::CoreMLSettings_EnabledDevices value);

  public:
  // optional int32 coreml_version = 2;
  bool has_coreml_version() const;
  void clear_coreml_version() ;
  ::int32_t coreml_version() const;
  void set_coreml_version(::int32_t value);

  private:
  ::int32_t _internal_coreml_version() const;
  void _internal_set_coreml_version(::int32_t value);

  public:
  // optional int32 max_delegated_partitions = 3 [default = 0];
  bool has_max_delegated_partitions() const;
  void clear_max_delegated_partitions() ;
  ::int32_t max_delegated_partitions() const;
  void set_max_delegated_partitions(::int32_t value);

  private:
  ::int32_t _internal_max_delegated_partitions() const;
  void _internal_set_max_delegated_partitions(::int32_t value);

  public:
  // optional int32 min_nodes_per_partition = 4 [default = 2];
  bool has_min_nodes_per_partition() const;
  void clear_min_nodes_per_partition() ;
  ::int32_t min_nodes_per_partition() const;
  void set_min_nodes_per_partition(::int32_t value);

  private:
  ::int32_t _internal_min_nodes_per_partition() const;
  void _internal_set_min_nodes_per_partition(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tflite.proto.CoreMLSettings)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    int enabled_devices_;
    ::int32_t coreml_version_;
    ::int32_t max_delegated_partitions_;
    ::int32_t min_nodes_per_partition_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto;
};// -------------------------------------------------------------------

class StableDelegateLoaderSettings final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.proto.StableDelegateLoaderSettings) */ {
 public:
  inline StableDelegateLoaderSettings() : StableDelegateLoaderSettings(nullptr) {}
  ~StableDelegateLoaderSettings() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StableDelegateLoaderSettings(::google::protobuf::internal::ConstantInitialized);

  StableDelegateLoaderSettings(const StableDelegateLoaderSettings& from);
  StableDelegateLoaderSettings(StableDelegateLoaderSettings&& from) noexcept
    : StableDelegateLoaderSettings() {
    *this = ::std::move(from);
  }

  inline StableDelegateLoaderSettings& operator=(const StableDelegateLoaderSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline StableDelegateLoaderSettings& operator=(StableDelegateLoaderSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StableDelegateLoaderSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const StableDelegateLoaderSettings* internal_default_instance() {
    return reinterpret_cast<const StableDelegateLoaderSettings*>(
               &_StableDelegateLoaderSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(StableDelegateLoaderSettings& a, StableDelegateLoaderSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(StableDelegateLoaderSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StableDelegateLoaderSettings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StableDelegateLoaderSettings* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StableDelegateLoaderSettings>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StableDelegateLoaderSettings& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const StableDelegateLoaderSettings& from) {
    StableDelegateLoaderSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StableDelegateLoaderSettings* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tflite.proto.StableDelegateLoaderSettings";
  }
  protected:
  explicit StableDelegateLoaderSettings(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelegatePathFieldNumber = 1,
  };
  // optional string delegate_path = 1;
  bool has_delegate_path() const;
  void clear_delegate_path() ;
  const std::string& delegate_path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_delegate_path(Arg_&& arg, Args_... args);
  std::string* mutable_delegate_path();
  PROTOBUF_NODISCARD std::string* release_delegate_path();
  void set_allocated_delegate_path(std::string* ptr);

  private:
  const std::string& _internal_delegate_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_delegate_path(
      const std::string& value);
  std::string* _internal_mutable_delegate_path();

  public:
  // @@protoc_insertion_point(class_scope:tflite.proto.StableDelegateLoaderSettings)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 63, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr delegate_path_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto;
};// -------------------------------------------------------------------

class CompilationCachingSettings final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.proto.CompilationCachingSettings) */ {
 public:
  inline CompilationCachingSettings() : CompilationCachingSettings(nullptr) {}
  ~CompilationCachingSettings() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CompilationCachingSettings(::google::protobuf::internal::ConstantInitialized);

  CompilationCachingSettings(const CompilationCachingSettings& from);
  CompilationCachingSettings(CompilationCachingSettings&& from) noexcept
    : CompilationCachingSettings() {
    *this = ::std::move(from);
  }

  inline CompilationCachingSettings& operator=(const CompilationCachingSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompilationCachingSettings& operator=(CompilationCachingSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompilationCachingSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompilationCachingSettings* internal_default_instance() {
    return reinterpret_cast<const CompilationCachingSettings*>(
               &_CompilationCachingSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CompilationCachingSettings& a, CompilationCachingSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(CompilationCachingSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompilationCachingSettings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompilationCachingSettings* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CompilationCachingSettings>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CompilationCachingSettings& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CompilationCachingSettings& from) {
    CompilationCachingSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompilationCachingSettings* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tflite.proto.CompilationCachingSettings";
  }
  protected:
  explicit CompilationCachingSettings(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCacheDirFieldNumber = 1,
    kModelTokenFieldNumber = 2,
  };
  // optional string cache_dir = 1;
  bool has_cache_dir() const;
  void clear_cache_dir() ;
  const std::string& cache_dir() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cache_dir(Arg_&& arg, Args_... args);
  std::string* mutable_cache_dir();
  PROTOBUF_NODISCARD std::string* release_cache_dir();
  void set_allocated_cache_dir(std::string* ptr);

  private:
  const std::string& _internal_cache_dir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cache_dir(
      const std::string& value);
  std::string* _internal_mutable_cache_dir();

  public:
  // optional string model_token = 2;
  bool has_model_token() const;
  void clear_model_token() ;
  const std::string& model_token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_model_token(Arg_&& arg, Args_... args);
  std::string* mutable_model_token();
  PROTOBUF_NODISCARD std::string* release_model_token();
  void set_allocated_model_token(std::string* ptr);

  private:
  const std::string& _internal_model_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_token(
      const std::string& value);
  std::string* _internal_mutable_model_token();

  public:
  // @@protoc_insertion_point(class_scope:tflite.proto.CompilationCachingSettings)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 68, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr cache_dir_;
    ::google::protobuf::internal::ArenaStringPtr model_token_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto;
};// -------------------------------------------------------------------

class EdgeTpuDeviceSpec final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.proto.EdgeTpuDeviceSpec) */ {
 public:
  inline EdgeTpuDeviceSpec() : EdgeTpuDeviceSpec(nullptr) {}
  ~EdgeTpuDeviceSpec() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EdgeTpuDeviceSpec(::google::protobuf::internal::ConstantInitialized);

  EdgeTpuDeviceSpec(const EdgeTpuDeviceSpec& from);
  EdgeTpuDeviceSpec(EdgeTpuDeviceSpec&& from) noexcept
    : EdgeTpuDeviceSpec() {
    *this = ::std::move(from);
  }

  inline EdgeTpuDeviceSpec& operator=(const EdgeTpuDeviceSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdgeTpuDeviceSpec& operator=(EdgeTpuDeviceSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EdgeTpuDeviceSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const EdgeTpuDeviceSpec* internal_default_instance() {
    return reinterpret_cast<const EdgeTpuDeviceSpec*>(
               &_EdgeTpuDeviceSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(EdgeTpuDeviceSpec& a, EdgeTpuDeviceSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(EdgeTpuDeviceSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdgeTpuDeviceSpec* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EdgeTpuDeviceSpec* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EdgeTpuDeviceSpec>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EdgeTpuDeviceSpec& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const EdgeTpuDeviceSpec& from) {
    EdgeTpuDeviceSpec::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdgeTpuDeviceSpec* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tflite.proto.EdgeTpuDeviceSpec";
  }
  protected:
  explicit EdgeTpuDeviceSpec(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using PlatformType = EdgeTpuDeviceSpec_PlatformType;
  static constexpr PlatformType MMIO = EdgeTpuDeviceSpec_PlatformType_MMIO;
  static constexpr PlatformType REFERENCE = EdgeTpuDeviceSpec_PlatformType_REFERENCE;
  static constexpr PlatformType SIMULATOR = EdgeTpuDeviceSpec_PlatformType_SIMULATOR;
  static constexpr PlatformType REMOTE_SIMULATOR = EdgeTpuDeviceSpec_PlatformType_REMOTE_SIMULATOR;
  static inline bool PlatformType_IsValid(int value) {
    return EdgeTpuDeviceSpec_PlatformType_IsValid(value);
  }
  static constexpr PlatformType PlatformType_MIN = EdgeTpuDeviceSpec_PlatformType_PlatformType_MIN;
  static constexpr PlatformType PlatformType_MAX = EdgeTpuDeviceSpec_PlatformType_PlatformType_MAX;
  static constexpr int PlatformType_ARRAYSIZE = EdgeTpuDeviceSpec_PlatformType_PlatformType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* PlatformType_descriptor() {
    return EdgeTpuDeviceSpec_PlatformType_descriptor();
  }
  template <typename T>
  static inline const std::string& PlatformType_Name(T value) {
    return EdgeTpuDeviceSpec_PlatformType_Name(value);
  }
  static inline bool PlatformType_Parse(absl::string_view name, PlatformType* value) {
    return EdgeTpuDeviceSpec_PlatformType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDevicePathsFieldNumber = 3,
    kPlatformTypeFieldNumber = 1,
    kNumChipsFieldNumber = 2,
    kChipFamilyFieldNumber = 4,
  };
  // repeated string device_paths = 3;
  int device_paths_size() const;
  private:
  int _internal_device_paths_size() const;

  public:
  void clear_device_paths() ;
  const std::string& device_paths(int index) const;
  std::string* mutable_device_paths(int index);
  void set_device_paths(int index, const std::string& value);
  void set_device_paths(int index, std::string&& value);
  void set_device_paths(int index, const char* value);
  void set_device_paths(int index, const char* value, std::size_t size);
  void set_device_paths(int index, absl::string_view value);
  std::string* add_device_paths();
  void add_device_paths(const std::string& value);
  void add_device_paths(std::string&& value);
  void add_device_paths(const char* value);
  void add_device_paths(const char* value, std::size_t size);
  void add_device_paths(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& device_paths() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_device_paths();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_device_paths() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_device_paths();

  public:
  // optional .tflite.proto.EdgeTpuDeviceSpec.PlatformType platform_type = 1;
  bool has_platform_type() const;
  void clear_platform_type() ;
  ::tflite::proto::EdgeTpuDeviceSpec_PlatformType platform_type() const;
  void set_platform_type(::tflite::proto::EdgeTpuDeviceSpec_PlatformType value);

  private:
  ::tflite::proto::EdgeTpuDeviceSpec_PlatformType _internal_platform_type() const;
  void _internal_set_platform_type(::tflite::proto::EdgeTpuDeviceSpec_PlatformType value);

  public:
  // optional int32 num_chips = 2;
  bool has_num_chips() const;
  void clear_num_chips() ;
  ::int32_t num_chips() const;
  void set_num_chips(::int32_t value);

  private:
  ::int32_t _internal_num_chips() const;
  void _internal_set_num_chips(::int32_t value);

  public:
  // optional int32 chip_family = 4;
  bool has_chip_family() const;
  void clear_chip_family() ;
  ::int32_t chip_family() const;
  void set_chip_family(::int32_t value);

  private:
  ::int32_t _internal_chip_family() const;
  void _internal_set_chip_family(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tflite.proto.EdgeTpuDeviceSpec)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 1, 51, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> device_paths_;
    int platform_type_;
    ::int32_t num_chips_;
    ::int32_t chip_family_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto;
};// -------------------------------------------------------------------

class EdgeTpuInactivePowerConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.proto.EdgeTpuInactivePowerConfig) */ {
 public:
  inline EdgeTpuInactivePowerConfig() : EdgeTpuInactivePowerConfig(nullptr) {}
  ~EdgeTpuInactivePowerConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EdgeTpuInactivePowerConfig(::google::protobuf::internal::ConstantInitialized);

  EdgeTpuInactivePowerConfig(const EdgeTpuInactivePowerConfig& from);
  EdgeTpuInactivePowerConfig(EdgeTpuInactivePowerConfig&& from) noexcept
    : EdgeTpuInactivePowerConfig() {
    *this = ::std::move(from);
  }

  inline EdgeTpuInactivePowerConfig& operator=(const EdgeTpuInactivePowerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdgeTpuInactivePowerConfig& operator=(EdgeTpuInactivePowerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EdgeTpuInactivePowerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const EdgeTpuInactivePowerConfig* internal_default_instance() {
    return reinterpret_cast<const EdgeTpuInactivePowerConfig*>(
               &_EdgeTpuInactivePowerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(EdgeTpuInactivePowerConfig& a, EdgeTpuInactivePowerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(EdgeTpuInactivePowerConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdgeTpuInactivePowerConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EdgeTpuInactivePowerConfig* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EdgeTpuInactivePowerConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EdgeTpuInactivePowerConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const EdgeTpuInactivePowerConfig& from) {
    EdgeTpuInactivePowerConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdgeTpuInactivePowerConfig* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tflite.proto.EdgeTpuInactivePowerConfig";
  }
  protected:
  explicit EdgeTpuInactivePowerConfig(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInactiveTimeoutUsFieldNumber = 2,
    kInactivePowerStateFieldNumber = 1,
  };
  // optional int64 inactive_timeout_us = 2;
  bool has_inactive_timeout_us() const;
  void clear_inactive_timeout_us() ;
  ::int64_t inactive_timeout_us() const;
  void set_inactive_timeout_us(::int64_t value);

  private:
  ::int64_t _internal_inactive_timeout_us() const;
  void _internal_set_inactive_timeout_us(::int64_t value);

  public:
  // optional .tflite.proto.EdgeTpuPowerState inactive_power_state = 1;
  bool has_inactive_power_state() const;
  void clear_inactive_power_state() ;
  ::tflite::proto::EdgeTpuPowerState inactive_power_state() const;
  void set_inactive_power_state(::tflite::proto::EdgeTpuPowerState value);

  private:
  ::tflite::proto::EdgeTpuPowerState _internal_inactive_power_state() const;
  void _internal_set_inactive_power_state(::tflite::proto::EdgeTpuPowerState value);

  public:
  // @@protoc_insertion_point(class_scope:tflite.proto.EdgeTpuInactivePowerConfig)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t inactive_timeout_us_;
    int inactive_power_state_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto;
};// -------------------------------------------------------------------

class EdgeTpuSettings final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.proto.EdgeTpuSettings) */ {
 public:
  inline EdgeTpuSettings() : EdgeTpuSettings(nullptr) {}
  ~EdgeTpuSettings() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EdgeTpuSettings(::google::protobuf::internal::ConstantInitialized);

  EdgeTpuSettings(const EdgeTpuSettings& from);
  EdgeTpuSettings(EdgeTpuSettings&& from) noexcept
    : EdgeTpuSettings() {
    *this = ::std::move(from);
  }

  inline EdgeTpuSettings& operator=(const EdgeTpuSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdgeTpuSettings& operator=(EdgeTpuSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EdgeTpuSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const EdgeTpuSettings* internal_default_instance() {
    return reinterpret_cast<const EdgeTpuSettings*>(
               &_EdgeTpuSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(EdgeTpuSettings& a, EdgeTpuSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(EdgeTpuSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdgeTpuSettings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EdgeTpuSettings* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EdgeTpuSettings>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EdgeTpuSettings& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const EdgeTpuSettings& from) {
    EdgeTpuSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdgeTpuSettings* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tflite.proto.EdgeTpuSettings";
  }
  protected:
  explicit EdgeTpuSettings(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using FloatTruncationType = EdgeTpuSettings_FloatTruncationType;
  static constexpr FloatTruncationType UNSPECIFIED = EdgeTpuSettings_FloatTruncationType_UNSPECIFIED;
  static constexpr FloatTruncationType NO_TRUNCATION = EdgeTpuSettings_FloatTruncationType_NO_TRUNCATION;
  static constexpr FloatTruncationType BFLOAT16 = EdgeTpuSettings_FloatTruncationType_BFLOAT16;
  static constexpr FloatTruncationType HALF = EdgeTpuSettings_FloatTruncationType_HALF;
  static inline bool FloatTruncationType_IsValid(int value) {
    return EdgeTpuSettings_FloatTruncationType_IsValid(value);
  }
  static constexpr FloatTruncationType FloatTruncationType_MIN = EdgeTpuSettings_FloatTruncationType_FloatTruncationType_MIN;
  static constexpr FloatTruncationType FloatTruncationType_MAX = EdgeTpuSettings_FloatTruncationType_FloatTruncationType_MAX;
  static constexpr int FloatTruncationType_ARRAYSIZE = EdgeTpuSettings_FloatTruncationType_FloatTruncationType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* FloatTruncationType_descriptor() {
    return EdgeTpuSettings_FloatTruncationType_descriptor();
  }
  template <typename T>
  static inline const std::string& FloatTruncationType_Name(T value) {
    return EdgeTpuSettings_FloatTruncationType_Name(value);
  }
  static inline bool FloatTruncationType_Parse(absl::string_view name, FloatTruncationType* value) {
    return EdgeTpuSettings_FloatTruncationType_Parse(name, value);
  }

  using QosClass = EdgeTpuSettings_QosClass;
  static constexpr QosClass QOS_UNDEFINED = EdgeTpuSettings_QosClass_QOS_UNDEFINED;
  static constexpr QosClass BEST_EFFORT = EdgeTpuSettings_QosClass_BEST_EFFORT;
  static constexpr QosClass REALTIME = EdgeTpuSettings_QosClass_REALTIME;
  static inline bool QosClass_IsValid(int value) {
    return EdgeTpuSettings_QosClass_IsValid(value);
  }
  static constexpr QosClass QosClass_MIN = EdgeTpuSettings_QosClass_QosClass_MIN;
  static constexpr QosClass QosClass_MAX = EdgeTpuSettings_QosClass_QosClass_MAX;
  static constexpr int QosClass_ARRAYSIZE = EdgeTpuSettings_QosClass_QosClass_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* QosClass_descriptor() {
    return EdgeTpuSettings_QosClass_descriptor();
  }
  template <typename T>
  static inline const std::string& QosClass_Name(T value) {
    return EdgeTpuSettings_QosClass_Name(value);
  }
  static inline bool QosClass_Parse(absl::string_view name, QosClass* value) {
    return EdgeTpuSettings_QosClass_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInactivePowerConfigsFieldNumber = 2,
    kHardwareClusterIdsFieldNumber = 8,
    kModelTokenFieldNumber = 5,
    kPublicModelIdFieldNumber = 9,
    kEdgetpuDeviceSpecFieldNumber = 4,
    kInferencePowerStateFieldNumber = 1,
    kFloatTruncationTypeFieldNumber = 6,
    kQosClassFieldNumber = 7,
    kInferencePriorityFieldNumber = 3,
  };
  // repeated .tflite.proto.EdgeTpuInactivePowerConfig inactive_power_configs = 2;
  int inactive_power_configs_size() const;
  private:
  int _internal_inactive_power_configs_size() const;

  public:
  void clear_inactive_power_configs() ;
  ::tflite::proto::EdgeTpuInactivePowerConfig* mutable_inactive_power_configs(int index);
  ::google::protobuf::RepeatedPtrField< ::tflite::proto::EdgeTpuInactivePowerConfig >*
      mutable_inactive_power_configs();
  private:
  const ::google::protobuf::RepeatedPtrField<::tflite::proto::EdgeTpuInactivePowerConfig>& _internal_inactive_power_configs() const;
  ::google::protobuf::RepeatedPtrField<::tflite::proto::EdgeTpuInactivePowerConfig>* _internal_mutable_inactive_power_configs();
  public:
  const ::tflite::proto::EdgeTpuInactivePowerConfig& inactive_power_configs(int index) const;
  ::tflite::proto::EdgeTpuInactivePowerConfig* add_inactive_power_configs();
  const ::google::protobuf::RepeatedPtrField< ::tflite::proto::EdgeTpuInactivePowerConfig >&
      inactive_power_configs() const;
  // repeated int32 hardware_cluster_ids = 8 [packed = true];
  int hardware_cluster_ids_size() const;
  private:
  int _internal_hardware_cluster_ids_size() const;

  public:
  void clear_hardware_cluster_ids() ;
  ::int32_t hardware_cluster_ids(int index) const;
  void set_hardware_cluster_ids(int index, ::int32_t value);
  void add_hardware_cluster_ids(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& hardware_cluster_ids() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_hardware_cluster_ids();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_hardware_cluster_ids() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_hardware_cluster_ids();

  public:
  // optional string model_token = 5;
  bool has_model_token() const;
  void clear_model_token() ;
  const std::string& model_token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_model_token(Arg_&& arg, Args_... args);
  std::string* mutable_model_token();
  PROTOBUF_NODISCARD std::string* release_model_token();
  void set_allocated_model_token(std::string* ptr);

  private:
  const std::string& _internal_model_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_token(
      const std::string& value);
  std::string* _internal_mutable_model_token();

  public:
  // optional string public_model_id = 9;
  bool has_public_model_id() const;
  void clear_public_model_id() ;
  const std::string& public_model_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_public_model_id(Arg_&& arg, Args_... args);
  std::string* mutable_public_model_id();
  PROTOBUF_NODISCARD std::string* release_public_model_id();
  void set_allocated_public_model_id(std::string* ptr);

  private:
  const std::string& _internal_public_model_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_model_id(
      const std::string& value);
  std::string* _internal_mutable_public_model_id();

  public:
  // optional .tflite.proto.EdgeTpuDeviceSpec edgetpu_device_spec = 4;
  bool has_edgetpu_device_spec() const;
  void clear_edgetpu_device_spec() ;
  const ::tflite::proto::EdgeTpuDeviceSpec& edgetpu_device_spec() const;
  PROTOBUF_NODISCARD ::tflite::proto::EdgeTpuDeviceSpec* release_edgetpu_device_spec();
  ::tflite::proto::EdgeTpuDeviceSpec* mutable_edgetpu_device_spec();
  void set_allocated_edgetpu_device_spec(::tflite::proto::EdgeTpuDeviceSpec* value);
  void unsafe_arena_set_allocated_edgetpu_device_spec(::tflite::proto::EdgeTpuDeviceSpec* value);
  ::tflite::proto::EdgeTpuDeviceSpec* unsafe_arena_release_edgetpu_device_spec();

  private:
  const ::tflite::proto::EdgeTpuDeviceSpec& _internal_edgetpu_device_spec() const;
  ::tflite::proto::EdgeTpuDeviceSpec* _internal_mutable_edgetpu_device_spec();

  public:
  // optional .tflite.proto.EdgeTpuPowerState inference_power_state = 1;
  bool has_inference_power_state() const;
  void clear_inference_power_state() ;
  ::tflite::proto::EdgeTpuPowerState inference_power_state() const;
  void set_inference_power_state(::tflite::proto::EdgeTpuPowerState value);

  private:
  ::tflite::proto::EdgeTpuPowerState _internal_inference_power_state() const;
  void _internal_set_inference_power_state(::tflite::proto::EdgeTpuPowerState value);

  public:
  // optional .tflite.proto.EdgeTpuSettings.FloatTruncationType float_truncation_type = 6;
  bool has_float_truncation_type() const;
  void clear_float_truncation_type() ;
  ::tflite::proto::EdgeTpuSettings_FloatTruncationType float_truncation_type() const;
  void set_float_truncation_type(::tflite::proto::EdgeTpuSettings_FloatTruncationType value);

  private:
  ::tflite::proto::EdgeTpuSettings_FloatTruncationType _internal_float_truncation_type() const;
  void _internal_set_float_truncation_type(::tflite::proto::EdgeTpuSettings_FloatTruncationType value);

  public:
  // optional .tflite.proto.EdgeTpuSettings.QosClass qos_class = 7 [default = QOS_UNDEFINED];
  bool has_qos_class() const;
  void clear_qos_class() ;
  ::tflite::proto::EdgeTpuSettings_QosClass qos_class() const;
  void set_qos_class(::tflite::proto::EdgeTpuSettings_QosClass value);

  private:
  ::tflite::proto::EdgeTpuSettings_QosClass _internal_qos_class() const;
  void _internal_set_qos_class(::tflite::proto::EdgeTpuSettings_QosClass value);

  public:
  // optional int32 inference_priority = 3 [default = -1];
  bool has_inference_priority() const;
  void clear_inference_priority() ;
  ::int32_t inference_priority() const;
  void set_inference_priority(::int32_t value);

  private:
  ::int32_t _internal_inference_priority() const;
  void _internal_set_inference_priority(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tflite.proto.EdgeTpuSettings)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 9, 5, 71, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::tflite::proto::EdgeTpuInactivePowerConfig > inactive_power_configs_;
    ::google::protobuf::RepeatedField<::int32_t> hardware_cluster_ids_;
    mutable ::google::protobuf::internal::CachedSize _hardware_cluster_ids_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr model_token_;
    ::google::protobuf::internal::ArenaStringPtr public_model_id_;
    ::tflite::proto::EdgeTpuDeviceSpec* edgetpu_device_spec_;
    int inference_power_state_;
    int float_truncation_type_;
    int qos_class_;
    ::int32_t inference_priority_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto;
};// -------------------------------------------------------------------

class GoogleEdgeTpuSettings final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.proto.GoogleEdgeTpuSettings) */ {
 public:
  inline GoogleEdgeTpuSettings() : GoogleEdgeTpuSettings(nullptr) {}
  ~GoogleEdgeTpuSettings() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GoogleEdgeTpuSettings(::google::protobuf::internal::ConstantInitialized);

  GoogleEdgeTpuSettings(const GoogleEdgeTpuSettings& from);
  GoogleEdgeTpuSettings(GoogleEdgeTpuSettings&& from) noexcept
    : GoogleEdgeTpuSettings() {
    *this = ::std::move(from);
  }

  inline GoogleEdgeTpuSettings& operator=(const GoogleEdgeTpuSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline GoogleEdgeTpuSettings& operator=(GoogleEdgeTpuSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GoogleEdgeTpuSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const GoogleEdgeTpuSettings* internal_default_instance() {
    return reinterpret_cast<const GoogleEdgeTpuSettings*>(
               &_GoogleEdgeTpuSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GoogleEdgeTpuSettings& a, GoogleEdgeTpuSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(GoogleEdgeTpuSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GoogleEdgeTpuSettings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GoogleEdgeTpuSettings* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GoogleEdgeTpuSettings>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GoogleEdgeTpuSettings& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GoogleEdgeTpuSettings& from) {
    GoogleEdgeTpuSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GoogleEdgeTpuSettings* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tflite.proto.GoogleEdgeTpuSettings";
  }
  protected:
  explicit GoogleEdgeTpuSettings(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Priority = GoogleEdgeTpuSettings_Priority;
  static constexpr Priority PRIORITY_UNDEFINED = GoogleEdgeTpuSettings_Priority_PRIORITY_UNDEFINED;
  static constexpr Priority PRIORITY_LOW = GoogleEdgeTpuSettings_Priority_PRIORITY_LOW;
  static constexpr Priority PRIORITY_MEDIUM = GoogleEdgeTpuSettings_Priority_PRIORITY_MEDIUM;
  static constexpr Priority PRIORITY_HIGH = GoogleEdgeTpuSettings_Priority_PRIORITY_HIGH;
  static inline bool Priority_IsValid(int value) {
    return GoogleEdgeTpuSettings_Priority_IsValid(value);
  }
  static constexpr Priority Priority_MIN = GoogleEdgeTpuSettings_Priority_Priority_MIN;
  static constexpr Priority Priority_MAX = GoogleEdgeTpuSettings_Priority_Priority_MAX;
  static constexpr int Priority_ARRAYSIZE = GoogleEdgeTpuSettings_Priority_Priority_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Priority_descriptor() {
    return GoogleEdgeTpuSettings_Priority_descriptor();
  }
  template <typename T>
  static inline const std::string& Priority_Name(T value) {
    return GoogleEdgeTpuSettings_Priority_Name(value);
  }
  static inline bool Priority_Parse(absl::string_view name, Priority* value) {
    return GoogleEdgeTpuSettings_Priority_Parse(name, value);
  }

  using TriState = GoogleEdgeTpuSettings_TriState;
  static constexpr TriState TRISTATE_UNDEFINED = GoogleEdgeTpuSettings_TriState_TRISTATE_UNDEFINED;
  static constexpr TriState TRISTATE_FALSE = GoogleEdgeTpuSettings_TriState_TRISTATE_FALSE;
  static constexpr TriState TRISTATE_TRUE = GoogleEdgeTpuSettings_TriState_TRISTATE_TRUE;
  static inline bool TriState_IsValid(int value) {
    return GoogleEdgeTpuSettings_TriState_IsValid(value);
  }
  static constexpr TriState TriState_MIN = GoogleEdgeTpuSettings_TriState_TriState_MIN;
  static constexpr TriState TriState_MAX = GoogleEdgeTpuSettings_TriState_TriState_MAX;
  static constexpr int TriState_ARRAYSIZE = GoogleEdgeTpuSettings_TriState_TriState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* TriState_descriptor() {
    return GoogleEdgeTpuSettings_TriState_descriptor();
  }
  template <typename T>
  static inline const std::string& TriState_Name(T value) {
    return GoogleEdgeTpuSettings_TriState_Name(value);
  }
  static inline bool TriState_Parse(absl::string_view name, TriState* value) {
    return GoogleEdgeTpuSettings_TriState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kExtensionDataFieldNumber = 4,
    kModelIdentifierFieldNumber = 5,
    kPriorityFieldNumber = 3,
    kEnableTracingFieldNumber = 2,
    kUseAsyncApiFieldNumber = 6,
    kPreferCacheCoherencyForInputsFieldNumber = 9,
    kPreferCacheCoherencyForOutputsFieldNumber = 10,
    kLogVerbosityFieldNumber = 1,
    kDelegateShouldManageCacheForInputsFieldNumber = 7,
    kDelegateShouldManageCacheForOutputsFieldNumber = 8,
  };
  // optional bytes extension_data = 4;
  bool has_extension_data() const;
  void clear_extension_data() ;
  const std::string& extension_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_extension_data(Arg_&& arg, Args_... args);
  std::string* mutable_extension_data();
  PROTOBUF_NODISCARD std::string* release_extension_data();
  void set_allocated_extension_data(std::string* ptr);

  private:
  const std::string& _internal_extension_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extension_data(
      const std::string& value);
  std::string* _internal_mutable_extension_data();

  public:
  // optional string model_identifier = 5 [default = ""];
  bool has_model_identifier() const;
  void clear_model_identifier() ;
  const std::string& model_identifier() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_model_identifier(Arg_&& arg, Args_... args);
  std::string* mutable_model_identifier();
  PROTOBUF_NODISCARD std::string* release_model_identifier();
  void set_allocated_model_identifier(std::string* ptr);

  private:
  const std::string& _internal_model_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_identifier(
      const std::string& value);
  std::string* _internal_mutable_model_identifier();

  public:
  // optional .tflite.proto.GoogleEdgeTpuSettings.Priority priority = 3;
  bool has_priority() const;
  void clear_priority() ;
  ::tflite::proto::GoogleEdgeTpuSettings_Priority priority() const;
  void set_priority(::tflite::proto::GoogleEdgeTpuSettings_Priority value);

  private:
  ::tflite::proto::GoogleEdgeTpuSettings_Priority _internal_priority() const;
  void _internal_set_priority(::tflite::proto::GoogleEdgeTpuSettings_Priority value);

  public:
  // optional bool enable_tracing = 2 [default = false];
  bool has_enable_tracing() const;
  void clear_enable_tracing() ;
  bool enable_tracing() const;
  void set_enable_tracing(bool value);

  private:
  bool _internal_enable_tracing() const;
  void _internal_set_enable_tracing(bool value);

  public:
  // optional bool use_async_api = 6 [default = false];
  bool has_use_async_api() const;
  void clear_use_async_api() ;
  bool use_async_api() const;
  void set_use_async_api(bool value);

  private:
  bool _internal_use_async_api() const;
  void _internal_set_use_async_api(bool value);

  public:
  // optional .tflite.proto.GoogleEdgeTpuSettings.TriState prefer_cache_coherency_for_inputs = 9;
  bool has_prefer_cache_coherency_for_inputs() const;
  void clear_prefer_cache_coherency_for_inputs() ;
  ::tflite::proto::GoogleEdgeTpuSettings_TriState prefer_cache_coherency_for_inputs() const;
  void set_prefer_cache_coherency_for_inputs(::tflite::proto::GoogleEdgeTpuSettings_TriState value);

  private:
  ::tflite::proto::GoogleEdgeTpuSettings_TriState _internal_prefer_cache_coherency_for_inputs() const;
  void _internal_set_prefer_cache_coherency_for_inputs(::tflite::proto::GoogleEdgeTpuSettings_TriState value);

  public:
  // optional .tflite.proto.GoogleEdgeTpuSettings.TriState prefer_cache_coherency_for_outputs = 10;
  bool has_prefer_cache_coherency_for_outputs() const;
  void clear_prefer_cache_coherency_for_outputs() ;
  ::tflite::proto::GoogleEdgeTpuSettings_TriState prefer_cache_coherency_for_outputs() const;
  void set_prefer_cache_coherency_for_outputs(::tflite::proto::GoogleEdgeTpuSettings_TriState value);

  private:
  ::tflite::proto::GoogleEdgeTpuSettings_TriState _internal_prefer_cache_coherency_for_outputs() const;
  void _internal_set_prefer_cache_coherency_for_outputs(::tflite::proto::GoogleEdgeTpuSettings_TriState value);

  public:
  // optional int32 log_verbosity = 1 [default = -1];
  bool has_log_verbosity() const;
  void clear_log_verbosity() ;
  ::int32_t log_verbosity() const;
  void set_log_verbosity(::int32_t value);

  private:
  ::int32_t _internal_log_verbosity() const;
  void _internal_set_log_verbosity(::int32_t value);

  public:
  // optional bool delegate_should_manage_cache_for_inputs = 7 [default = true];
  bool has_delegate_should_manage_cache_for_inputs() const;
  void clear_delegate_should_manage_cache_for_inputs() ;
  bool delegate_should_manage_cache_for_inputs() const;
  void set_delegate_should_manage_cache_for_inputs(bool value);

  private:
  bool _internal_delegate_should_manage_cache_for_inputs() const;
  void _internal_set_delegate_should_manage_cache_for_inputs(bool value);

  public:
  // optional bool delegate_should_manage_cache_for_outputs = 8 [default = true];
  bool has_delegate_should_manage_cache_for_outputs() const;
  void clear_delegate_should_manage_cache_for_outputs() ;
  bool delegate_should_manage_cache_for_outputs() const;
  void set_delegate_should_manage_cache_for_outputs(bool value);

  private:
  bool _internal_delegate_should_manage_cache_for_outputs() const;
  void _internal_set_delegate_should_manage_cache_for_outputs(bool value);

  public:
  // @@protoc_insertion_point(class_scope:tflite.proto.GoogleEdgeTpuSettings)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 10, 3, 67, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr extension_data_;
    ::google::protobuf::internal::ArenaStringPtr model_identifier_;
    int priority_;
    bool enable_tracing_;
    bool use_async_api_;
    int prefer_cache_coherency_for_inputs_;
    int prefer_cache_coherency_for_outputs_;
    ::int32_t log_verbosity_;
    bool delegate_should_manage_cache_for_inputs_;
    bool delegate_should_manage_cache_for_outputs_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto;
};// -------------------------------------------------------------------

class CoralSettings final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.proto.CoralSettings) */ {
 public:
  inline CoralSettings() : CoralSettings(nullptr) {}
  ~CoralSettings() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CoralSettings(::google::protobuf::internal::ConstantInitialized);

  CoralSettings(const CoralSettings& from);
  CoralSettings(CoralSettings&& from) noexcept
    : CoralSettings() {
    *this = ::std::move(from);
  }

  inline CoralSettings& operator=(const CoralSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline CoralSettings& operator=(CoralSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CoralSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const CoralSettings* internal_default_instance() {
    return reinterpret_cast<const CoralSettings*>(
               &_CoralSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CoralSettings& a, CoralSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(CoralSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CoralSettings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CoralSettings* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CoralSettings>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CoralSettings& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CoralSettings& from) {
    CoralSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CoralSettings* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tflite.proto.CoralSettings";
  }
  protected:
  explicit CoralSettings(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Performance = CoralSettings_Performance;
  static constexpr Performance UNDEFINED = CoralSettings_Performance_UNDEFINED;
  static constexpr Performance MAXIMUM = CoralSettings_Performance_MAXIMUM;
  static constexpr Performance HIGH = CoralSettings_Performance_HIGH;
  static constexpr Performance MEDIUM = CoralSettings_Performance_MEDIUM;
  static constexpr Performance LOW = CoralSettings_Performance_LOW;
  static inline bool Performance_IsValid(int value) {
    return CoralSettings_Performance_IsValid(value);
  }
  static constexpr Performance Performance_MIN = CoralSettings_Performance_Performance_MIN;
  static constexpr Performance Performance_MAX = CoralSettings_Performance_Performance_MAX;
  static constexpr int Performance_ARRAYSIZE = CoralSettings_Performance_Performance_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Performance_descriptor() {
    return CoralSettings_Performance_descriptor();
  }
  template <typename T>
  static inline const std::string& Performance_Name(T value) {
    return CoralSettings_Performance_Name(value);
  }
  static inline bool Performance_Parse(absl::string_view name, Performance* value) {
    return CoralSettings_Performance_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
    kUsbAlwaysDfuFieldNumber = 3,
    kUsbMaxBulkInQueueLengthFieldNumber = 4,
    kPerformanceFieldNumber = 2,
  };
  // optional string device = 1;
  bool has_device() const;
  void clear_device() ;
  const std::string& device() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device(Arg_&& arg, Args_... args);
  std::string* mutable_device();
  PROTOBUF_NODISCARD std::string* release_device();
  void set_allocated_device(std::string* ptr);

  private:
  const std::string& _internal_device() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device(
      const std::string& value);
  std::string* _internal_mutable_device();

  public:
  // optional bool usb_always_dfu = 3;
  bool has_usb_always_dfu() const;
  void clear_usb_always_dfu() ;
  bool usb_always_dfu() const;
  void set_usb_always_dfu(bool value);

  private:
  bool _internal_usb_always_dfu() const;
  void _internal_set_usb_always_dfu(bool value);

  public:
  // optional int32 usb_max_bulk_in_queue_length = 4;
  bool has_usb_max_bulk_in_queue_length() const;
  void clear_usb_max_bulk_in_queue_length() ;
  ::int32_t usb_max_bulk_in_queue_length() const;
  void set_usb_max_bulk_in_queue_length(::int32_t value);

  private:
  ::int32_t _internal_usb_max_bulk_in_queue_length() const;
  void _internal_set_usb_max_bulk_in_queue_length(::int32_t value);

  public:
  // optional .tflite.proto.CoralSettings.Performance performance = 2 [default = MAXIMUM];
  bool has_performance() const;
  void clear_performance() ;
  ::tflite::proto::CoralSettings_Performance performance() const;
  void set_performance(::tflite::proto::CoralSettings_Performance value);

  private:
  ::tflite::proto::CoralSettings_Performance _internal_performance() const;
  void _internal_set_performance(::tflite::proto::CoralSettings_Performance value);

  public:
  // @@protoc_insertion_point(class_scope:tflite.proto.CoralSettings)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 1, 41, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr device_;
    bool usb_always_dfu_;
    ::int32_t usb_max_bulk_in_queue_length_;
    int performance_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto;
};// -------------------------------------------------------------------

class CPUSettings final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.proto.CPUSettings) */ {
 public:
  inline CPUSettings() : CPUSettings(nullptr) {}
  ~CPUSettings() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CPUSettings(::google::protobuf::internal::ConstantInitialized);

  CPUSettings(const CPUSettings& from);
  CPUSettings(CPUSettings&& from) noexcept
    : CPUSettings() {
    *this = ::std::move(from);
  }

  inline CPUSettings& operator=(const CPUSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPUSettings& operator=(CPUSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPUSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPUSettings* internal_default_instance() {
    return reinterpret_cast<const CPUSettings*>(
               &_CPUSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CPUSettings& a, CPUSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(CPUSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPUSettings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPUSettings* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPUSettings>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CPUSettings& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CPUSettings& from) {
    CPUSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPUSettings* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tflite.proto.CPUSettings";
  }
  protected:
  explicit CPUSettings(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumThreadsFieldNumber = 1,
  };
  // optional int32 num_threads = 1 [default = -1];
  bool has_num_threads() const;
  void clear_num_threads() ;
  ::int32_t num_threads() const;
  void set_num_threads(::int32_t value);

  private:
  ::int32_t _internal_num_threads() const;
  void _internal_set_num_threads(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tflite.proto.CPUSettings)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t num_threads_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto;
};// -------------------------------------------------------------------

class TFLiteSettings final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.proto.TFLiteSettings) */ {
 public:
  inline TFLiteSettings() : TFLiteSettings(nullptr) {}
  ~TFLiteSettings() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TFLiteSettings(::google::protobuf::internal::ConstantInitialized);

  TFLiteSettings(const TFLiteSettings& from);
  TFLiteSettings(TFLiteSettings&& from) noexcept
    : TFLiteSettings() {
    *this = ::std::move(from);
  }

  inline TFLiteSettings& operator=(const TFLiteSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline TFLiteSettings& operator=(TFLiteSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TFLiteSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const TFLiteSettings* internal_default_instance() {
    return reinterpret_cast<const TFLiteSettings*>(
               &_TFLiteSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(TFLiteSettings& a, TFLiteSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(TFLiteSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TFLiteSettings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TFLiteSettings* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TFLiteSettings>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TFLiteSettings& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TFLiteSettings& from) {
    TFLiteSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TFLiteSettings* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tflite.proto.TFLiteSettings";
  }
  protected:
  explicit TFLiteSettings(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNnapiSettingsFieldNumber = 2,
    kGpuSettingsFieldNumber = 3,
    kHexagonSettingsFieldNumber = 4,
    kXnnpackSettingsFieldNumber = 5,
    kCpuSettingsFieldNumber = 6,
    kEdgetpuSettingsFieldNumber = 8,
    kFallbackSettingsFieldNumber = 9,
    kCoralSettingsFieldNumber = 10,
    kCoremlSettingsFieldNumber = 11,
    kStableDelegateLoaderSettingsFieldNumber = 13,
    kGoogleEdgetpuSettingsFieldNumber = 14,
    kCompilationCachingSettingsFieldNumber = 15,
    kDelegateFieldNumber = 1,
    kMaxDelegatedPartitionsFieldNumber = 7,
    kDisableDefaultDelegatesFieldNumber = 12,
  };
  // optional .tflite.proto.NNAPISettings nnapi_settings = 2;
  bool has_nnapi_settings() const;
  void clear_nnapi_settings() ;
  const ::tflite::proto::NNAPISettings& nnapi_settings() const;
  PROTOBUF_NODISCARD ::tflite::proto::NNAPISettings* release_nnapi_settings();
  ::tflite::proto::NNAPISettings* mutable_nnapi_settings();
  void set_allocated_nnapi_settings(::tflite::proto::NNAPISettings* value);
  void unsafe_arena_set_allocated_nnapi_settings(::tflite::proto::NNAPISettings* value);
  ::tflite::proto::NNAPISettings* unsafe_arena_release_nnapi_settings();

  private:
  const ::tflite::proto::NNAPISettings& _internal_nnapi_settings() const;
  ::tflite::proto::NNAPISettings* _internal_mutable_nnapi_settings();

  public:
  // optional .tflite.proto.GPUSettings gpu_settings = 3;
  bool has_gpu_settings() const;
  void clear_gpu_settings() ;
  const ::tflite::proto::GPUSettings& gpu_settings() const;
  PROTOBUF_NODISCARD ::tflite::proto::GPUSettings* release_gpu_settings();
  ::tflite::proto::GPUSettings* mutable_gpu_settings();
  void set_allocated_gpu_settings(::tflite::proto::GPUSettings* value);
  void unsafe_arena_set_allocated_gpu_settings(::tflite::proto::GPUSettings* value);
  ::tflite::proto::GPUSettings* unsafe_arena_release_gpu_settings();

  private:
  const ::tflite::proto::GPUSettings& _internal_gpu_settings() const;
  ::tflite::proto::GPUSettings* _internal_mutable_gpu_settings();

  public:
  // optional .tflite.proto.HexagonSettings hexagon_settings = 4;
  bool has_hexagon_settings() const;
  void clear_hexagon_settings() ;
  const ::tflite::proto::HexagonSettings& hexagon_settings() const;
  PROTOBUF_NODISCARD ::tflite::proto::HexagonSettings* release_hexagon_settings();
  ::tflite::proto::HexagonSettings* mutable_hexagon_settings();
  void set_allocated_hexagon_settings(::tflite::proto::HexagonSettings* value);
  void unsafe_arena_set_allocated_hexagon_settings(::tflite::proto::HexagonSettings* value);
  ::tflite::proto::HexagonSettings* unsafe_arena_release_hexagon_settings();

  private:
  const ::tflite::proto::HexagonSettings& _internal_hexagon_settings() const;
  ::tflite::proto::HexagonSettings* _internal_mutable_hexagon_settings();

  public:
  // optional .tflite.proto.XNNPackSettings xnnpack_settings = 5;
  bool has_xnnpack_settings() const;
  void clear_xnnpack_settings() ;
  const ::tflite::proto::XNNPackSettings& xnnpack_settings() const;
  PROTOBUF_NODISCARD ::tflite::proto::XNNPackSettings* release_xnnpack_settings();
  ::tflite::proto::XNNPackSettings* mutable_xnnpack_settings();
  void set_allocated_xnnpack_settings(::tflite::proto::XNNPackSettings* value);
  void unsafe_arena_set_allocated_xnnpack_settings(::tflite::proto::XNNPackSettings* value);
  ::tflite::proto::XNNPackSettings* unsafe_arena_release_xnnpack_settings();

  private:
  const ::tflite::proto::XNNPackSettings& _internal_xnnpack_settings() const;
  ::tflite::proto::XNNPackSettings* _internal_mutable_xnnpack_settings();

  public:
  // optional .tflite.proto.CPUSettings cpu_settings = 6;
  bool has_cpu_settings() const;
  void clear_cpu_settings() ;
  const ::tflite::proto::CPUSettings& cpu_settings() const;
  PROTOBUF_NODISCARD ::tflite::proto::CPUSettings* release_cpu_settings();
  ::tflite::proto::CPUSettings* mutable_cpu_settings();
  void set_allocated_cpu_settings(::tflite::proto::CPUSettings* value);
  void unsafe_arena_set_allocated_cpu_settings(::tflite::proto::CPUSettings* value);
  ::tflite::proto::CPUSettings* unsafe_arena_release_cpu_settings();

  private:
  const ::tflite::proto::CPUSettings& _internal_cpu_settings() const;
  ::tflite::proto::CPUSettings* _internal_mutable_cpu_settings();

  public:
  // optional .tflite.proto.EdgeTpuSettings edgetpu_settings = 8;
  bool has_edgetpu_settings() const;
  void clear_edgetpu_settings() ;
  const ::tflite::proto::EdgeTpuSettings& edgetpu_settings() const;
  PROTOBUF_NODISCARD ::tflite::proto::EdgeTpuSettings* release_edgetpu_settings();
  ::tflite::proto::EdgeTpuSettings* mutable_edgetpu_settings();
  void set_allocated_edgetpu_settings(::tflite::proto::EdgeTpuSettings* value);
  void unsafe_arena_set_allocated_edgetpu_settings(::tflite::proto::EdgeTpuSettings* value);
  ::tflite::proto::EdgeTpuSettings* unsafe_arena_release_edgetpu_settings();

  private:
  const ::tflite::proto::EdgeTpuSettings& _internal_edgetpu_settings() const;
  ::tflite::proto::EdgeTpuSettings* _internal_mutable_edgetpu_settings();

  public:
  // optional .tflite.proto.FallbackSettings fallback_settings = 9;
  bool has_fallback_settings() const;
  void clear_fallback_settings() ;
  const ::tflite::proto::FallbackSettings& fallback_settings() const;
  PROTOBUF_NODISCARD ::tflite::proto::FallbackSettings* release_fallback_settings();
  ::tflite::proto::FallbackSettings* mutable_fallback_settings();
  void set_allocated_fallback_settings(::tflite::proto::FallbackSettings* value);
  void unsafe_arena_set_allocated_fallback_settings(::tflite::proto::FallbackSettings* value);
  ::tflite::proto::FallbackSettings* unsafe_arena_release_fallback_settings();

  private:
  const ::tflite::proto::FallbackSettings& _internal_fallback_settings() const;
  ::tflite::proto::FallbackSettings* _internal_mutable_fallback_settings();

  public:
  // optional .tflite.proto.CoralSettings coral_settings = 10;
  bool has_coral_settings() const;
  void clear_coral_settings() ;
  const ::tflite::proto::CoralSettings& coral_settings() const;
  PROTOBUF_NODISCARD ::tflite::proto::CoralSettings* release_coral_settings();
  ::tflite::proto::CoralSettings* mutable_coral_settings();
  void set_allocated_coral_settings(::tflite::proto::CoralSettings* value);
  void unsafe_arena_set_allocated_coral_settings(::tflite::proto::CoralSettings* value);
  ::tflite::proto::CoralSettings* unsafe_arena_release_coral_settings();

  private:
  const ::tflite::proto::CoralSettings& _internal_coral_settings() const;
  ::tflite::proto::CoralSettings* _internal_mutable_coral_settings();

  public:
  // optional .tflite.proto.CoreMLSettings coreml_settings = 11;
  bool has_coreml_settings() const;
  void clear_coreml_settings() ;
  const ::tflite::proto::CoreMLSettings& coreml_settings() const;
  PROTOBUF_NODISCARD ::tflite::proto::CoreMLSettings* release_coreml_settings();
  ::tflite::proto::CoreMLSettings* mutable_coreml_settings();
  void set_allocated_coreml_settings(::tflite::proto::CoreMLSettings* value);
  void unsafe_arena_set_allocated_coreml_settings(::tflite::proto::CoreMLSettings* value);
  ::tflite::proto::CoreMLSettings* unsafe_arena_release_coreml_settings();

  private:
  const ::tflite::proto::CoreMLSettings& _internal_coreml_settings() const;
  ::tflite::proto::CoreMLSettings* _internal_mutable_coreml_settings();

  public:
  // optional .tflite.proto.StableDelegateLoaderSettings stable_delegate_loader_settings = 13;
  bool has_stable_delegate_loader_settings() const;
  void clear_stable_delegate_loader_settings() ;
  const ::tflite::proto::StableDelegateLoaderSettings& stable_delegate_loader_settings() const;
  PROTOBUF_NODISCARD ::tflite::proto::StableDelegateLoaderSettings* release_stable_delegate_loader_settings();
  ::tflite::proto::StableDelegateLoaderSettings* mutable_stable_delegate_loader_settings();
  void set_allocated_stable_delegate_loader_settings(::tflite::proto::StableDelegateLoaderSettings* value);
  void unsafe_arena_set_allocated_stable_delegate_loader_settings(::tflite::proto::StableDelegateLoaderSettings* value);
  ::tflite::proto::StableDelegateLoaderSettings* unsafe_arena_release_stable_delegate_loader_settings();

  private:
  const ::tflite::proto::StableDelegateLoaderSettings& _internal_stable_delegate_loader_settings() const;
  ::tflite::proto::StableDelegateLoaderSettings* _internal_mutable_stable_delegate_loader_settings();

  public:
  // optional .tflite.proto.GoogleEdgeTpuSettings google_edgetpu_settings = 14;
  bool has_google_edgetpu_settings() const;
  void clear_google_edgetpu_settings() ;
  const ::tflite::proto::GoogleEdgeTpuSettings& google_edgetpu_settings() const;
  PROTOBUF_NODISCARD ::tflite::proto::GoogleEdgeTpuSettings* release_google_edgetpu_settings();
  ::tflite::proto::GoogleEdgeTpuSettings* mutable_google_edgetpu_settings();
  void set_allocated_google_edgetpu_settings(::tflite::proto::GoogleEdgeTpuSettings* value);
  void unsafe_arena_set_allocated_google_edgetpu_settings(::tflite::proto::GoogleEdgeTpuSettings* value);
  ::tflite::proto::GoogleEdgeTpuSettings* unsafe_arena_release_google_edgetpu_settings();

  private:
  const ::tflite::proto::GoogleEdgeTpuSettings& _internal_google_edgetpu_settings() const;
  ::tflite::proto::GoogleEdgeTpuSettings* _internal_mutable_google_edgetpu_settings();

  public:
  // optional .tflite.proto.CompilationCachingSettings compilation_caching_settings = 15;
  bool has_compilation_caching_settings() const;
  void clear_compilation_caching_settings() ;
  const ::tflite::proto::CompilationCachingSettings& compilation_caching_settings() const;
  PROTOBUF_NODISCARD ::tflite::proto::CompilationCachingSettings* release_compilation_caching_settings();
  ::tflite::proto::CompilationCachingSettings* mutable_compilation_caching_settings();
  void set_allocated_compilation_caching_settings(::tflite::proto::CompilationCachingSettings* value);
  void unsafe_arena_set_allocated_compilation_caching_settings(::tflite::proto::CompilationCachingSettings* value);
  ::tflite::proto::CompilationCachingSettings* unsafe_arena_release_compilation_caching_settings();

  private:
  const ::tflite::proto::CompilationCachingSettings& _internal_compilation_caching_settings() const;
  ::tflite::proto::CompilationCachingSettings* _internal_mutable_compilation_caching_settings();

  public:
  // optional .tflite.proto.Delegate delegate = 1;
  bool has_delegate() const;
  void clear_delegate() ;
  ::tflite::proto::Delegate delegate() const;
  void set_delegate(::tflite::proto::Delegate value);

  private:
  ::tflite::proto::Delegate _internal_delegate() const;
  void _internal_set_delegate(::tflite::proto::Delegate value);

  public:
  // optional int32 max_delegated_partitions = 7;
  bool has_max_delegated_partitions() const;
  void clear_max_delegated_partitions() ;
  ::int32_t max_delegated_partitions() const;
  void set_max_delegated_partitions(::int32_t value);

  private:
  ::int32_t _internal_max_delegated_partitions() const;
  void _internal_set_max_delegated_partitions(::int32_t value);

  public:
  // optional bool disable_default_delegates = 12;
  bool has_disable_default_delegates() const;
  void clear_disable_default_delegates() ;
  bool disable_default_delegates() const;
  void set_disable_default_delegates(bool value);

  private:
  bool _internal_disable_default_delegates() const;
  void _internal_set_disable_default_delegates(bool value);

  public:
  // @@protoc_insertion_point(class_scope:tflite.proto.TFLiteSettings)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 15, 13, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::tflite::proto::NNAPISettings* nnapi_settings_;
    ::tflite::proto::GPUSettings* gpu_settings_;
    ::tflite::proto::HexagonSettings* hexagon_settings_;
    ::tflite::proto::XNNPackSettings* xnnpack_settings_;
    ::tflite::proto::CPUSettings* cpu_settings_;
    ::tflite::proto::EdgeTpuSettings* edgetpu_settings_;
    ::tflite::proto::FallbackSettings* fallback_settings_;
    ::tflite::proto::CoralSettings* coral_settings_;
    ::tflite::proto::CoreMLSettings* coreml_settings_;
    ::tflite::proto::StableDelegateLoaderSettings* stable_delegate_loader_settings_;
    ::tflite::proto::GoogleEdgeTpuSettings* google_edgetpu_settings_;
    ::tflite::proto::CompilationCachingSettings* compilation_caching_settings_;
    int delegate_;
    ::int32_t max_delegated_partitions_;
    bool disable_default_delegates_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto;
};// -------------------------------------------------------------------

class FallbackSettings final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.proto.FallbackSettings) */ {
 public:
  inline FallbackSettings() : FallbackSettings(nullptr) {}
  ~FallbackSettings() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FallbackSettings(::google::protobuf::internal::ConstantInitialized);

  FallbackSettings(const FallbackSettings& from);
  FallbackSettings(FallbackSettings&& from) noexcept
    : FallbackSettings() {
    *this = ::std::move(from);
  }

  inline FallbackSettings& operator=(const FallbackSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline FallbackSettings& operator=(FallbackSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FallbackSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const FallbackSettings* internal_default_instance() {
    return reinterpret_cast<const FallbackSettings*>(
               &_FallbackSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(FallbackSettings& a, FallbackSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(FallbackSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FallbackSettings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FallbackSettings* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FallbackSettings>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FallbackSettings& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FallbackSettings& from) {
    FallbackSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FallbackSettings* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tflite.proto.FallbackSettings";
  }
  protected:
  explicit FallbackSettings(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllowAutomaticFallbackOnCompilationErrorFieldNumber = 7,
    kAllowAutomaticFallbackOnExecutionErrorFieldNumber = 8,
  };
  // optional bool allow_automatic_fallback_on_compilation_error = 7;
  bool has_allow_automatic_fallback_on_compilation_error() const;
  void clear_allow_automatic_fallback_on_compilation_error() ;
  bool allow_automatic_fallback_on_compilation_error() const;
  void set_allow_automatic_fallback_on_compilation_error(bool value);

  private:
  bool _internal_allow_automatic_fallback_on_compilation_error() const;
  void _internal_set_allow_automatic_fallback_on_compilation_error(bool value);

  public:
  // optional bool allow_automatic_fallback_on_execution_error = 8;
  bool has_allow_automatic_fallback_on_execution_error() const;
  void clear_allow_automatic_fallback_on_execution_error() ;
  bool allow_automatic_fallback_on_execution_error() const;
  void set_allow_automatic_fallback_on_execution_error(bool value);

  private:
  bool _internal_allow_automatic_fallback_on_execution_error() const;
  void _internal_set_allow_automatic_fallback_on_execution_error(bool value);

  public:
  // @@protoc_insertion_point(class_scope:tflite.proto.FallbackSettings)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    bool allow_automatic_fallback_on_compilation_error_;
    bool allow_automatic_fallback_on_execution_error_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto;
};// -------------------------------------------------------------------

class BenchmarkMetric final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.proto.BenchmarkMetric) */ {
 public:
  inline BenchmarkMetric() : BenchmarkMetric(nullptr) {}
  ~BenchmarkMetric() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BenchmarkMetric(::google::protobuf::internal::ConstantInitialized);

  BenchmarkMetric(const BenchmarkMetric& from);
  BenchmarkMetric(BenchmarkMetric&& from) noexcept
    : BenchmarkMetric() {
    *this = ::std::move(from);
  }

  inline BenchmarkMetric& operator=(const BenchmarkMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline BenchmarkMetric& operator=(BenchmarkMetric&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BenchmarkMetric& default_instance() {
    return *internal_default_instance();
  }
  static inline const BenchmarkMetric* internal_default_instance() {
    return reinterpret_cast<const BenchmarkMetric*>(
               &_BenchmarkMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(BenchmarkMetric& a, BenchmarkMetric& b) {
    a.Swap(&b);
  }
  inline void Swap(BenchmarkMetric* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BenchmarkMetric* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BenchmarkMetric* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BenchmarkMetric>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BenchmarkMetric& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BenchmarkMetric& from) {
    BenchmarkMetric::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BenchmarkMetric* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tflite.proto.BenchmarkMetric";
  }
  protected:
  explicit BenchmarkMetric(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated float values = 2 [packed = true];
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::google::protobuf::RepeatedField<float>& values() const;
  ::google::protobuf::RepeatedField<float>* mutable_values();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_values() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_values();

  public:
  // optional string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:tflite.proto.BenchmarkMetric)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 41, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<float> values_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto;
};// -------------------------------------------------------------------

class BenchmarkResult_InferenceOutput final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.proto.BenchmarkResult.InferenceOutput) */ {
 public:
  inline BenchmarkResult_InferenceOutput() : BenchmarkResult_InferenceOutput(nullptr) {}
  ~BenchmarkResult_InferenceOutput() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BenchmarkResult_InferenceOutput(::google::protobuf::internal::ConstantInitialized);

  BenchmarkResult_InferenceOutput(const BenchmarkResult_InferenceOutput& from);
  BenchmarkResult_InferenceOutput(BenchmarkResult_InferenceOutput&& from) noexcept
    : BenchmarkResult_InferenceOutput() {
    *this = ::std::move(from);
  }

  inline BenchmarkResult_InferenceOutput& operator=(const BenchmarkResult_InferenceOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline BenchmarkResult_InferenceOutput& operator=(BenchmarkResult_InferenceOutput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BenchmarkResult_InferenceOutput& default_instance() {
    return *internal_default_instance();
  }
  static inline const BenchmarkResult_InferenceOutput* internal_default_instance() {
    return reinterpret_cast<const BenchmarkResult_InferenceOutput*>(
               &_BenchmarkResult_InferenceOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(BenchmarkResult_InferenceOutput& a, BenchmarkResult_InferenceOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(BenchmarkResult_InferenceOutput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BenchmarkResult_InferenceOutput* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BenchmarkResult_InferenceOutput* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BenchmarkResult_InferenceOutput>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BenchmarkResult_InferenceOutput& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BenchmarkResult_InferenceOutput& from) {
    BenchmarkResult_InferenceOutput::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BenchmarkResult_InferenceOutput* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tflite.proto.BenchmarkResult.InferenceOutput";
  }
  protected:
  explicit BenchmarkResult_InferenceOutput(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // optional bytes value = 1;
  bool has_value() const;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* ptr);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:tflite.proto.BenchmarkResult.InferenceOutput)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr value_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto;
};// -------------------------------------------------------------------

class BenchmarkResult final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.proto.BenchmarkResult) */ {
 public:
  inline BenchmarkResult() : BenchmarkResult(nullptr) {}
  ~BenchmarkResult() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BenchmarkResult(::google::protobuf::internal::ConstantInitialized);

  BenchmarkResult(const BenchmarkResult& from);
  BenchmarkResult(BenchmarkResult&& from) noexcept
    : BenchmarkResult() {
    *this = ::std::move(from);
  }

  inline BenchmarkResult& operator=(const BenchmarkResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline BenchmarkResult& operator=(BenchmarkResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BenchmarkResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const BenchmarkResult* internal_default_instance() {
    return reinterpret_cast<const BenchmarkResult*>(
               &_BenchmarkResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(BenchmarkResult& a, BenchmarkResult& b) {
    a.Swap(&b);
  }
  inline void Swap(BenchmarkResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BenchmarkResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BenchmarkResult* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BenchmarkResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BenchmarkResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BenchmarkResult& from) {
    BenchmarkResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BenchmarkResult* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tflite.proto.BenchmarkResult";
  }
  protected:
  explicit BenchmarkResult(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BenchmarkResult_InferenceOutput InferenceOutput;

  // accessors -------------------------------------------------------

  enum : int {
    kInitializationTimeUsFieldNumber = 1,
    kInferenceTimeUsFieldNumber = 2,
    kMetricsFieldNumber = 5,
    kActualOutputFieldNumber = 6,
    kMaxMemoryKbFieldNumber = 3,
    kOkFieldNumber = 4,
  };
  // repeated int64 initialization_time_us = 1 [packed = true];
  int initialization_time_us_size() const;
  private:
  int _internal_initialization_time_us_size() const;

  public:
  void clear_initialization_time_us() ;
  ::int64_t initialization_time_us(int index) const;
  void set_initialization_time_us(int index, ::int64_t value);
  void add_initialization_time_us(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& initialization_time_us() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_initialization_time_us();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_initialization_time_us() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_initialization_time_us();

  public:
  // repeated int64 inference_time_us = 2 [packed = true];
  int inference_time_us_size() const;
  private:
  int _internal_inference_time_us_size() const;

  public:
  void clear_inference_time_us() ;
  ::int64_t inference_time_us(int index) const;
  void set_inference_time_us(int index, ::int64_t value);
  void add_inference_time_us(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& inference_time_us() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_inference_time_us();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_inference_time_us() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_inference_time_us();

  public:
  // repeated .tflite.proto.BenchmarkMetric metrics = 5;
  int metrics_size() const;
  private:
  int _internal_metrics_size() const;

  public:
  void clear_metrics() ;
  ::tflite::proto::BenchmarkMetric* mutable_metrics(int index);
  ::google::protobuf::RepeatedPtrField< ::tflite::proto::BenchmarkMetric >*
      mutable_metrics();
  private:
  const ::google::protobuf::RepeatedPtrField<::tflite::proto::BenchmarkMetric>& _internal_metrics() const;
  ::google::protobuf::RepeatedPtrField<::tflite::proto::BenchmarkMetric>* _internal_mutable_metrics();
  public:
  const ::tflite::proto::BenchmarkMetric& metrics(int index) const;
  ::tflite::proto::BenchmarkMetric* add_metrics();
  const ::google::protobuf::RepeatedPtrField< ::tflite::proto::BenchmarkMetric >&
      metrics() const;
  // repeated .tflite.proto.BenchmarkResult.InferenceOutput actual_output = 6;
  int actual_output_size() const;
  private:
  int _internal_actual_output_size() const;

  public:
  void clear_actual_output() ;
  ::tflite::proto::BenchmarkResult_InferenceOutput* mutable_actual_output(int index);
  ::google::protobuf::RepeatedPtrField< ::tflite::proto::BenchmarkResult_InferenceOutput >*
      mutable_actual_output();
  private:
  const ::google::protobuf::RepeatedPtrField<::tflite::proto::BenchmarkResult_InferenceOutput>& _internal_actual_output() const;
  ::google::protobuf::RepeatedPtrField<::tflite::proto::BenchmarkResult_InferenceOutput>* _internal_mutable_actual_output();
  public:
  const ::tflite::proto::BenchmarkResult_InferenceOutput& actual_output(int index) const;
  ::tflite::proto::BenchmarkResult_InferenceOutput* add_actual_output();
  const ::google::protobuf::RepeatedPtrField< ::tflite::proto::BenchmarkResult_InferenceOutput >&
      actual_output() const;
  // optional int32 max_memory_kb = 3;
  bool has_max_memory_kb() const;
  void clear_max_memory_kb() ;
  ::int32_t max_memory_kb() const;
  void set_max_memory_kb(::int32_t value);

  private:
  ::int32_t _internal_max_memory_kb() const;
  void _internal_set_max_memory_kb(::int32_t value);

  public:
  // optional bool ok = 4;
  bool has_ok() const;
  void clear_ok() ;
  bool ok() const;
  void set_ok(bool value);

  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);

  public:
  // @@protoc_insertion_point(class_scope:tflite.proto.BenchmarkResult)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6, 2, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int64_t> initialization_time_us_;
    mutable ::google::protobuf::internal::CachedSize _initialization_time_us_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int64_t> inference_time_us_;
    mutable ::google::protobuf::internal::CachedSize _inference_time_us_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField< ::tflite::proto::BenchmarkMetric > metrics_;
    ::google::protobuf::RepeatedPtrField< ::tflite::proto::BenchmarkResult_InferenceOutput > actual_output_;
    ::int32_t max_memory_kb_;
    bool ok_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto;
};// -------------------------------------------------------------------

class ErrorCode final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.proto.ErrorCode) */ {
 public:
  inline ErrorCode() : ErrorCode(nullptr) {}
  ~ErrorCode() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ErrorCode(::google::protobuf::internal::ConstantInitialized);

  ErrorCode(const ErrorCode& from);
  ErrorCode(ErrorCode&& from) noexcept
    : ErrorCode() {
    *this = ::std::move(from);
  }

  inline ErrorCode& operator=(const ErrorCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrorCode& operator=(ErrorCode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ErrorCode& default_instance() {
    return *internal_default_instance();
  }
  static inline const ErrorCode* internal_default_instance() {
    return reinterpret_cast<const ErrorCode*>(
               &_ErrorCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ErrorCode& a, ErrorCode& b) {
    a.Swap(&b);
  }
  inline void Swap(ErrorCode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ErrorCode* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ErrorCode* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ErrorCode>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ErrorCode& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ErrorCode& from) {
    ErrorCode::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorCode* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tflite.proto.ErrorCode";
  }
  protected:
  explicit ErrorCode(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
    kTfliteErrorFieldNumber = 2,
    kUnderlyingApiErrorFieldNumber = 3,
  };
  // optional .tflite.proto.Delegate source = 1;
  bool has_source() const;
  void clear_source() ;
  ::tflite::proto::Delegate source() const;
  void set_source(::tflite::proto::Delegate value);

  private:
  ::tflite::proto::Delegate _internal_source() const;
  void _internal_set_source(::tflite::proto::Delegate value);

  public:
  // optional int32 tflite_error = 2;
  bool has_tflite_error() const;
  void clear_tflite_error() ;
  ::int32_t tflite_error() const;
  void set_tflite_error(::int32_t value);

  private:
  ::int32_t _internal_tflite_error() const;
  void _internal_set_tflite_error(::int32_t value);

  public:
  // optional int64 underlying_api_error = 3;
  bool has_underlying_api_error() const;
  void clear_underlying_api_error() ;
  ::int64_t underlying_api_error() const;
  void set_underlying_api_error(::int64_t value);

  private:
  ::int64_t _internal_underlying_api_error() const;
  void _internal_set_underlying_api_error(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tflite.proto.ErrorCode)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    int source_;
    ::int32_t tflite_error_;
    ::int64_t underlying_api_error_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto;
};// -------------------------------------------------------------------

class BenchmarkError final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.proto.BenchmarkError) */ {
 public:
  inline BenchmarkError() : BenchmarkError(nullptr) {}
  ~BenchmarkError() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BenchmarkError(::google::protobuf::internal::ConstantInitialized);

  BenchmarkError(const BenchmarkError& from);
  BenchmarkError(BenchmarkError&& from) noexcept
    : BenchmarkError() {
    *this = ::std::move(from);
  }

  inline BenchmarkError& operator=(const BenchmarkError& from) {
    CopyFrom(from);
    return *this;
  }
  inline BenchmarkError& operator=(BenchmarkError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BenchmarkError& default_instance() {
    return *internal_default_instance();
  }
  static inline const BenchmarkError* internal_default_instance() {
    return reinterpret_cast<const BenchmarkError*>(
               &_BenchmarkError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(BenchmarkError& a, BenchmarkError& b) {
    a.Swap(&b);
  }
  inline void Swap(BenchmarkError* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BenchmarkError* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BenchmarkError* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BenchmarkError>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BenchmarkError& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BenchmarkError& from) {
    BenchmarkError::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BenchmarkError* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tflite.proto.BenchmarkError";
  }
  protected:
  explicit BenchmarkError(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorCodeFieldNumber = 4,
    kStageFieldNumber = 1,
    kExitCodeFieldNumber = 2,
    kSignalFieldNumber = 3,
    kMiniBenchmarkErrorCodeFieldNumber = 5,
  };
  // repeated .tflite.proto.ErrorCode error_code = 4;
  int error_code_size() const;
  private:
  int _internal_error_code_size() const;

  public:
  void clear_error_code() ;
  ::tflite::proto::ErrorCode* mutable_error_code(int index);
  ::google::protobuf::RepeatedPtrField< ::tflite::proto::ErrorCode >*
      mutable_error_code();
  private:
  const ::google::protobuf::RepeatedPtrField<::tflite::proto::ErrorCode>& _internal_error_code() const;
  ::google::protobuf::RepeatedPtrField<::tflite::proto::ErrorCode>* _internal_mutable_error_code();
  public:
  const ::tflite::proto::ErrorCode& error_code(int index) const;
  ::tflite::proto::ErrorCode* add_error_code();
  const ::google::protobuf::RepeatedPtrField< ::tflite::proto::ErrorCode >&
      error_code() const;
  // optional .tflite.proto.BenchmarkStage stage = 1;
  bool has_stage() const;
  void clear_stage() ;
  ::tflite::proto::BenchmarkStage stage() const;
  void set_stage(::tflite::proto::BenchmarkStage value);

  private:
  ::tflite::proto::BenchmarkStage _internal_stage() const;
  void _internal_set_stage(::tflite::proto::BenchmarkStage value);

  public:
  // optional int32 exit_code = 2;
  bool has_exit_code() const;
  void clear_exit_code() ;
  ::int32_t exit_code() const;
  void set_exit_code(::int32_t value);

  private:
  ::int32_t _internal_exit_code() const;
  void _internal_set_exit_code(::int32_t value);

  public:
  // optional int32 signal = 3;
  bool has_signal() const;
  void clear_signal() ;
  ::int32_t signal() const;
  void set_signal(::int32_t value);

  private:
  ::int32_t _internal_signal() const;
  void _internal_set_signal(::int32_t value);

  public:
  // optional int32 mini_benchmark_error_code = 5;
  bool has_mini_benchmark_error_code() const;
  void clear_mini_benchmark_error_code() ;
  ::int32_t mini_benchmark_error_code() const;
  void set_mini_benchmark_error_code(::int32_t value);

  private:
  ::int32_t _internal_mini_benchmark_error_code() const;
  void _internal_set_mini_benchmark_error_code(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tflite.proto.BenchmarkError)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 2, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::tflite::proto::ErrorCode > error_code_;
    int stage_;
    ::int32_t exit_code_;
    ::int32_t signal_;
    ::int32_t mini_benchmark_error_code_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto;
};// -------------------------------------------------------------------

class BenchmarkEvent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.proto.BenchmarkEvent) */ {
 public:
  inline BenchmarkEvent() : BenchmarkEvent(nullptr) {}
  ~BenchmarkEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BenchmarkEvent(::google::protobuf::internal::ConstantInitialized);

  BenchmarkEvent(const BenchmarkEvent& from);
  BenchmarkEvent(BenchmarkEvent&& from) noexcept
    : BenchmarkEvent() {
    *this = ::std::move(from);
  }

  inline BenchmarkEvent& operator=(const BenchmarkEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BenchmarkEvent& operator=(BenchmarkEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BenchmarkEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const BenchmarkEvent* internal_default_instance() {
    return reinterpret_cast<const BenchmarkEvent*>(
               &_BenchmarkEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(BenchmarkEvent& a, BenchmarkEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(BenchmarkEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BenchmarkEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BenchmarkEvent* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BenchmarkEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BenchmarkEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BenchmarkEvent& from) {
    BenchmarkEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BenchmarkEvent* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tflite.proto.BenchmarkEvent";
  }
  protected:
  explicit BenchmarkEvent(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTfliteSettingsFieldNumber = 1,
    kResultFieldNumber = 3,
    kErrorFieldNumber = 4,
    kBoottimeUsFieldNumber = 5,
    kWallclockUsFieldNumber = 6,
    kEventTypeFieldNumber = 2,
  };
  // optional .tflite.proto.TFLiteSettings tflite_settings = 1;
  bool has_tflite_settings() const;
  void clear_tflite_settings() ;
  const ::tflite::proto::TFLiteSettings& tflite_settings() const;
  PROTOBUF_NODISCARD ::tflite::proto::TFLiteSettings* release_tflite_settings();
  ::tflite::proto::TFLiteSettings* mutable_tflite_settings();
  void set_allocated_tflite_settings(::tflite::proto::TFLiteSettings* value);
  void unsafe_arena_set_allocated_tflite_settings(::tflite::proto::TFLiteSettings* value);
  ::tflite::proto::TFLiteSettings* unsafe_arena_release_tflite_settings();

  private:
  const ::tflite::proto::TFLiteSettings& _internal_tflite_settings() const;
  ::tflite::proto::TFLiteSettings* _internal_mutable_tflite_settings();

  public:
  // optional .tflite.proto.BenchmarkResult result = 3;
  bool has_result() const;
  void clear_result() ;
  const ::tflite::proto::BenchmarkResult& result() const;
  PROTOBUF_NODISCARD ::tflite::proto::BenchmarkResult* release_result();
  ::tflite::proto::BenchmarkResult* mutable_result();
  void set_allocated_result(::tflite::proto::BenchmarkResult* value);
  void unsafe_arena_set_allocated_result(::tflite::proto::BenchmarkResult* value);
  ::tflite::proto::BenchmarkResult* unsafe_arena_release_result();

  private:
  const ::tflite::proto::BenchmarkResult& _internal_result() const;
  ::tflite::proto::BenchmarkResult* _internal_mutable_result();

  public:
  // optional .tflite.proto.BenchmarkError error = 4;
  bool has_error() const;
  void clear_error() ;
  const ::tflite::proto::BenchmarkError& error() const;
  PROTOBUF_NODISCARD ::tflite::proto::BenchmarkError* release_error();
  ::tflite::proto::BenchmarkError* mutable_error();
  void set_allocated_error(::tflite::proto::BenchmarkError* value);
  void unsafe_arena_set_allocated_error(::tflite::proto::BenchmarkError* value);
  ::tflite::proto::BenchmarkError* unsafe_arena_release_error();

  private:
  const ::tflite::proto::BenchmarkError& _internal_error() const;
  ::tflite::proto::BenchmarkError* _internal_mutable_error();

  public:
  // optional int64 boottime_us = 5;
  bool has_boottime_us() const;
  void clear_boottime_us() ;
  ::int64_t boottime_us() const;
  void set_boottime_us(::int64_t value);

  private:
  ::int64_t _internal_boottime_us() const;
  void _internal_set_boottime_us(::int64_t value);

  public:
  // optional int64 wallclock_us = 6;
  bool has_wallclock_us() const;
  void clear_wallclock_us() ;
  ::int64_t wallclock_us() const;
  void set_wallclock_us(::int64_t value);

  private:
  ::int64_t _internal_wallclock_us() const;
  void _internal_set_wallclock_us(::int64_t value);

  public:
  // optional .tflite.proto.BenchmarkEventType event_type = 2;
  bool has_event_type() const;
  void clear_event_type() ;
  ::tflite::proto::BenchmarkEventType event_type() const;
  void set_event_type(::tflite::proto::BenchmarkEventType value);

  private:
  ::tflite::proto::BenchmarkEventType _internal_event_type() const;
  void _internal_set_event_type(::tflite::proto::BenchmarkEventType value);

  public:
  // @@protoc_insertion_point(class_scope:tflite.proto.BenchmarkEvent)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6, 4, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::tflite::proto::TFLiteSettings* tflite_settings_;
    ::tflite::proto::BenchmarkResult* result_;
    ::tflite::proto::BenchmarkError* error_;
    ::int64_t boottime_us_;
    ::int64_t wallclock_us_;
    int event_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto;
};// -------------------------------------------------------------------

class BestAccelerationDecision final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.proto.BestAccelerationDecision) */ {
 public:
  inline BestAccelerationDecision() : BestAccelerationDecision(nullptr) {}
  ~BestAccelerationDecision() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BestAccelerationDecision(::google::protobuf::internal::ConstantInitialized);

  BestAccelerationDecision(const BestAccelerationDecision& from);
  BestAccelerationDecision(BestAccelerationDecision&& from) noexcept
    : BestAccelerationDecision() {
    *this = ::std::move(from);
  }

  inline BestAccelerationDecision& operator=(const BestAccelerationDecision& from) {
    CopyFrom(from);
    return *this;
  }
  inline BestAccelerationDecision& operator=(BestAccelerationDecision&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BestAccelerationDecision& default_instance() {
    return *internal_default_instance();
  }
  static inline const BestAccelerationDecision* internal_default_instance() {
    return reinterpret_cast<const BestAccelerationDecision*>(
               &_BestAccelerationDecision_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(BestAccelerationDecision& a, BestAccelerationDecision& b) {
    a.Swap(&b);
  }
  inline void Swap(BestAccelerationDecision* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BestAccelerationDecision* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BestAccelerationDecision* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BestAccelerationDecision>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BestAccelerationDecision& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BestAccelerationDecision& from) {
    BestAccelerationDecision::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BestAccelerationDecision* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tflite.proto.BestAccelerationDecision";
  }
  protected:
  explicit BestAccelerationDecision(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinLatencyEventFieldNumber = 2,
    kMinInferenceTimeUsFieldNumber = 3,
    kNumberOfSourceEventsFieldNumber = 1,
  };
  // optional .tflite.proto.BenchmarkEvent min_latency_event = 2;
  bool has_min_latency_event() const;
  void clear_min_latency_event() ;
  const ::tflite::proto::BenchmarkEvent& min_latency_event() const;
  PROTOBUF_NODISCARD ::tflite::proto::BenchmarkEvent* release_min_latency_event();
  ::tflite::proto::BenchmarkEvent* mutable_min_latency_event();
  void set_allocated_min_latency_event(::tflite::proto::BenchmarkEvent* value);
  void unsafe_arena_set_allocated_min_latency_event(::tflite::proto::BenchmarkEvent* value);
  ::tflite::proto::BenchmarkEvent* unsafe_arena_release_min_latency_event();

  private:
  const ::tflite::proto::BenchmarkEvent& _internal_min_latency_event() const;
  ::tflite::proto::BenchmarkEvent* _internal_mutable_min_latency_event();

  public:
  // optional int64 min_inference_time_us = 3;
  bool has_min_inference_time_us() const;
  void clear_min_inference_time_us() ;
  ::int64_t min_inference_time_us() const;
  void set_min_inference_time_us(::int64_t value);

  private:
  ::int64_t _internal_min_inference_time_us() const;
  void _internal_set_min_inference_time_us(::int64_t value);

  public:
  // optional int32 number_of_source_events = 1;
  bool has_number_of_source_events() const;
  void clear_number_of_source_events() ;
  ::int32_t number_of_source_events() const;
  void set_number_of_source_events(::int32_t value);

  private:
  ::int32_t _internal_number_of_source_events() const;
  void _internal_set_number_of_source_events(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tflite.proto.BestAccelerationDecision)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::tflite::proto::BenchmarkEvent* min_latency_event_;
    ::int64_t min_inference_time_us_;
    ::int32_t number_of_source_events_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto;
};// -------------------------------------------------------------------

class BenchmarkInitializationFailure final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.proto.BenchmarkInitializationFailure) */ {
 public:
  inline BenchmarkInitializationFailure() : BenchmarkInitializationFailure(nullptr) {}
  ~BenchmarkInitializationFailure() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BenchmarkInitializationFailure(::google::protobuf::internal::ConstantInitialized);

  BenchmarkInitializationFailure(const BenchmarkInitializationFailure& from);
  BenchmarkInitializationFailure(BenchmarkInitializationFailure&& from) noexcept
    : BenchmarkInitializationFailure() {
    *this = ::std::move(from);
  }

  inline BenchmarkInitializationFailure& operator=(const BenchmarkInitializationFailure& from) {
    CopyFrom(from);
    return *this;
  }
  inline BenchmarkInitializationFailure& operator=(BenchmarkInitializationFailure&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BenchmarkInitializationFailure& default_instance() {
    return *internal_default_instance();
  }
  static inline const BenchmarkInitializationFailure* internal_default_instance() {
    return reinterpret_cast<const BenchmarkInitializationFailure*>(
               &_BenchmarkInitializationFailure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(BenchmarkInitializationFailure& a, BenchmarkInitializationFailure& b) {
    a.Swap(&b);
  }
  inline void Swap(BenchmarkInitializationFailure* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BenchmarkInitializationFailure* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BenchmarkInitializationFailure* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BenchmarkInitializationFailure>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BenchmarkInitializationFailure& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BenchmarkInitializationFailure& from) {
    BenchmarkInitializationFailure::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BenchmarkInitializationFailure* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tflite.proto.BenchmarkInitializationFailure";
  }
  protected:
  explicit BenchmarkInitializationFailure(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInitializationStatusFieldNumber = 1,
  };
  // optional int32 initialization_status = 1;
  bool has_initialization_status() const;
  void clear_initialization_status() ;
  ::int32_t initialization_status() const;
  void set_initialization_status(::int32_t value);

  private:
  ::int32_t _internal_initialization_status() const;
  void _internal_set_initialization_status(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tflite.proto.BenchmarkInitializationFailure)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t initialization_status_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto;
};// -------------------------------------------------------------------

class MiniBenchmarkEvent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.proto.MiniBenchmarkEvent) */ {
 public:
  inline MiniBenchmarkEvent() : MiniBenchmarkEvent(nullptr) {}
  ~MiniBenchmarkEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MiniBenchmarkEvent(::google::protobuf::internal::ConstantInitialized);

  MiniBenchmarkEvent(const MiniBenchmarkEvent& from);
  MiniBenchmarkEvent(MiniBenchmarkEvent&& from) noexcept
    : MiniBenchmarkEvent() {
    *this = ::std::move(from);
  }

  inline MiniBenchmarkEvent& operator=(const MiniBenchmarkEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MiniBenchmarkEvent& operator=(MiniBenchmarkEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MiniBenchmarkEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const MiniBenchmarkEvent* internal_default_instance() {
    return reinterpret_cast<const MiniBenchmarkEvent*>(
               &_MiniBenchmarkEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(MiniBenchmarkEvent& a, MiniBenchmarkEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MiniBenchmarkEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MiniBenchmarkEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MiniBenchmarkEvent* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MiniBenchmarkEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MiniBenchmarkEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MiniBenchmarkEvent& from) {
    MiniBenchmarkEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MiniBenchmarkEvent* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tflite.proto.MiniBenchmarkEvent";
  }
  protected:
  explicit MiniBenchmarkEvent(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBestAccelerationDecisionFieldNumber = 2,
    kInitializationFailureFieldNumber = 3,
    kBenchmarkEventFieldNumber = 4,
    kIsLogFlushingEventFieldNumber = 1,
  };
  // optional .tflite.proto.BestAccelerationDecision best_acceleration_decision = 2;
  bool has_best_acceleration_decision() const;
  void clear_best_acceleration_decision() ;
  const ::tflite::proto::BestAccelerationDecision& best_acceleration_decision() const;
  PROTOBUF_NODISCARD ::tflite::proto::BestAccelerationDecision* release_best_acceleration_decision();
  ::tflite::proto::BestAccelerationDecision* mutable_best_acceleration_decision();
  void set_allocated_best_acceleration_decision(::tflite::proto::BestAccelerationDecision* value);
  void unsafe_arena_set_allocated_best_acceleration_decision(::tflite::proto::BestAccelerationDecision* value);
  ::tflite::proto::BestAccelerationDecision* unsafe_arena_release_best_acceleration_decision();

  private:
  const ::tflite::proto::BestAccelerationDecision& _internal_best_acceleration_decision() const;
  ::tflite::proto::BestAccelerationDecision* _internal_mutable_best_acceleration_decision();

  public:
  // optional .tflite.proto.BenchmarkInitializationFailure initialization_failure = 3;
  bool has_initialization_failure() const;
  void clear_initialization_failure() ;
  const ::tflite::proto::BenchmarkInitializationFailure& initialization_failure() const;
  PROTOBUF_NODISCARD ::tflite::proto::BenchmarkInitializationFailure* release_initialization_failure();
  ::tflite::proto::BenchmarkInitializationFailure* mutable_initialization_failure();
  void set_allocated_initialization_failure(::tflite::proto::BenchmarkInitializationFailure* value);
  void unsafe_arena_set_allocated_initialization_failure(::tflite::proto::BenchmarkInitializationFailure* value);
  ::tflite::proto::BenchmarkInitializationFailure* unsafe_arena_release_initialization_failure();

  private:
  const ::tflite::proto::BenchmarkInitializationFailure& _internal_initialization_failure() const;
  ::tflite::proto::BenchmarkInitializationFailure* _internal_mutable_initialization_failure();

  public:
  // optional .tflite.proto.BenchmarkEvent benchmark_event = 4;
  bool has_benchmark_event() const;
  void clear_benchmark_event() ;
  const ::tflite::proto::BenchmarkEvent& benchmark_event() const;
  PROTOBUF_NODISCARD ::tflite::proto::BenchmarkEvent* release_benchmark_event();
  ::tflite::proto::BenchmarkEvent* mutable_benchmark_event();
  void set_allocated_benchmark_event(::tflite::proto::BenchmarkEvent* value);
  void unsafe_arena_set_allocated_benchmark_event(::tflite::proto::BenchmarkEvent* value);
  ::tflite::proto::BenchmarkEvent* unsafe_arena_release_benchmark_event();

  private:
  const ::tflite::proto::BenchmarkEvent& _internal_benchmark_event() const;
  ::tflite::proto::BenchmarkEvent* _internal_mutable_benchmark_event();

  public:
  // optional bool is_log_flushing_event = 1;
  bool has_is_log_flushing_event() const;
  void clear_is_log_flushing_event() ;
  bool is_log_flushing_event() const;
  void set_is_log_flushing_event(bool value);

  private:
  bool _internal_is_log_flushing_event() const;
  void _internal_set_is_log_flushing_event(bool value);

  public:
  // @@protoc_insertion_point(class_scope:tflite.proto.MiniBenchmarkEvent)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 3, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::tflite::proto::BestAccelerationDecision* best_acceleration_decision_;
    ::tflite::proto::BenchmarkInitializationFailure* initialization_failure_;
    ::tflite::proto::BenchmarkEvent* benchmark_event_;
    bool is_log_flushing_event_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto;
};// -------------------------------------------------------------------

class ModelFile final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.proto.ModelFile) */ {
 public:
  inline ModelFile() : ModelFile(nullptr) {}
  ~ModelFile() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ModelFile(::google::protobuf::internal::ConstantInitialized);

  ModelFile(const ModelFile& from);
  ModelFile(ModelFile&& from) noexcept
    : ModelFile() {
    *this = ::std::move(from);
  }

  inline ModelFile& operator=(const ModelFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelFile& operator=(ModelFile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModelFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelFile* internal_default_instance() {
    return reinterpret_cast<const ModelFile*>(
               &_ModelFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ModelFile& a, ModelFile& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelFile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelFile* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelFile* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelFile>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ModelFile& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ModelFile& from) {
    ModelFile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelFile* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tflite.proto.ModelFile";
  }
  protected:
  explicit ModelFile(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 1,
    kModelIdGroupFieldNumber = 5,
    kFdFieldNumber = 2,
    kOffsetFieldNumber = 3,
    kLengthFieldNumber = 4,
    kBufferHandleFieldNumber = 6,
  };
  // optional string filename = 1;
  bool has_filename() const;
  void clear_filename() ;
  const std::string& filename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filename(Arg_&& arg, Args_... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* ptr);

  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(
      const std::string& value);
  std::string* _internal_mutable_filename();

  public:
  // optional .tflite.proto.ModelIdGroup model_id_group = 5;
  bool has_model_id_group() const;
  void clear_model_id_group() ;
  const ::tflite::proto::ModelIdGroup& model_id_group() const;
  PROTOBUF_NODISCARD ::tflite::proto::ModelIdGroup* release_model_id_group();
  ::tflite::proto::ModelIdGroup* mutable_model_id_group();
  void set_allocated_model_id_group(::tflite::proto::ModelIdGroup* value);
  void unsafe_arena_set_allocated_model_id_group(::tflite::proto::ModelIdGroup* value);
  ::tflite::proto::ModelIdGroup* unsafe_arena_release_model_id_group();

  private:
  const ::tflite::proto::ModelIdGroup& _internal_model_id_group() const;
  ::tflite::proto::ModelIdGroup* _internal_mutable_model_id_group();

  public:
  // optional int64 fd = 2;
  bool has_fd() const;
  void clear_fd() ;
  ::int64_t fd() const;
  void set_fd(::int64_t value);

  private:
  ::int64_t _internal_fd() const;
  void _internal_set_fd(::int64_t value);

  public:
  // optional int64 offset = 3;
  bool has_offset() const;
  void clear_offset() ;
  ::int64_t offset() const;
  void set_offset(::int64_t value);

  private:
  ::int64_t _internal_offset() const;
  void _internal_set_offset(::int64_t value);

  public:
  // optional int64 length = 4;
  bool has_length() const;
  void clear_length() ;
  ::int64_t length() const;
  void set_length(::int64_t value);

  private:
  ::int64_t _internal_length() const;
  void _internal_set_length(::int64_t value);

  public:
  // optional int64 buffer_handle = 6;
  bool has_buffer_handle() const;
  void clear_buffer_handle() ;
  ::int64_t buffer_handle() const;
  void set_buffer_handle(::int64_t value);

  private:
  ::int64_t _internal_buffer_handle() const;
  void _internal_set_buffer_handle(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tflite.proto.ModelFile)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6, 1, 39, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr filename_;
    ::tflite::proto::ModelIdGroup* model_id_group_;
    ::int64_t fd_;
    ::int64_t offset_;
    ::int64_t length_;
    ::int64_t buffer_handle_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto;
};// -------------------------------------------------------------------

class ModelIdGroup final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.proto.ModelIdGroup) */ {
 public:
  inline ModelIdGroup() : ModelIdGroup(nullptr) {}
  ~ModelIdGroup() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ModelIdGroup(::google::protobuf::internal::ConstantInitialized);

  ModelIdGroup(const ModelIdGroup& from);
  ModelIdGroup(ModelIdGroup&& from) noexcept
    : ModelIdGroup() {
    *this = ::std::move(from);
  }

  inline ModelIdGroup& operator=(const ModelIdGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelIdGroup& operator=(ModelIdGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModelIdGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelIdGroup* internal_default_instance() {
    return reinterpret_cast<const ModelIdGroup*>(
               &_ModelIdGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ModelIdGroup& a, ModelIdGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelIdGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelIdGroup* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelIdGroup* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelIdGroup>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ModelIdGroup& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ModelIdGroup& from) {
    ModelIdGroup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelIdGroup* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tflite.proto.ModelIdGroup";
  }
  protected:
  explicit ModelIdGroup(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelNamespaceFieldNumber = 1,
    kModelIdFieldNumber = 2,
  };
  // optional string model_namespace = 1;
  bool has_model_namespace() const;
  void clear_model_namespace() ;
  const std::string& model_namespace() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_model_namespace(Arg_&& arg, Args_... args);
  std::string* mutable_model_namespace();
  PROTOBUF_NODISCARD std::string* release_model_namespace();
  void set_allocated_model_namespace(std::string* ptr);

  private:
  const std::string& _internal_model_namespace() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_namespace(
      const std::string& value);
  std::string* _internal_mutable_model_namespace();

  public:
  // optional string model_id = 2;
  bool has_model_id() const;
  void clear_model_id() ;
  const std::string& model_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_model_id(Arg_&& arg, Args_... args);
  std::string* mutable_model_id();
  PROTOBUF_NODISCARD std::string* release_model_id();
  void set_allocated_model_id(std::string* ptr);

  private:
  const std::string& _internal_model_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_id(
      const std::string& value);
  std::string* _internal_mutable_model_id();

  public:
  // @@protoc_insertion_point(class_scope:tflite.proto.ModelIdGroup)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 57, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr model_namespace_;
    ::google::protobuf::internal::ArenaStringPtr model_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto;
};// -------------------------------------------------------------------

class BenchmarkStoragePaths final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.proto.BenchmarkStoragePaths) */ {
 public:
  inline BenchmarkStoragePaths() : BenchmarkStoragePaths(nullptr) {}
  ~BenchmarkStoragePaths() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BenchmarkStoragePaths(::google::protobuf::internal::ConstantInitialized);

  BenchmarkStoragePaths(const BenchmarkStoragePaths& from);
  BenchmarkStoragePaths(BenchmarkStoragePaths&& from) noexcept
    : BenchmarkStoragePaths() {
    *this = ::std::move(from);
  }

  inline BenchmarkStoragePaths& operator=(const BenchmarkStoragePaths& from) {
    CopyFrom(from);
    return *this;
  }
  inline BenchmarkStoragePaths& operator=(BenchmarkStoragePaths&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BenchmarkStoragePaths& default_instance() {
    return *internal_default_instance();
  }
  static inline const BenchmarkStoragePaths* internal_default_instance() {
    return reinterpret_cast<const BenchmarkStoragePaths*>(
               &_BenchmarkStoragePaths_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(BenchmarkStoragePaths& a, BenchmarkStoragePaths& b) {
    a.Swap(&b);
  }
  inline void Swap(BenchmarkStoragePaths* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BenchmarkStoragePaths* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BenchmarkStoragePaths* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BenchmarkStoragePaths>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BenchmarkStoragePaths& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BenchmarkStoragePaths& from) {
    BenchmarkStoragePaths::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BenchmarkStoragePaths* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tflite.proto.BenchmarkStoragePaths";
  }
  protected:
  explicit BenchmarkStoragePaths(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStorageFilePathFieldNumber = 1,
    kDataDirectoryPathFieldNumber = 2,
  };
  // optional string storage_file_path = 1;
  bool has_storage_file_path() const;
  void clear_storage_file_path() ;
  const std::string& storage_file_path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_storage_file_path(Arg_&& arg, Args_... args);
  std::string* mutable_storage_file_path();
  PROTOBUF_NODISCARD std::string* release_storage_file_path();
  void set_allocated_storage_file_path(std::string* ptr);

  private:
  const std::string& _internal_storage_file_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_storage_file_path(
      const std::string& value);
  std::string* _internal_mutable_storage_file_path();

  public:
  // optional string data_directory_path = 2;
  bool has_data_directory_path() const;
  void clear_data_directory_path() ;
  const std::string& data_directory_path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data_directory_path(Arg_&& arg, Args_... args);
  std::string* mutable_data_directory_path();
  PROTOBUF_NODISCARD std::string* release_data_directory_path();
  void set_allocated_data_directory_path(std::string* ptr);

  private:
  const std::string& _internal_data_directory_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_directory_path(
      const std::string& value);
  std::string* _internal_mutable_data_directory_path();

  public:
  // @@protoc_insertion_point(class_scope:tflite.proto.BenchmarkStoragePaths)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 79, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr storage_file_path_;
    ::google::protobuf::internal::ArenaStringPtr data_directory_path_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto;
};// -------------------------------------------------------------------

class ValidationSettings final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.proto.ValidationSettings) */ {
 public:
  inline ValidationSettings() : ValidationSettings(nullptr) {}
  ~ValidationSettings() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ValidationSettings(::google::protobuf::internal::ConstantInitialized);

  ValidationSettings(const ValidationSettings& from);
  ValidationSettings(ValidationSettings&& from) noexcept
    : ValidationSettings() {
    *this = ::std::move(from);
  }

  inline ValidationSettings& operator=(const ValidationSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidationSettings& operator=(ValidationSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidationSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValidationSettings* internal_default_instance() {
    return reinterpret_cast<const ValidationSettings*>(
               &_ValidationSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ValidationSettings& a, ValidationSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidationSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidationSettings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValidationSettings* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ValidationSettings>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ValidationSettings& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ValidationSettings& from) {
    ValidationSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidationSettings* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tflite.proto.ValidationSettings";
  }
  protected:
  explicit ValidationSettings(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPerTestTimeoutMsFieldNumber = 1,
  };
  // optional int64 per_test_timeout_ms = 1;
  bool has_per_test_timeout_ms() const;
  void clear_per_test_timeout_ms() ;
  ::int64_t per_test_timeout_ms() const;
  void set_per_test_timeout_ms(::int64_t value);

  private:
  ::int64_t _internal_per_test_timeout_ms() const;
  void _internal_set_per_test_timeout_ms(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tflite.proto.ValidationSettings)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t per_test_timeout_ms_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto;
};// -------------------------------------------------------------------

class MinibenchmarkSettings final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.proto.MinibenchmarkSettings) */ {
 public:
  inline MinibenchmarkSettings() : MinibenchmarkSettings(nullptr) {}
  ~MinibenchmarkSettings() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MinibenchmarkSettings(::google::protobuf::internal::ConstantInitialized);

  MinibenchmarkSettings(const MinibenchmarkSettings& from);
  MinibenchmarkSettings(MinibenchmarkSettings&& from) noexcept
    : MinibenchmarkSettings() {
    *this = ::std::move(from);
  }

  inline MinibenchmarkSettings& operator=(const MinibenchmarkSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline MinibenchmarkSettings& operator=(MinibenchmarkSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MinibenchmarkSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const MinibenchmarkSettings* internal_default_instance() {
    return reinterpret_cast<const MinibenchmarkSettings*>(
               &_MinibenchmarkSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(MinibenchmarkSettings& a, MinibenchmarkSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(MinibenchmarkSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MinibenchmarkSettings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MinibenchmarkSettings* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MinibenchmarkSettings>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MinibenchmarkSettings& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MinibenchmarkSettings& from) {
    MinibenchmarkSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MinibenchmarkSettings* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tflite.proto.MinibenchmarkSettings";
  }
  protected:
  explicit MinibenchmarkSettings(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSettingsToTestFieldNumber = 1,
    kModelFileFieldNumber = 2,
    kStoragePathsFieldNumber = 3,
    kValidationSettingsFieldNumber = 4,
  };
  // repeated .tflite.proto.TFLiteSettings settings_to_test = 1;
  int settings_to_test_size() const;
  private:
  int _internal_settings_to_test_size() const;

  public:
  void clear_settings_to_test() ;
  ::tflite::proto::TFLiteSettings* mutable_settings_to_test(int index);
  ::google::protobuf::RepeatedPtrField< ::tflite::proto::TFLiteSettings >*
      mutable_settings_to_test();
  private:
  const ::google::protobuf::RepeatedPtrField<::tflite::proto::TFLiteSettings>& _internal_settings_to_test() const;
  ::google::protobuf::RepeatedPtrField<::tflite::proto::TFLiteSettings>* _internal_mutable_settings_to_test();
  public:
  const ::tflite::proto::TFLiteSettings& settings_to_test(int index) const;
  ::tflite::proto::TFLiteSettings* add_settings_to_test();
  const ::google::protobuf::RepeatedPtrField< ::tflite::proto::TFLiteSettings >&
      settings_to_test() const;
  // optional .tflite.proto.ModelFile model_file = 2;
  bool has_model_file() const;
  void clear_model_file() ;
  const ::tflite::proto::ModelFile& model_file() const;
  PROTOBUF_NODISCARD ::tflite::proto::ModelFile* release_model_file();
  ::tflite::proto::ModelFile* mutable_model_file();
  void set_allocated_model_file(::tflite::proto::ModelFile* value);
  void unsafe_arena_set_allocated_model_file(::tflite::proto::ModelFile* value);
  ::tflite::proto::ModelFile* unsafe_arena_release_model_file();

  private:
  const ::tflite::proto::ModelFile& _internal_model_file() const;
  ::tflite::proto::ModelFile* _internal_mutable_model_file();

  public:
  // optional .tflite.proto.BenchmarkStoragePaths storage_paths = 3;
  bool has_storage_paths() const;
  void clear_storage_paths() ;
  const ::tflite::proto::BenchmarkStoragePaths& storage_paths() const;
  PROTOBUF_NODISCARD ::tflite::proto::BenchmarkStoragePaths* release_storage_paths();
  ::tflite::proto::BenchmarkStoragePaths* mutable_storage_paths();
  void set_allocated_storage_paths(::tflite::proto::BenchmarkStoragePaths* value);
  void unsafe_arena_set_allocated_storage_paths(::tflite::proto::BenchmarkStoragePaths* value);
  ::tflite::proto::BenchmarkStoragePaths* unsafe_arena_release_storage_paths();

  private:
  const ::tflite::proto::BenchmarkStoragePaths& _internal_storage_paths() const;
  ::tflite::proto::BenchmarkStoragePaths* _internal_mutable_storage_paths();

  public:
  // optional .tflite.proto.ValidationSettings validation_settings = 4;
  bool has_validation_settings() const;
  void clear_validation_settings() ;
  const ::tflite::proto::ValidationSettings& validation_settings() const;
  PROTOBUF_NODISCARD ::tflite::proto::ValidationSettings* release_validation_settings();
  ::tflite::proto::ValidationSettings* mutable_validation_settings();
  void set_allocated_validation_settings(::tflite::proto::ValidationSettings* value);
  void unsafe_arena_set_allocated_validation_settings(::tflite::proto::ValidationSettings* value);
  ::tflite::proto::ValidationSettings* unsafe_arena_release_validation_settings();

  private:
  const ::tflite::proto::ValidationSettings& _internal_validation_settings() const;
  ::tflite::proto::ValidationSettings* _internal_mutable_validation_settings();

  public:
  // @@protoc_insertion_point(class_scope:tflite.proto.MinibenchmarkSettings)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 4, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::tflite::proto::TFLiteSettings > settings_to_test_;
    ::tflite::proto::ModelFile* model_file_;
    ::tflite::proto::BenchmarkStoragePaths* storage_paths_;
    ::tflite::proto::ValidationSettings* validation_settings_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto;
};// -------------------------------------------------------------------

class BenchmarkEventStorage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.proto.BenchmarkEventStorage) */ {
 public:
  inline BenchmarkEventStorage() : BenchmarkEventStorage(nullptr) {}
  ~BenchmarkEventStorage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BenchmarkEventStorage(::google::protobuf::internal::ConstantInitialized);

  BenchmarkEventStorage(const BenchmarkEventStorage& from);
  BenchmarkEventStorage(BenchmarkEventStorage&& from) noexcept
    : BenchmarkEventStorage() {
    *this = ::std::move(from);
  }

  inline BenchmarkEventStorage& operator=(const BenchmarkEventStorage& from) {
    CopyFrom(from);
    return *this;
  }
  inline BenchmarkEventStorage& operator=(BenchmarkEventStorage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BenchmarkEventStorage& default_instance() {
    return *internal_default_instance();
  }
  static inline const BenchmarkEventStorage* internal_default_instance() {
    return reinterpret_cast<const BenchmarkEventStorage*>(
               &_BenchmarkEventStorage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(BenchmarkEventStorage& a, BenchmarkEventStorage& b) {
    a.Swap(&b);
  }
  inline void Swap(BenchmarkEventStorage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BenchmarkEventStorage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BenchmarkEventStorage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BenchmarkEventStorage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BenchmarkEventStorage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BenchmarkEventStorage& from) {
    BenchmarkEventStorage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BenchmarkEventStorage* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tflite.proto.BenchmarkEventStorage";
  }
  protected:
  explicit BenchmarkEventStorage(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelIdGroupFieldNumber = 1,
    kBenchmarkEventFieldNumber = 2,
  };
  // optional .tflite.proto.ModelIdGroup model_id_group = 1;
  bool has_model_id_group() const;
  void clear_model_id_group() ;
  const ::tflite::proto::ModelIdGroup& model_id_group() const;
  PROTOBUF_NODISCARD ::tflite::proto::ModelIdGroup* release_model_id_group();
  ::tflite::proto::ModelIdGroup* mutable_model_id_group();
  void set_allocated_model_id_group(::tflite::proto::ModelIdGroup* value);
  void unsafe_arena_set_allocated_model_id_group(::tflite::proto::ModelIdGroup* value);
  ::tflite::proto::ModelIdGroup* unsafe_arena_release_model_id_group();

  private:
  const ::tflite::proto::ModelIdGroup& _internal_model_id_group() const;
  ::tflite::proto::ModelIdGroup* _internal_mutable_model_id_group();

  public:
  // optional .tflite.proto.BenchmarkEvent benchmark_event = 2;
  bool has_benchmark_event() const;
  void clear_benchmark_event() ;
  const ::tflite::proto::BenchmarkEvent& benchmark_event() const;
  PROTOBUF_NODISCARD ::tflite::proto::BenchmarkEvent* release_benchmark_event();
  ::tflite::proto::BenchmarkEvent* mutable_benchmark_event();
  void set_allocated_benchmark_event(::tflite::proto::BenchmarkEvent* value);
  void unsafe_arena_set_allocated_benchmark_event(::tflite::proto::BenchmarkEvent* value);
  ::tflite::proto::BenchmarkEvent* unsafe_arena_release_benchmark_event();

  private:
  const ::tflite::proto::BenchmarkEvent& _internal_benchmark_event() const;
  ::tflite::proto::BenchmarkEvent* _internal_mutable_benchmark_event();

  public:
  // @@protoc_insertion_point(class_scope:tflite.proto.BenchmarkEventStorage)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 2, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::tflite::proto::ModelIdGroup* model_id_group_;
    ::tflite::proto::BenchmarkEvent* benchmark_event_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ComputeSettings

// optional .tflite.proto.ExecutionPreference preference = 1;
inline bool ComputeSettings::has_preference() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ComputeSettings::clear_preference() {
  _impl_.preference_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::tflite::proto::ExecutionPreference ComputeSettings::preference() const {
  // @@protoc_insertion_point(field_get:tflite.proto.ComputeSettings.preference)
  return _internal_preference();
}
inline void ComputeSettings::set_preference(::tflite::proto::ExecutionPreference value) {
  _internal_set_preference(value);
  // @@protoc_insertion_point(field_set:tflite.proto.ComputeSettings.preference)
}
inline ::tflite::proto::ExecutionPreference ComputeSettings::_internal_preference() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tflite::proto::ExecutionPreference>(_impl_.preference_);
}
inline void ComputeSettings::_internal_set_preference(::tflite::proto::ExecutionPreference value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::tflite::proto::ExecutionPreference_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.preference_ = value;
}

// optional .tflite.proto.TFLiteSettings tflite_settings = 2;
inline bool ComputeSettings::has_tflite_settings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tflite_settings_ != nullptr);
  return value;
}
inline void ComputeSettings::clear_tflite_settings() {
  if (_impl_.tflite_settings_ != nullptr) _impl_.tflite_settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::tflite::proto::TFLiteSettings& ComputeSettings::_internal_tflite_settings() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tflite::proto::TFLiteSettings* p = _impl_.tflite_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::proto::TFLiteSettings&>(::tflite::proto::_TFLiteSettings_default_instance_);
}
inline const ::tflite::proto::TFLiteSettings& ComputeSettings::tflite_settings() const {
  // @@protoc_insertion_point(field_get:tflite.proto.ComputeSettings.tflite_settings)
  return _internal_tflite_settings();
}
inline void ComputeSettings::unsafe_arena_set_allocated_tflite_settings(::tflite::proto::TFLiteSettings* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tflite_settings_);
  }
  _impl_.tflite_settings_ = reinterpret_cast<::tflite::proto::TFLiteSettings*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.proto.ComputeSettings.tflite_settings)
}
inline ::tflite::proto::TFLiteSettings* ComputeSettings::release_tflite_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tflite::proto::TFLiteSettings* released = _impl_.tflite_settings_;
  _impl_.tflite_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tflite::proto::TFLiteSettings* ComputeSettings::unsafe_arena_release_tflite_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.ComputeSettings.tflite_settings)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tflite::proto::TFLiteSettings* temp = _impl_.tflite_settings_;
  _impl_.tflite_settings_ = nullptr;
  return temp;
}
inline ::tflite::proto::TFLiteSettings* ComputeSettings::_internal_mutable_tflite_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.tflite_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::proto::TFLiteSettings>(GetArenaForAllocation());
    _impl_.tflite_settings_ = reinterpret_cast<::tflite::proto::TFLiteSettings*>(p);
  }
  return _impl_.tflite_settings_;
}
inline ::tflite::proto::TFLiteSettings* ComputeSettings::mutable_tflite_settings() {
  ::tflite::proto::TFLiteSettings* _msg = _internal_mutable_tflite_settings();
  // @@protoc_insertion_point(field_mutable:tflite.proto.ComputeSettings.tflite_settings)
  return _msg;
}
inline void ComputeSettings::set_allocated_tflite_settings(::tflite::proto::TFLiteSettings* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::tflite::proto::TFLiteSettings*>(_impl_.tflite_settings_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::tflite::proto::TFLiteSettings*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.tflite_settings_ = reinterpret_cast<::tflite::proto::TFLiteSettings*>(value);
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.ComputeSettings.tflite_settings)
}

// optional string model_namespace_for_statistics = 3;
inline bool ComputeSettings::has_model_namespace_for_statistics() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ComputeSettings::clear_model_namespace_for_statistics() {
  _impl_.model_namespace_for_statistics_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ComputeSettings::model_namespace_for_statistics() const {
  // @@protoc_insertion_point(field_get:tflite.proto.ComputeSettings.model_namespace_for_statistics)
  return _internal_model_namespace_for_statistics();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ComputeSettings::set_model_namespace_for_statistics(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.model_namespace_for_statistics_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.proto.ComputeSettings.model_namespace_for_statistics)
}
inline std::string* ComputeSettings::mutable_model_namespace_for_statistics() {
  std::string* _s = _internal_mutable_model_namespace_for_statistics();
  // @@protoc_insertion_point(field_mutable:tflite.proto.ComputeSettings.model_namespace_for_statistics)
  return _s;
}
inline const std::string& ComputeSettings::_internal_model_namespace_for_statistics() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.model_namespace_for_statistics_.Get();
}
inline void ComputeSettings::_internal_set_model_namespace_for_statistics(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.model_namespace_for_statistics_.Set(value, GetArenaForAllocation());
}
inline std::string* ComputeSettings::_internal_mutable_model_namespace_for_statistics() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.model_namespace_for_statistics_.Mutable( GetArenaForAllocation());
}
inline std::string* ComputeSettings::release_model_namespace_for_statistics() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.ComputeSettings.model_namespace_for_statistics)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.model_namespace_for_statistics_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_namespace_for_statistics_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ComputeSettings::set_allocated_model_namespace_for_statistics(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.model_namespace_for_statistics_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.model_namespace_for_statistics_.IsDefault()) {
          _impl_.model_namespace_for_statistics_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.ComputeSettings.model_namespace_for_statistics)
}

// optional string model_identifier_for_statistics = 4;
inline bool ComputeSettings::has_model_identifier_for_statistics() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ComputeSettings::clear_model_identifier_for_statistics() {
  _impl_.model_identifier_for_statistics_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ComputeSettings::model_identifier_for_statistics() const {
  // @@protoc_insertion_point(field_get:tflite.proto.ComputeSettings.model_identifier_for_statistics)
  return _internal_model_identifier_for_statistics();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ComputeSettings::set_model_identifier_for_statistics(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.model_identifier_for_statistics_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.proto.ComputeSettings.model_identifier_for_statistics)
}
inline std::string* ComputeSettings::mutable_model_identifier_for_statistics() {
  std::string* _s = _internal_mutable_model_identifier_for_statistics();
  // @@protoc_insertion_point(field_mutable:tflite.proto.ComputeSettings.model_identifier_for_statistics)
  return _s;
}
inline const std::string& ComputeSettings::_internal_model_identifier_for_statistics() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.model_identifier_for_statistics_.Get();
}
inline void ComputeSettings::_internal_set_model_identifier_for_statistics(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.model_identifier_for_statistics_.Set(value, GetArenaForAllocation());
}
inline std::string* ComputeSettings::_internal_mutable_model_identifier_for_statistics() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.model_identifier_for_statistics_.Mutable( GetArenaForAllocation());
}
inline std::string* ComputeSettings::release_model_identifier_for_statistics() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.ComputeSettings.model_identifier_for_statistics)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.model_identifier_for_statistics_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_identifier_for_statistics_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ComputeSettings::set_allocated_model_identifier_for_statistics(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.model_identifier_for_statistics_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.model_identifier_for_statistics_.IsDefault()) {
          _impl_.model_identifier_for_statistics_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.ComputeSettings.model_identifier_for_statistics)
}

// optional .tflite.proto.MinibenchmarkSettings settings_to_test_locally = 5;
inline bool ComputeSettings::has_settings_to_test_locally() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.settings_to_test_locally_ != nullptr);
  return value;
}
inline void ComputeSettings::clear_settings_to_test_locally() {
  if (_impl_.settings_to_test_locally_ != nullptr) _impl_.settings_to_test_locally_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::tflite::proto::MinibenchmarkSettings& ComputeSettings::_internal_settings_to_test_locally() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tflite::proto::MinibenchmarkSettings* p = _impl_.settings_to_test_locally_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::proto::MinibenchmarkSettings&>(::tflite::proto::_MinibenchmarkSettings_default_instance_);
}
inline const ::tflite::proto::MinibenchmarkSettings& ComputeSettings::settings_to_test_locally() const {
  // @@protoc_insertion_point(field_get:tflite.proto.ComputeSettings.settings_to_test_locally)
  return _internal_settings_to_test_locally();
}
inline void ComputeSettings::unsafe_arena_set_allocated_settings_to_test_locally(::tflite::proto::MinibenchmarkSettings* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.settings_to_test_locally_);
  }
  _impl_.settings_to_test_locally_ = reinterpret_cast<::tflite::proto::MinibenchmarkSettings*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.proto.ComputeSettings.settings_to_test_locally)
}
inline ::tflite::proto::MinibenchmarkSettings* ComputeSettings::release_settings_to_test_locally() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tflite::proto::MinibenchmarkSettings* released = _impl_.settings_to_test_locally_;
  _impl_.settings_to_test_locally_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tflite::proto::MinibenchmarkSettings* ComputeSettings::unsafe_arena_release_settings_to_test_locally() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.ComputeSettings.settings_to_test_locally)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tflite::proto::MinibenchmarkSettings* temp = _impl_.settings_to_test_locally_;
  _impl_.settings_to_test_locally_ = nullptr;
  return temp;
}
inline ::tflite::proto::MinibenchmarkSettings* ComputeSettings::_internal_mutable_settings_to_test_locally() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.settings_to_test_locally_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::proto::MinibenchmarkSettings>(GetArenaForAllocation());
    _impl_.settings_to_test_locally_ = reinterpret_cast<::tflite::proto::MinibenchmarkSettings*>(p);
  }
  return _impl_.settings_to_test_locally_;
}
inline ::tflite::proto::MinibenchmarkSettings* ComputeSettings::mutable_settings_to_test_locally() {
  ::tflite::proto::MinibenchmarkSettings* _msg = _internal_mutable_settings_to_test_locally();
  // @@protoc_insertion_point(field_mutable:tflite.proto.ComputeSettings.settings_to_test_locally)
  return _msg;
}
inline void ComputeSettings::set_allocated_settings_to_test_locally(::tflite::proto::MinibenchmarkSettings* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::tflite::proto::MinibenchmarkSettings*>(_impl_.settings_to_test_locally_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::tflite::proto::MinibenchmarkSettings*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.settings_to_test_locally_ = reinterpret_cast<::tflite::proto::MinibenchmarkSettings*>(value);
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.ComputeSettings.settings_to_test_locally)
}

// -------------------------------------------------------------------

// NNAPISettings

// optional string accelerator_name = 1;
inline bool NNAPISettings::has_accelerator_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void NNAPISettings::clear_accelerator_name() {
  _impl_.accelerator_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NNAPISettings::accelerator_name() const {
  // @@protoc_insertion_point(field_get:tflite.proto.NNAPISettings.accelerator_name)
  return _internal_accelerator_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NNAPISettings::set_accelerator_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.accelerator_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.proto.NNAPISettings.accelerator_name)
}
inline std::string* NNAPISettings::mutable_accelerator_name() {
  std::string* _s = _internal_mutable_accelerator_name();
  // @@protoc_insertion_point(field_mutable:tflite.proto.NNAPISettings.accelerator_name)
  return _s;
}
inline const std::string& NNAPISettings::_internal_accelerator_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.accelerator_name_.Get();
}
inline void NNAPISettings::_internal_set_accelerator_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.accelerator_name_.Set(value, GetArenaForAllocation());
}
inline std::string* NNAPISettings::_internal_mutable_accelerator_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.accelerator_name_.Mutable( GetArenaForAllocation());
}
inline std::string* NNAPISettings::release_accelerator_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.NNAPISettings.accelerator_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.accelerator_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.accelerator_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void NNAPISettings::set_allocated_accelerator_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.accelerator_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.accelerator_name_.IsDefault()) {
          _impl_.accelerator_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.NNAPISettings.accelerator_name)
}

// optional string cache_directory = 2 [deprecated = true];
inline bool NNAPISettings::has_cache_directory() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void NNAPISettings::clear_cache_directory() {
  _impl_.cache_directory_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NNAPISettings::cache_directory() const {
  // @@protoc_insertion_point(field_get:tflite.proto.NNAPISettings.cache_directory)
  return _internal_cache_directory();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NNAPISettings::set_cache_directory(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cache_directory_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.proto.NNAPISettings.cache_directory)
}
inline std::string* NNAPISettings::mutable_cache_directory() {
  std::string* _s = _internal_mutable_cache_directory();
  // @@protoc_insertion_point(field_mutable:tflite.proto.NNAPISettings.cache_directory)
  return _s;
}
inline const std::string& NNAPISettings::_internal_cache_directory() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cache_directory_.Get();
}
inline void NNAPISettings::_internal_set_cache_directory(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cache_directory_.Set(value, GetArenaForAllocation());
}
inline std::string* NNAPISettings::_internal_mutable_cache_directory() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.cache_directory_.Mutable( GetArenaForAllocation());
}
inline std::string* NNAPISettings::release_cache_directory() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.NNAPISettings.cache_directory)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.cache_directory_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cache_directory_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void NNAPISettings::set_allocated_cache_directory(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.cache_directory_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cache_directory_.IsDefault()) {
          _impl_.cache_directory_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.NNAPISettings.cache_directory)
}

// optional string model_token = 3 [deprecated = true];
inline bool NNAPISettings::has_model_token() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void NNAPISettings::clear_model_token() {
  _impl_.model_token_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& NNAPISettings::model_token() const {
  // @@protoc_insertion_point(field_get:tflite.proto.NNAPISettings.model_token)
  return _internal_model_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NNAPISettings::set_model_token(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.model_token_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.proto.NNAPISettings.model_token)
}
inline std::string* NNAPISettings::mutable_model_token() {
  std::string* _s = _internal_mutable_model_token();
  // @@protoc_insertion_point(field_mutable:tflite.proto.NNAPISettings.model_token)
  return _s;
}
inline const std::string& NNAPISettings::_internal_model_token() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.model_token_.Get();
}
inline void NNAPISettings::_internal_set_model_token(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.model_token_.Set(value, GetArenaForAllocation());
}
inline std::string* NNAPISettings::_internal_mutable_model_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.model_token_.Mutable( GetArenaForAllocation());
}
inline std::string* NNAPISettings::release_model_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.NNAPISettings.model_token)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.model_token_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void NNAPISettings::set_allocated_model_token(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.model_token_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.model_token_.IsDefault()) {
          _impl_.model_token_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.NNAPISettings.model_token)
}

// optional .tflite.proto.NNAPIExecutionPreference execution_preference = 4;
inline bool NNAPISettings::has_execution_preference() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void NNAPISettings::clear_execution_preference() {
  _impl_.execution_preference_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::tflite::proto::NNAPIExecutionPreference NNAPISettings::execution_preference() const {
  // @@protoc_insertion_point(field_get:tflite.proto.NNAPISettings.execution_preference)
  return _internal_execution_preference();
}
inline void NNAPISettings::set_execution_preference(::tflite::proto::NNAPIExecutionPreference value) {
  _internal_set_execution_preference(value);
  // @@protoc_insertion_point(field_set:tflite.proto.NNAPISettings.execution_preference)
}
inline ::tflite::proto::NNAPIExecutionPreference NNAPISettings::_internal_execution_preference() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tflite::proto::NNAPIExecutionPreference>(_impl_.execution_preference_);
}
inline void NNAPISettings::_internal_set_execution_preference(::tflite::proto::NNAPIExecutionPreference value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::tflite::proto::NNAPIExecutionPreference_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.execution_preference_ = value;
}

// optional int32 no_of_nnapi_instances_to_cache = 5;
inline bool NNAPISettings::has_no_of_nnapi_instances_to_cache() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void NNAPISettings::clear_no_of_nnapi_instances_to_cache() {
  _impl_.no_of_nnapi_instances_to_cache_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t NNAPISettings::no_of_nnapi_instances_to_cache() const {
  // @@protoc_insertion_point(field_get:tflite.proto.NNAPISettings.no_of_nnapi_instances_to_cache)
  return _internal_no_of_nnapi_instances_to_cache();
}
inline void NNAPISettings::set_no_of_nnapi_instances_to_cache(::int32_t value) {
  _internal_set_no_of_nnapi_instances_to_cache(value);
  // @@protoc_insertion_point(field_set:tflite.proto.NNAPISettings.no_of_nnapi_instances_to_cache)
}
inline ::int32_t NNAPISettings::_internal_no_of_nnapi_instances_to_cache() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.no_of_nnapi_instances_to_cache_;
}
inline void NNAPISettings::_internal_set_no_of_nnapi_instances_to_cache(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.no_of_nnapi_instances_to_cache_ = value;
}

// optional .tflite.proto.FallbackSettings fallback_settings = 6 [deprecated = true];
inline bool NNAPISettings::has_fallback_settings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fallback_settings_ != nullptr);
  return value;
}
inline void NNAPISettings::clear_fallback_settings() {
  if (_impl_.fallback_settings_ != nullptr) _impl_.fallback_settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::tflite::proto::FallbackSettings& NNAPISettings::_internal_fallback_settings() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tflite::proto::FallbackSettings* p = _impl_.fallback_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::proto::FallbackSettings&>(::tflite::proto::_FallbackSettings_default_instance_);
}
inline const ::tflite::proto::FallbackSettings& NNAPISettings::fallback_settings() const {
  // @@protoc_insertion_point(field_get:tflite.proto.NNAPISettings.fallback_settings)
  return _internal_fallback_settings();
}
inline void NNAPISettings::unsafe_arena_set_allocated_fallback_settings(::tflite::proto::FallbackSettings* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.fallback_settings_);
  }
  _impl_.fallback_settings_ = reinterpret_cast<::tflite::proto::FallbackSettings*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.proto.NNAPISettings.fallback_settings)
}
inline ::tflite::proto::FallbackSettings* NNAPISettings::release_fallback_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tflite::proto::FallbackSettings* released = _impl_.fallback_settings_;
  _impl_.fallback_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tflite::proto::FallbackSettings* NNAPISettings::unsafe_arena_release_fallback_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.NNAPISettings.fallback_settings)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tflite::proto::FallbackSettings* temp = _impl_.fallback_settings_;
  _impl_.fallback_settings_ = nullptr;
  return temp;
}
inline ::tflite::proto::FallbackSettings* NNAPISettings::_internal_mutable_fallback_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.fallback_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::proto::FallbackSettings>(GetArenaForAllocation());
    _impl_.fallback_settings_ = reinterpret_cast<::tflite::proto::FallbackSettings*>(p);
  }
  return _impl_.fallback_settings_;
}
inline ::tflite::proto::FallbackSettings* NNAPISettings::mutable_fallback_settings() {
  ::tflite::proto::FallbackSettings* _msg = _internal_mutable_fallback_settings();
  // @@protoc_insertion_point(field_mutable:tflite.proto.NNAPISettings.fallback_settings)
  return _msg;
}
inline void NNAPISettings::set_allocated_fallback_settings(::tflite::proto::FallbackSettings* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::tflite::proto::FallbackSettings*>(_impl_.fallback_settings_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::tflite::proto::FallbackSettings*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.fallback_settings_ = reinterpret_cast<::tflite::proto::FallbackSettings*>(value);
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.NNAPISettings.fallback_settings)
}

// optional bool allow_nnapi_cpu_on_android_10_plus = 7;
inline bool NNAPISettings::has_allow_nnapi_cpu_on_android_10_plus() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void NNAPISettings::clear_allow_nnapi_cpu_on_android_10_plus() {
  _impl_.allow_nnapi_cpu_on_android_10_plus_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool NNAPISettings::allow_nnapi_cpu_on_android_10_plus() const {
  // @@protoc_insertion_point(field_get:tflite.proto.NNAPISettings.allow_nnapi_cpu_on_android_10_plus)
  return _internal_allow_nnapi_cpu_on_android_10_plus();
}
inline void NNAPISettings::set_allow_nnapi_cpu_on_android_10_plus(bool value) {
  _internal_set_allow_nnapi_cpu_on_android_10_plus(value);
  // @@protoc_insertion_point(field_set:tflite.proto.NNAPISettings.allow_nnapi_cpu_on_android_10_plus)
}
inline bool NNAPISettings::_internal_allow_nnapi_cpu_on_android_10_plus() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.allow_nnapi_cpu_on_android_10_plus_;
}
inline void NNAPISettings::_internal_set_allow_nnapi_cpu_on_android_10_plus(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.allow_nnapi_cpu_on_android_10_plus_ = value;
}

// optional .tflite.proto.NNAPIExecutionPriority execution_priority = 8;
inline bool NNAPISettings::has_execution_priority() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void NNAPISettings::clear_execution_priority() {
  _impl_.execution_priority_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::tflite::proto::NNAPIExecutionPriority NNAPISettings::execution_priority() const {
  // @@protoc_insertion_point(field_get:tflite.proto.NNAPISettings.execution_priority)
  return _internal_execution_priority();
}
inline void NNAPISettings::set_execution_priority(::tflite::proto::NNAPIExecutionPriority value) {
  _internal_set_execution_priority(value);
  // @@protoc_insertion_point(field_set:tflite.proto.NNAPISettings.execution_priority)
}
inline ::tflite::proto::NNAPIExecutionPriority NNAPISettings::_internal_execution_priority() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tflite::proto::NNAPIExecutionPriority>(_impl_.execution_priority_);
}
inline void NNAPISettings::_internal_set_execution_priority(::tflite::proto::NNAPIExecutionPriority value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::tflite::proto::NNAPIExecutionPriority_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.execution_priority_ = value;
}

// optional bool allow_dynamic_dimensions = 9;
inline bool NNAPISettings::has_allow_dynamic_dimensions() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void NNAPISettings::clear_allow_dynamic_dimensions() {
  _impl_.allow_dynamic_dimensions_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool NNAPISettings::allow_dynamic_dimensions() const {
  // @@protoc_insertion_point(field_get:tflite.proto.NNAPISettings.allow_dynamic_dimensions)
  return _internal_allow_dynamic_dimensions();
}
inline void NNAPISettings::set_allow_dynamic_dimensions(bool value) {
  _internal_set_allow_dynamic_dimensions(value);
  // @@protoc_insertion_point(field_set:tflite.proto.NNAPISettings.allow_dynamic_dimensions)
}
inline bool NNAPISettings::_internal_allow_dynamic_dimensions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.allow_dynamic_dimensions_;
}
inline void NNAPISettings::_internal_set_allow_dynamic_dimensions(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.allow_dynamic_dimensions_ = value;
}

// optional bool allow_fp16_precision_for_fp32 = 10;
inline bool NNAPISettings::has_allow_fp16_precision_for_fp32() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void NNAPISettings::clear_allow_fp16_precision_for_fp32() {
  _impl_.allow_fp16_precision_for_fp32_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool NNAPISettings::allow_fp16_precision_for_fp32() const {
  // @@protoc_insertion_point(field_get:tflite.proto.NNAPISettings.allow_fp16_precision_for_fp32)
  return _internal_allow_fp16_precision_for_fp32();
}
inline void NNAPISettings::set_allow_fp16_precision_for_fp32(bool value) {
  _internal_set_allow_fp16_precision_for_fp32(value);
  // @@protoc_insertion_point(field_set:tflite.proto.NNAPISettings.allow_fp16_precision_for_fp32)
}
inline bool NNAPISettings::_internal_allow_fp16_precision_for_fp32() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.allow_fp16_precision_for_fp32_;
}
inline void NNAPISettings::_internal_set_allow_fp16_precision_for_fp32(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.allow_fp16_precision_for_fp32_ = value;
}

// optional bool use_burst_computation = 11;
inline bool NNAPISettings::has_use_burst_computation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void NNAPISettings::clear_use_burst_computation() {
  _impl_.use_burst_computation_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool NNAPISettings::use_burst_computation() const {
  // @@protoc_insertion_point(field_get:tflite.proto.NNAPISettings.use_burst_computation)
  return _internal_use_burst_computation();
}
inline void NNAPISettings::set_use_burst_computation(bool value) {
  _internal_set_use_burst_computation(value);
  // @@protoc_insertion_point(field_set:tflite.proto.NNAPISettings.use_burst_computation)
}
inline bool NNAPISettings::_internal_use_burst_computation() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.use_burst_computation_;
}
inline void NNAPISettings::_internal_set_use_burst_computation(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.use_burst_computation_ = value;
}

// optional int64 support_library_handle = 12;
inline bool NNAPISettings::has_support_library_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void NNAPISettings::clear_support_library_handle() {
  _impl_.support_library_handle_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::int64_t NNAPISettings::support_library_handle() const {
  // @@protoc_insertion_point(field_get:tflite.proto.NNAPISettings.support_library_handle)
  return _internal_support_library_handle();
}
inline void NNAPISettings::set_support_library_handle(::int64_t value) {
  _internal_set_support_library_handle(value);
  // @@protoc_insertion_point(field_set:tflite.proto.NNAPISettings.support_library_handle)
}
inline ::int64_t NNAPISettings::_internal_support_library_handle() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.support_library_handle_;
}
inline void NNAPISettings::_internal_set_support_library_handle(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.support_library_handle_ = value;
}

// -------------------------------------------------------------------

// GPUSettings

// optional bool is_precision_loss_allowed = 1;
inline bool GPUSettings::has_is_precision_loss_allowed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GPUSettings::clear_is_precision_loss_allowed() {
  _impl_.is_precision_loss_allowed_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool GPUSettings::is_precision_loss_allowed() const {
  // @@protoc_insertion_point(field_get:tflite.proto.GPUSettings.is_precision_loss_allowed)
  return _internal_is_precision_loss_allowed();
}
inline void GPUSettings::set_is_precision_loss_allowed(bool value) {
  _internal_set_is_precision_loss_allowed(value);
  // @@protoc_insertion_point(field_set:tflite.proto.GPUSettings.is_precision_loss_allowed)
}
inline bool GPUSettings::_internal_is_precision_loss_allowed() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_precision_loss_allowed_;
}
inline void GPUSettings::_internal_set_is_precision_loss_allowed(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.is_precision_loss_allowed_ = value;
}

// optional bool enable_quantized_inference = 2 [default = true];
inline bool GPUSettings::has_enable_quantized_inference() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void GPUSettings::clear_enable_quantized_inference() {
  _impl_.enable_quantized_inference_ = true;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool GPUSettings::enable_quantized_inference() const {
  // @@protoc_insertion_point(field_get:tflite.proto.GPUSettings.enable_quantized_inference)
  return _internal_enable_quantized_inference();
}
inline void GPUSettings::set_enable_quantized_inference(bool value) {
  _internal_set_enable_quantized_inference(value);
  // @@protoc_insertion_point(field_set:tflite.proto.GPUSettings.enable_quantized_inference)
}
inline bool GPUSettings::_internal_enable_quantized_inference() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.enable_quantized_inference_;
}
inline void GPUSettings::_internal_set_enable_quantized_inference(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.enable_quantized_inference_ = value;
}

// optional .tflite.proto.GPUBackend force_backend = 3;
inline bool GPUSettings::has_force_backend() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void GPUSettings::clear_force_backend() {
  _impl_.force_backend_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::tflite::proto::GPUBackend GPUSettings::force_backend() const {
  // @@protoc_insertion_point(field_get:tflite.proto.GPUSettings.force_backend)
  return _internal_force_backend();
}
inline void GPUSettings::set_force_backend(::tflite::proto::GPUBackend value) {
  _internal_set_force_backend(value);
  // @@protoc_insertion_point(field_set:tflite.proto.GPUSettings.force_backend)
}
inline ::tflite::proto::GPUBackend GPUSettings::_internal_force_backend() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tflite::proto::GPUBackend>(_impl_.force_backend_);
}
inline void GPUSettings::_internal_set_force_backend(::tflite::proto::GPUBackend value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::tflite::proto::GPUBackend_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.force_backend_ = value;
}

// optional .tflite.proto.GPUInferencePriority inference_priority1 = 4 [default = GPU_PRIORITY_AUTO];
inline bool GPUSettings::has_inference_priority1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void GPUSettings::clear_inference_priority1() {
  _impl_.inference_priority1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::tflite::proto::GPUInferencePriority GPUSettings::inference_priority1() const {
  // @@protoc_insertion_point(field_get:tflite.proto.GPUSettings.inference_priority1)
  return _internal_inference_priority1();
}
inline void GPUSettings::set_inference_priority1(::tflite::proto::GPUInferencePriority value) {
  _internal_set_inference_priority1(value);
  // @@protoc_insertion_point(field_set:tflite.proto.GPUSettings.inference_priority1)
}
inline ::tflite::proto::GPUInferencePriority GPUSettings::_internal_inference_priority1() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tflite::proto::GPUInferencePriority>(_impl_.inference_priority1_);
}
inline void GPUSettings::_internal_set_inference_priority1(::tflite::proto::GPUInferencePriority value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::tflite::proto::GPUInferencePriority_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.inference_priority1_ = value;
}

// optional .tflite.proto.GPUInferencePriority inference_priority2 = 5 [default = GPU_PRIORITY_AUTO];
inline bool GPUSettings::has_inference_priority2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void GPUSettings::clear_inference_priority2() {
  _impl_.inference_priority2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::tflite::proto::GPUInferencePriority GPUSettings::inference_priority2() const {
  // @@protoc_insertion_point(field_get:tflite.proto.GPUSettings.inference_priority2)
  return _internal_inference_priority2();
}
inline void GPUSettings::set_inference_priority2(::tflite::proto::GPUInferencePriority value) {
  _internal_set_inference_priority2(value);
  // @@protoc_insertion_point(field_set:tflite.proto.GPUSettings.inference_priority2)
}
inline ::tflite::proto::GPUInferencePriority GPUSettings::_internal_inference_priority2() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tflite::proto::GPUInferencePriority>(_impl_.inference_priority2_);
}
inline void GPUSettings::_internal_set_inference_priority2(::tflite::proto::GPUInferencePriority value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::tflite::proto::GPUInferencePriority_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.inference_priority2_ = value;
}

// optional .tflite.proto.GPUInferencePriority inference_priority3 = 6 [default = GPU_PRIORITY_AUTO];
inline bool GPUSettings::has_inference_priority3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void GPUSettings::clear_inference_priority3() {
  _impl_.inference_priority3_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::tflite::proto::GPUInferencePriority GPUSettings::inference_priority3() const {
  // @@protoc_insertion_point(field_get:tflite.proto.GPUSettings.inference_priority3)
  return _internal_inference_priority3();
}
inline void GPUSettings::set_inference_priority3(::tflite::proto::GPUInferencePriority value) {
  _internal_set_inference_priority3(value);
  // @@protoc_insertion_point(field_set:tflite.proto.GPUSettings.inference_priority3)
}
inline ::tflite::proto::GPUInferencePriority GPUSettings::_internal_inference_priority3() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tflite::proto::GPUInferencePriority>(_impl_.inference_priority3_);
}
inline void GPUSettings::_internal_set_inference_priority3(::tflite::proto::GPUInferencePriority value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::tflite::proto::GPUInferencePriority_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.inference_priority3_ = value;
}

// optional .tflite.proto.GPUInferenceUsage inference_preference = 7;
inline bool GPUSettings::has_inference_preference() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void GPUSettings::clear_inference_preference() {
  _impl_.inference_preference_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::tflite::proto::GPUInferenceUsage GPUSettings::inference_preference() const {
  // @@protoc_insertion_point(field_get:tflite.proto.GPUSettings.inference_preference)
  return _internal_inference_preference();
}
inline void GPUSettings::set_inference_preference(::tflite::proto::GPUInferenceUsage value) {
  _internal_set_inference_preference(value);
  // @@protoc_insertion_point(field_set:tflite.proto.GPUSettings.inference_preference)
}
inline ::tflite::proto::GPUInferenceUsage GPUSettings::_internal_inference_preference() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tflite::proto::GPUInferenceUsage>(_impl_.inference_preference_);
}
inline void GPUSettings::_internal_set_inference_preference(::tflite::proto::GPUInferenceUsage value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::tflite::proto::GPUInferenceUsage_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.inference_preference_ = value;
}

// optional string cache_directory = 8;
inline bool GPUSettings::has_cache_directory() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GPUSettings::clear_cache_directory() {
  _impl_.cache_directory_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GPUSettings::cache_directory() const {
  // @@protoc_insertion_point(field_get:tflite.proto.GPUSettings.cache_directory)
  return _internal_cache_directory();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GPUSettings::set_cache_directory(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cache_directory_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.proto.GPUSettings.cache_directory)
}
inline std::string* GPUSettings::mutable_cache_directory() {
  std::string* _s = _internal_mutable_cache_directory();
  // @@protoc_insertion_point(field_mutable:tflite.proto.GPUSettings.cache_directory)
  return _s;
}
inline const std::string& GPUSettings::_internal_cache_directory() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cache_directory_.Get();
}
inline void GPUSettings::_internal_set_cache_directory(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cache_directory_.Set(value, GetArenaForAllocation());
}
inline std::string* GPUSettings::_internal_mutable_cache_directory() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.cache_directory_.Mutable( GetArenaForAllocation());
}
inline std::string* GPUSettings::release_cache_directory() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.GPUSettings.cache_directory)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.cache_directory_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cache_directory_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void GPUSettings::set_allocated_cache_directory(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.cache_directory_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cache_directory_.IsDefault()) {
          _impl_.cache_directory_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.GPUSettings.cache_directory)
}

// optional string model_token = 9;
inline bool GPUSettings::has_model_token() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GPUSettings::clear_model_token() {
  _impl_.model_token_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GPUSettings::model_token() const {
  // @@protoc_insertion_point(field_get:tflite.proto.GPUSettings.model_token)
  return _internal_model_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GPUSettings::set_model_token(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.model_token_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.proto.GPUSettings.model_token)
}
inline std::string* GPUSettings::mutable_model_token() {
  std::string* _s = _internal_mutable_model_token();
  // @@protoc_insertion_point(field_mutable:tflite.proto.GPUSettings.model_token)
  return _s;
}
inline const std::string& GPUSettings::_internal_model_token() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.model_token_.Get();
}
inline void GPUSettings::_internal_set_model_token(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.model_token_.Set(value, GetArenaForAllocation());
}
inline std::string* GPUSettings::_internal_mutable_model_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.model_token_.Mutable( GetArenaForAllocation());
}
inline std::string* GPUSettings::release_model_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.GPUSettings.model_token)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.model_token_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void GPUSettings::set_allocated_model_token(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.model_token_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.model_token_.IsDefault()) {
          _impl_.model_token_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.GPUSettings.model_token)
}

// -------------------------------------------------------------------

// HexagonSettings

// optional int32 debug_level = 1;
inline bool HexagonSettings::has_debug_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void HexagonSettings::clear_debug_level() {
  _impl_.debug_level_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t HexagonSettings::debug_level() const {
  // @@protoc_insertion_point(field_get:tflite.proto.HexagonSettings.debug_level)
  return _internal_debug_level();
}
inline void HexagonSettings::set_debug_level(::int32_t value) {
  _internal_set_debug_level(value);
  // @@protoc_insertion_point(field_set:tflite.proto.HexagonSettings.debug_level)
}
inline ::int32_t HexagonSettings::_internal_debug_level() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.debug_level_;
}
inline void HexagonSettings::_internal_set_debug_level(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.debug_level_ = value;
}

// optional int32 powersave_level = 2;
inline bool HexagonSettings::has_powersave_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void HexagonSettings::clear_powersave_level() {
  _impl_.powersave_level_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t HexagonSettings::powersave_level() const {
  // @@protoc_insertion_point(field_get:tflite.proto.HexagonSettings.powersave_level)
  return _internal_powersave_level();
}
inline void HexagonSettings::set_powersave_level(::int32_t value) {
  _internal_set_powersave_level(value);
  // @@protoc_insertion_point(field_set:tflite.proto.HexagonSettings.powersave_level)
}
inline ::int32_t HexagonSettings::_internal_powersave_level() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.powersave_level_;
}
inline void HexagonSettings::_internal_set_powersave_level(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.powersave_level_ = value;
}

// optional bool print_graph_profile = 3;
inline bool HexagonSettings::has_print_graph_profile() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void HexagonSettings::clear_print_graph_profile() {
  _impl_.print_graph_profile_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool HexagonSettings::print_graph_profile() const {
  // @@protoc_insertion_point(field_get:tflite.proto.HexagonSettings.print_graph_profile)
  return _internal_print_graph_profile();
}
inline void HexagonSettings::set_print_graph_profile(bool value) {
  _internal_set_print_graph_profile(value);
  // @@protoc_insertion_point(field_set:tflite.proto.HexagonSettings.print_graph_profile)
}
inline bool HexagonSettings::_internal_print_graph_profile() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.print_graph_profile_;
}
inline void HexagonSettings::_internal_set_print_graph_profile(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.print_graph_profile_ = value;
}

// optional bool print_graph_debug = 4;
inline bool HexagonSettings::has_print_graph_debug() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void HexagonSettings::clear_print_graph_debug() {
  _impl_.print_graph_debug_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool HexagonSettings::print_graph_debug() const {
  // @@protoc_insertion_point(field_get:tflite.proto.HexagonSettings.print_graph_debug)
  return _internal_print_graph_debug();
}
inline void HexagonSettings::set_print_graph_debug(bool value) {
  _internal_set_print_graph_debug(value);
  // @@protoc_insertion_point(field_set:tflite.proto.HexagonSettings.print_graph_debug)
}
inline bool HexagonSettings::_internal_print_graph_debug() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.print_graph_debug_;
}
inline void HexagonSettings::_internal_set_print_graph_debug(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.print_graph_debug_ = value;
}

// -------------------------------------------------------------------

// XNNPackSettings

// optional int32 num_threads = 1;
inline bool XNNPackSettings::has_num_threads() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void XNNPackSettings::clear_num_threads() {
  _impl_.num_threads_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t XNNPackSettings::num_threads() const {
  // @@protoc_insertion_point(field_get:tflite.proto.XNNPackSettings.num_threads)
  return _internal_num_threads();
}
inline void XNNPackSettings::set_num_threads(::int32_t value) {
  _internal_set_num_threads(value);
  // @@protoc_insertion_point(field_set:tflite.proto.XNNPackSettings.num_threads)
}
inline ::int32_t XNNPackSettings::_internal_num_threads() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_threads_;
}
inline void XNNPackSettings::_internal_set_num_threads(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.num_threads_ = value;
}

// optional .tflite.proto.XNNPackFlags flags = 2 [default = TFLITE_XNNPACK_DELEGATE_NO_FLAGS];
inline bool XNNPackSettings::has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void XNNPackSettings::clear_flags() {
  _impl_.flags_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::tflite::proto::XNNPackFlags XNNPackSettings::flags() const {
  // @@protoc_insertion_point(field_get:tflite.proto.XNNPackSettings.flags)
  return _internal_flags();
}
inline void XNNPackSettings::set_flags(::tflite::proto::XNNPackFlags value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:tflite.proto.XNNPackSettings.flags)
}
inline ::tflite::proto::XNNPackFlags XNNPackSettings::_internal_flags() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tflite::proto::XNNPackFlags>(_impl_.flags_);
}
inline void XNNPackSettings::_internal_set_flags(::tflite::proto::XNNPackFlags value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::tflite::proto::XNNPackFlags_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.flags_ = value;
}

// -------------------------------------------------------------------

// CoreMLSettings

// optional .tflite.proto.CoreMLSettings.EnabledDevices enabled_devices = 1;
inline bool CoreMLSettings::has_enabled_devices() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CoreMLSettings::clear_enabled_devices() {
  _impl_.enabled_devices_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::tflite::proto::CoreMLSettings_EnabledDevices CoreMLSettings::enabled_devices() const {
  // @@protoc_insertion_point(field_get:tflite.proto.CoreMLSettings.enabled_devices)
  return _internal_enabled_devices();
}
inline void CoreMLSettings::set_enabled_devices(::tflite::proto::CoreMLSettings_EnabledDevices value) {
  _internal_set_enabled_devices(value);
  // @@protoc_insertion_point(field_set:tflite.proto.CoreMLSettings.enabled_devices)
}
inline ::tflite::proto::CoreMLSettings_EnabledDevices CoreMLSettings::_internal_enabled_devices() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tflite::proto::CoreMLSettings_EnabledDevices>(_impl_.enabled_devices_);
}
inline void CoreMLSettings::_internal_set_enabled_devices(::tflite::proto::CoreMLSettings_EnabledDevices value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::tflite::proto::CoreMLSettings_EnabledDevices_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.enabled_devices_ = value;
}

// optional int32 coreml_version = 2;
inline bool CoreMLSettings::has_coreml_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CoreMLSettings::clear_coreml_version() {
  _impl_.coreml_version_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t CoreMLSettings::coreml_version() const {
  // @@protoc_insertion_point(field_get:tflite.proto.CoreMLSettings.coreml_version)
  return _internal_coreml_version();
}
inline void CoreMLSettings::set_coreml_version(::int32_t value) {
  _internal_set_coreml_version(value);
  // @@protoc_insertion_point(field_set:tflite.proto.CoreMLSettings.coreml_version)
}
inline ::int32_t CoreMLSettings::_internal_coreml_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.coreml_version_;
}
inline void CoreMLSettings::_internal_set_coreml_version(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.coreml_version_ = value;
}

// optional int32 max_delegated_partitions = 3 [default = 0];
inline bool CoreMLSettings::has_max_delegated_partitions() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CoreMLSettings::clear_max_delegated_partitions() {
  _impl_.max_delegated_partitions_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t CoreMLSettings::max_delegated_partitions() const {
  // @@protoc_insertion_point(field_get:tflite.proto.CoreMLSettings.max_delegated_partitions)
  return _internal_max_delegated_partitions();
}
inline void CoreMLSettings::set_max_delegated_partitions(::int32_t value) {
  _internal_set_max_delegated_partitions(value);
  // @@protoc_insertion_point(field_set:tflite.proto.CoreMLSettings.max_delegated_partitions)
}
inline ::int32_t CoreMLSettings::_internal_max_delegated_partitions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_delegated_partitions_;
}
inline void CoreMLSettings::_internal_set_max_delegated_partitions(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.max_delegated_partitions_ = value;
}

// optional int32 min_nodes_per_partition = 4 [default = 2];
inline bool CoreMLSettings::has_min_nodes_per_partition() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void CoreMLSettings::clear_min_nodes_per_partition() {
  _impl_.min_nodes_per_partition_ = 2;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t CoreMLSettings::min_nodes_per_partition() const {
  // @@protoc_insertion_point(field_get:tflite.proto.CoreMLSettings.min_nodes_per_partition)
  return _internal_min_nodes_per_partition();
}
inline void CoreMLSettings::set_min_nodes_per_partition(::int32_t value) {
  _internal_set_min_nodes_per_partition(value);
  // @@protoc_insertion_point(field_set:tflite.proto.CoreMLSettings.min_nodes_per_partition)
}
inline ::int32_t CoreMLSettings::_internal_min_nodes_per_partition() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.min_nodes_per_partition_;
}
inline void CoreMLSettings::_internal_set_min_nodes_per_partition(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.min_nodes_per_partition_ = value;
}

// -------------------------------------------------------------------

// StableDelegateLoaderSettings

// optional string delegate_path = 1;
inline bool StableDelegateLoaderSettings::has_delegate_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void StableDelegateLoaderSettings::clear_delegate_path() {
  _impl_.delegate_path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StableDelegateLoaderSettings::delegate_path() const {
  // @@protoc_insertion_point(field_get:tflite.proto.StableDelegateLoaderSettings.delegate_path)
  return _internal_delegate_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StableDelegateLoaderSettings::set_delegate_path(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.delegate_path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.proto.StableDelegateLoaderSettings.delegate_path)
}
inline std::string* StableDelegateLoaderSettings::mutable_delegate_path() {
  std::string* _s = _internal_mutable_delegate_path();
  // @@protoc_insertion_point(field_mutable:tflite.proto.StableDelegateLoaderSettings.delegate_path)
  return _s;
}
inline const std::string& StableDelegateLoaderSettings::_internal_delegate_path() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.delegate_path_.Get();
}
inline void StableDelegateLoaderSettings::_internal_set_delegate_path(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.delegate_path_.Set(value, GetArenaForAllocation());
}
inline std::string* StableDelegateLoaderSettings::_internal_mutable_delegate_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.delegate_path_.Mutable( GetArenaForAllocation());
}
inline std::string* StableDelegateLoaderSettings::release_delegate_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.StableDelegateLoaderSettings.delegate_path)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.delegate_path_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.delegate_path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void StableDelegateLoaderSettings::set_allocated_delegate_path(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.delegate_path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.delegate_path_.IsDefault()) {
          _impl_.delegate_path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.StableDelegateLoaderSettings.delegate_path)
}

// -------------------------------------------------------------------

// CompilationCachingSettings

// optional string cache_dir = 1;
inline bool CompilationCachingSettings::has_cache_dir() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CompilationCachingSettings::clear_cache_dir() {
  _impl_.cache_dir_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CompilationCachingSettings::cache_dir() const {
  // @@protoc_insertion_point(field_get:tflite.proto.CompilationCachingSettings.cache_dir)
  return _internal_cache_dir();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CompilationCachingSettings::set_cache_dir(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cache_dir_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.proto.CompilationCachingSettings.cache_dir)
}
inline std::string* CompilationCachingSettings::mutable_cache_dir() {
  std::string* _s = _internal_mutable_cache_dir();
  // @@protoc_insertion_point(field_mutable:tflite.proto.CompilationCachingSettings.cache_dir)
  return _s;
}
inline const std::string& CompilationCachingSettings::_internal_cache_dir() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cache_dir_.Get();
}
inline void CompilationCachingSettings::_internal_set_cache_dir(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cache_dir_.Set(value, GetArenaForAllocation());
}
inline std::string* CompilationCachingSettings::_internal_mutable_cache_dir() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.cache_dir_.Mutable( GetArenaForAllocation());
}
inline std::string* CompilationCachingSettings::release_cache_dir() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.CompilationCachingSettings.cache_dir)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.cache_dir_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cache_dir_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CompilationCachingSettings::set_allocated_cache_dir(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.cache_dir_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cache_dir_.IsDefault()) {
          _impl_.cache_dir_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.CompilationCachingSettings.cache_dir)
}

// optional string model_token = 2;
inline bool CompilationCachingSettings::has_model_token() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CompilationCachingSettings::clear_model_token() {
  _impl_.model_token_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CompilationCachingSettings::model_token() const {
  // @@protoc_insertion_point(field_get:tflite.proto.CompilationCachingSettings.model_token)
  return _internal_model_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CompilationCachingSettings::set_model_token(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.model_token_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.proto.CompilationCachingSettings.model_token)
}
inline std::string* CompilationCachingSettings::mutable_model_token() {
  std::string* _s = _internal_mutable_model_token();
  // @@protoc_insertion_point(field_mutable:tflite.proto.CompilationCachingSettings.model_token)
  return _s;
}
inline const std::string& CompilationCachingSettings::_internal_model_token() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.model_token_.Get();
}
inline void CompilationCachingSettings::_internal_set_model_token(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.model_token_.Set(value, GetArenaForAllocation());
}
inline std::string* CompilationCachingSettings::_internal_mutable_model_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.model_token_.Mutable( GetArenaForAllocation());
}
inline std::string* CompilationCachingSettings::release_model_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.CompilationCachingSettings.model_token)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.model_token_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CompilationCachingSettings::set_allocated_model_token(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.model_token_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.model_token_.IsDefault()) {
          _impl_.model_token_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.CompilationCachingSettings.model_token)
}

// -------------------------------------------------------------------

// EdgeTpuDeviceSpec

// optional .tflite.proto.EdgeTpuDeviceSpec.PlatformType platform_type = 1;
inline bool EdgeTpuDeviceSpec::has_platform_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EdgeTpuDeviceSpec::clear_platform_type() {
  _impl_.platform_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::tflite::proto::EdgeTpuDeviceSpec_PlatformType EdgeTpuDeviceSpec::platform_type() const {
  // @@protoc_insertion_point(field_get:tflite.proto.EdgeTpuDeviceSpec.platform_type)
  return _internal_platform_type();
}
inline void EdgeTpuDeviceSpec::set_platform_type(::tflite::proto::EdgeTpuDeviceSpec_PlatformType value) {
  _internal_set_platform_type(value);
  // @@protoc_insertion_point(field_set:tflite.proto.EdgeTpuDeviceSpec.platform_type)
}
inline ::tflite::proto::EdgeTpuDeviceSpec_PlatformType EdgeTpuDeviceSpec::_internal_platform_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tflite::proto::EdgeTpuDeviceSpec_PlatformType>(_impl_.platform_type_);
}
inline void EdgeTpuDeviceSpec::_internal_set_platform_type(::tflite::proto::EdgeTpuDeviceSpec_PlatformType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::tflite::proto::EdgeTpuDeviceSpec_PlatformType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.platform_type_ = value;
}

// optional int32 num_chips = 2;
inline bool EdgeTpuDeviceSpec::has_num_chips() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void EdgeTpuDeviceSpec::clear_num_chips() {
  _impl_.num_chips_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t EdgeTpuDeviceSpec::num_chips() const {
  // @@protoc_insertion_point(field_get:tflite.proto.EdgeTpuDeviceSpec.num_chips)
  return _internal_num_chips();
}
inline void EdgeTpuDeviceSpec::set_num_chips(::int32_t value) {
  _internal_set_num_chips(value);
  // @@protoc_insertion_point(field_set:tflite.proto.EdgeTpuDeviceSpec.num_chips)
}
inline ::int32_t EdgeTpuDeviceSpec::_internal_num_chips() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_chips_;
}
inline void EdgeTpuDeviceSpec::_internal_set_num_chips(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.num_chips_ = value;
}

// repeated string device_paths = 3;
inline int EdgeTpuDeviceSpec::_internal_device_paths_size() const {
  return _internal_device_paths().size();
}
inline int EdgeTpuDeviceSpec::device_paths_size() const {
  return _internal_device_paths_size();
}
inline void EdgeTpuDeviceSpec::clear_device_paths() {
  _internal_mutable_device_paths()->Clear();
}
inline std::string* EdgeTpuDeviceSpec::add_device_paths() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_device_paths()->Add();
  // @@protoc_insertion_point(field_add_mutable:tflite.proto.EdgeTpuDeviceSpec.device_paths)
  return _s;
}
inline const std::string& EdgeTpuDeviceSpec::device_paths(int index) const {
  // @@protoc_insertion_point(field_get:tflite.proto.EdgeTpuDeviceSpec.device_paths)
  return _internal_device_paths().Get(index);
}
inline std::string* EdgeTpuDeviceSpec::mutable_device_paths(int index) {
  // @@protoc_insertion_point(field_mutable:tflite.proto.EdgeTpuDeviceSpec.device_paths)
  return _internal_mutable_device_paths()->Mutable(index);
}
inline void EdgeTpuDeviceSpec::set_device_paths(int index, const std::string& value) {
  _internal_mutable_device_paths()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:tflite.proto.EdgeTpuDeviceSpec.device_paths)
}
inline void EdgeTpuDeviceSpec::set_device_paths(int index, std::string&& value) {
  _internal_mutable_device_paths()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:tflite.proto.EdgeTpuDeviceSpec.device_paths)
}
inline void EdgeTpuDeviceSpec::set_device_paths(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_device_paths()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tflite.proto.EdgeTpuDeviceSpec.device_paths)
}
inline void EdgeTpuDeviceSpec::set_device_paths(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_device_paths()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tflite.proto.EdgeTpuDeviceSpec.device_paths)
}
inline void EdgeTpuDeviceSpec::set_device_paths(int index, absl::string_view value) {
  _internal_mutable_device_paths()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:tflite.proto.EdgeTpuDeviceSpec.device_paths)
}
inline void EdgeTpuDeviceSpec::add_device_paths(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_device_paths()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:tflite.proto.EdgeTpuDeviceSpec.device_paths)
}
inline void EdgeTpuDeviceSpec::add_device_paths(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_device_paths()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:tflite.proto.EdgeTpuDeviceSpec.device_paths)
}
inline void EdgeTpuDeviceSpec::add_device_paths(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_device_paths()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tflite.proto.EdgeTpuDeviceSpec.device_paths)
}
inline void EdgeTpuDeviceSpec::add_device_paths(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_device_paths()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tflite.proto.EdgeTpuDeviceSpec.device_paths)
}
inline void EdgeTpuDeviceSpec::add_device_paths(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_device_paths()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:tflite.proto.EdgeTpuDeviceSpec.device_paths)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
EdgeTpuDeviceSpec::device_paths() const {
  // @@protoc_insertion_point(field_list:tflite.proto.EdgeTpuDeviceSpec.device_paths)
  return _internal_device_paths();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* EdgeTpuDeviceSpec::mutable_device_paths() {
  // @@protoc_insertion_point(field_mutable_list:tflite.proto.EdgeTpuDeviceSpec.device_paths)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_device_paths();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
EdgeTpuDeviceSpec::_internal_device_paths() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.device_paths_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
EdgeTpuDeviceSpec::_internal_mutable_device_paths() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.device_paths_;
}

// optional int32 chip_family = 4;
inline bool EdgeTpuDeviceSpec::has_chip_family() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void EdgeTpuDeviceSpec::clear_chip_family() {
  _impl_.chip_family_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t EdgeTpuDeviceSpec::chip_family() const {
  // @@protoc_insertion_point(field_get:tflite.proto.EdgeTpuDeviceSpec.chip_family)
  return _internal_chip_family();
}
inline void EdgeTpuDeviceSpec::set_chip_family(::int32_t value) {
  _internal_set_chip_family(value);
  // @@protoc_insertion_point(field_set:tflite.proto.EdgeTpuDeviceSpec.chip_family)
}
inline ::int32_t EdgeTpuDeviceSpec::_internal_chip_family() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.chip_family_;
}
inline void EdgeTpuDeviceSpec::_internal_set_chip_family(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.chip_family_ = value;
}

// -------------------------------------------------------------------

// EdgeTpuInactivePowerConfig

// optional .tflite.proto.EdgeTpuPowerState inactive_power_state = 1;
inline bool EdgeTpuInactivePowerConfig::has_inactive_power_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void EdgeTpuInactivePowerConfig::clear_inactive_power_state() {
  _impl_.inactive_power_state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::tflite::proto::EdgeTpuPowerState EdgeTpuInactivePowerConfig::inactive_power_state() const {
  // @@protoc_insertion_point(field_get:tflite.proto.EdgeTpuInactivePowerConfig.inactive_power_state)
  return _internal_inactive_power_state();
}
inline void EdgeTpuInactivePowerConfig::set_inactive_power_state(::tflite::proto::EdgeTpuPowerState value) {
  _internal_set_inactive_power_state(value);
  // @@protoc_insertion_point(field_set:tflite.proto.EdgeTpuInactivePowerConfig.inactive_power_state)
}
inline ::tflite::proto::EdgeTpuPowerState EdgeTpuInactivePowerConfig::_internal_inactive_power_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tflite::proto::EdgeTpuPowerState>(_impl_.inactive_power_state_);
}
inline void EdgeTpuInactivePowerConfig::_internal_set_inactive_power_state(::tflite::proto::EdgeTpuPowerState value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::tflite::proto::EdgeTpuPowerState_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.inactive_power_state_ = value;
}

// optional int64 inactive_timeout_us = 2;
inline bool EdgeTpuInactivePowerConfig::has_inactive_timeout_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EdgeTpuInactivePowerConfig::clear_inactive_timeout_us() {
  _impl_.inactive_timeout_us_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t EdgeTpuInactivePowerConfig::inactive_timeout_us() const {
  // @@protoc_insertion_point(field_get:tflite.proto.EdgeTpuInactivePowerConfig.inactive_timeout_us)
  return _internal_inactive_timeout_us();
}
inline void EdgeTpuInactivePowerConfig::set_inactive_timeout_us(::int64_t value) {
  _internal_set_inactive_timeout_us(value);
  // @@protoc_insertion_point(field_set:tflite.proto.EdgeTpuInactivePowerConfig.inactive_timeout_us)
}
inline ::int64_t EdgeTpuInactivePowerConfig::_internal_inactive_timeout_us() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.inactive_timeout_us_;
}
inline void EdgeTpuInactivePowerConfig::_internal_set_inactive_timeout_us(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.inactive_timeout_us_ = value;
}

// -------------------------------------------------------------------

// EdgeTpuSettings

// optional .tflite.proto.EdgeTpuPowerState inference_power_state = 1;
inline bool EdgeTpuSettings::has_inference_power_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void EdgeTpuSettings::clear_inference_power_state() {
  _impl_.inference_power_state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::tflite::proto::EdgeTpuPowerState EdgeTpuSettings::inference_power_state() const {
  // @@protoc_insertion_point(field_get:tflite.proto.EdgeTpuSettings.inference_power_state)
  return _internal_inference_power_state();
}
inline void EdgeTpuSettings::set_inference_power_state(::tflite::proto::EdgeTpuPowerState value) {
  _internal_set_inference_power_state(value);
  // @@protoc_insertion_point(field_set:tflite.proto.EdgeTpuSettings.inference_power_state)
}
inline ::tflite::proto::EdgeTpuPowerState EdgeTpuSettings::_internal_inference_power_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tflite::proto::EdgeTpuPowerState>(_impl_.inference_power_state_);
}
inline void EdgeTpuSettings::_internal_set_inference_power_state(::tflite::proto::EdgeTpuPowerState value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::tflite::proto::EdgeTpuPowerState_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.inference_power_state_ = value;
}

// repeated .tflite.proto.EdgeTpuInactivePowerConfig inactive_power_configs = 2;
inline int EdgeTpuSettings::_internal_inactive_power_configs_size() const {
  return _internal_inactive_power_configs().size();
}
inline int EdgeTpuSettings::inactive_power_configs_size() const {
  return _internal_inactive_power_configs_size();
}
inline void EdgeTpuSettings::clear_inactive_power_configs() {
  _internal_mutable_inactive_power_configs()->Clear();
}
inline ::tflite::proto::EdgeTpuInactivePowerConfig* EdgeTpuSettings::mutable_inactive_power_configs(int index) {
  // @@protoc_insertion_point(field_mutable:tflite.proto.EdgeTpuSettings.inactive_power_configs)
  return _internal_mutable_inactive_power_configs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tflite::proto::EdgeTpuInactivePowerConfig >*
EdgeTpuSettings::mutable_inactive_power_configs() {
  // @@protoc_insertion_point(field_mutable_list:tflite.proto.EdgeTpuSettings.inactive_power_configs)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_inactive_power_configs();
}
inline const ::tflite::proto::EdgeTpuInactivePowerConfig& EdgeTpuSettings::inactive_power_configs(int index) const {
  // @@protoc_insertion_point(field_get:tflite.proto.EdgeTpuSettings.inactive_power_configs)
    return _internal_inactive_power_configs().Get(index);
}
inline ::tflite::proto::EdgeTpuInactivePowerConfig* EdgeTpuSettings::add_inactive_power_configs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::tflite::proto::EdgeTpuInactivePowerConfig* _add = _internal_mutable_inactive_power_configs()->Add();
  // @@protoc_insertion_point(field_add:tflite.proto.EdgeTpuSettings.inactive_power_configs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::tflite::proto::EdgeTpuInactivePowerConfig >&
EdgeTpuSettings::inactive_power_configs() const {
  // @@protoc_insertion_point(field_list:tflite.proto.EdgeTpuSettings.inactive_power_configs)
  return _internal_inactive_power_configs();
}
inline const ::google::protobuf::RepeatedPtrField<::tflite::proto::EdgeTpuInactivePowerConfig>&
EdgeTpuSettings::_internal_inactive_power_configs() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.inactive_power_configs_;
}
inline ::google::protobuf::RepeatedPtrField<::tflite::proto::EdgeTpuInactivePowerConfig>*
EdgeTpuSettings::_internal_mutable_inactive_power_configs() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.inactive_power_configs_;
}

// optional int32 inference_priority = 3 [default = -1];
inline bool EdgeTpuSettings::has_inference_priority() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void EdgeTpuSettings::clear_inference_priority() {
  _impl_.inference_priority_ = -1;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t EdgeTpuSettings::inference_priority() const {
  // @@protoc_insertion_point(field_get:tflite.proto.EdgeTpuSettings.inference_priority)
  return _internal_inference_priority();
}
inline void EdgeTpuSettings::set_inference_priority(::int32_t value) {
  _internal_set_inference_priority(value);
  // @@protoc_insertion_point(field_set:tflite.proto.EdgeTpuSettings.inference_priority)
}
inline ::int32_t EdgeTpuSettings::_internal_inference_priority() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.inference_priority_;
}
inline void EdgeTpuSettings::_internal_set_inference_priority(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.inference_priority_ = value;
}

// optional .tflite.proto.EdgeTpuDeviceSpec edgetpu_device_spec = 4;
inline bool EdgeTpuSettings::has_edgetpu_device_spec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.edgetpu_device_spec_ != nullptr);
  return value;
}
inline void EdgeTpuSettings::clear_edgetpu_device_spec() {
  if (_impl_.edgetpu_device_spec_ != nullptr) _impl_.edgetpu_device_spec_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::tflite::proto::EdgeTpuDeviceSpec& EdgeTpuSettings::_internal_edgetpu_device_spec() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tflite::proto::EdgeTpuDeviceSpec* p = _impl_.edgetpu_device_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::proto::EdgeTpuDeviceSpec&>(::tflite::proto::_EdgeTpuDeviceSpec_default_instance_);
}
inline const ::tflite::proto::EdgeTpuDeviceSpec& EdgeTpuSettings::edgetpu_device_spec() const {
  // @@protoc_insertion_point(field_get:tflite.proto.EdgeTpuSettings.edgetpu_device_spec)
  return _internal_edgetpu_device_spec();
}
inline void EdgeTpuSettings::unsafe_arena_set_allocated_edgetpu_device_spec(::tflite::proto::EdgeTpuDeviceSpec* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.edgetpu_device_spec_);
  }
  _impl_.edgetpu_device_spec_ = reinterpret_cast<::tflite::proto::EdgeTpuDeviceSpec*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.proto.EdgeTpuSettings.edgetpu_device_spec)
}
inline ::tflite::proto::EdgeTpuDeviceSpec* EdgeTpuSettings::release_edgetpu_device_spec() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tflite::proto::EdgeTpuDeviceSpec* released = _impl_.edgetpu_device_spec_;
  _impl_.edgetpu_device_spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tflite::proto::EdgeTpuDeviceSpec* EdgeTpuSettings::unsafe_arena_release_edgetpu_device_spec() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.EdgeTpuSettings.edgetpu_device_spec)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tflite::proto::EdgeTpuDeviceSpec* temp = _impl_.edgetpu_device_spec_;
  _impl_.edgetpu_device_spec_ = nullptr;
  return temp;
}
inline ::tflite::proto::EdgeTpuDeviceSpec* EdgeTpuSettings::_internal_mutable_edgetpu_device_spec() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.edgetpu_device_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::proto::EdgeTpuDeviceSpec>(GetArenaForAllocation());
    _impl_.edgetpu_device_spec_ = reinterpret_cast<::tflite::proto::EdgeTpuDeviceSpec*>(p);
  }
  return _impl_.edgetpu_device_spec_;
}
inline ::tflite::proto::EdgeTpuDeviceSpec* EdgeTpuSettings::mutable_edgetpu_device_spec() {
  ::tflite::proto::EdgeTpuDeviceSpec* _msg = _internal_mutable_edgetpu_device_spec();
  // @@protoc_insertion_point(field_mutable:tflite.proto.EdgeTpuSettings.edgetpu_device_spec)
  return _msg;
}
inline void EdgeTpuSettings::set_allocated_edgetpu_device_spec(::tflite::proto::EdgeTpuDeviceSpec* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::tflite::proto::EdgeTpuDeviceSpec*>(_impl_.edgetpu_device_spec_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::tflite::proto::EdgeTpuDeviceSpec*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.edgetpu_device_spec_ = reinterpret_cast<::tflite::proto::EdgeTpuDeviceSpec*>(value);
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.EdgeTpuSettings.edgetpu_device_spec)
}

// optional string model_token = 5;
inline bool EdgeTpuSettings::has_model_token() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EdgeTpuSettings::clear_model_token() {
  _impl_.model_token_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EdgeTpuSettings::model_token() const {
  // @@protoc_insertion_point(field_get:tflite.proto.EdgeTpuSettings.model_token)
  return _internal_model_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EdgeTpuSettings::set_model_token(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.model_token_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.proto.EdgeTpuSettings.model_token)
}
inline std::string* EdgeTpuSettings::mutable_model_token() {
  std::string* _s = _internal_mutable_model_token();
  // @@protoc_insertion_point(field_mutable:tflite.proto.EdgeTpuSettings.model_token)
  return _s;
}
inline const std::string& EdgeTpuSettings::_internal_model_token() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.model_token_.Get();
}
inline void EdgeTpuSettings::_internal_set_model_token(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.model_token_.Set(value, GetArenaForAllocation());
}
inline std::string* EdgeTpuSettings::_internal_mutable_model_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.model_token_.Mutable( GetArenaForAllocation());
}
inline std::string* EdgeTpuSettings::release_model_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.EdgeTpuSettings.model_token)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.model_token_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void EdgeTpuSettings::set_allocated_model_token(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.model_token_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.model_token_.IsDefault()) {
          _impl_.model_token_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.EdgeTpuSettings.model_token)
}

// optional .tflite.proto.EdgeTpuSettings.FloatTruncationType float_truncation_type = 6;
inline bool EdgeTpuSettings::has_float_truncation_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void EdgeTpuSettings::clear_float_truncation_type() {
  _impl_.float_truncation_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::tflite::proto::EdgeTpuSettings_FloatTruncationType EdgeTpuSettings::float_truncation_type() const {
  // @@protoc_insertion_point(field_get:tflite.proto.EdgeTpuSettings.float_truncation_type)
  return _internal_float_truncation_type();
}
inline void EdgeTpuSettings::set_float_truncation_type(::tflite::proto::EdgeTpuSettings_FloatTruncationType value) {
  _internal_set_float_truncation_type(value);
  // @@protoc_insertion_point(field_set:tflite.proto.EdgeTpuSettings.float_truncation_type)
}
inline ::tflite::proto::EdgeTpuSettings_FloatTruncationType EdgeTpuSettings::_internal_float_truncation_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tflite::proto::EdgeTpuSettings_FloatTruncationType>(_impl_.float_truncation_type_);
}
inline void EdgeTpuSettings::_internal_set_float_truncation_type(::tflite::proto::EdgeTpuSettings_FloatTruncationType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::tflite::proto::EdgeTpuSettings_FloatTruncationType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.float_truncation_type_ = value;
}

// optional .tflite.proto.EdgeTpuSettings.QosClass qos_class = 7 [default = QOS_UNDEFINED];
inline bool EdgeTpuSettings::has_qos_class() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void EdgeTpuSettings::clear_qos_class() {
  _impl_.qos_class_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::tflite::proto::EdgeTpuSettings_QosClass EdgeTpuSettings::qos_class() const {
  // @@protoc_insertion_point(field_get:tflite.proto.EdgeTpuSettings.qos_class)
  return _internal_qos_class();
}
inline void EdgeTpuSettings::set_qos_class(::tflite::proto::EdgeTpuSettings_QosClass value) {
  _internal_set_qos_class(value);
  // @@protoc_insertion_point(field_set:tflite.proto.EdgeTpuSettings.qos_class)
}
inline ::tflite::proto::EdgeTpuSettings_QosClass EdgeTpuSettings::_internal_qos_class() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tflite::proto::EdgeTpuSettings_QosClass>(_impl_.qos_class_);
}
inline void EdgeTpuSettings::_internal_set_qos_class(::tflite::proto::EdgeTpuSettings_QosClass value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::tflite::proto::EdgeTpuSettings_QosClass_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.qos_class_ = value;
}

// repeated int32 hardware_cluster_ids = 8 [packed = true];
inline int EdgeTpuSettings::_internal_hardware_cluster_ids_size() const {
  return _internal_hardware_cluster_ids().size();
}
inline int EdgeTpuSettings::hardware_cluster_ids_size() const {
  return _internal_hardware_cluster_ids_size();
}
inline void EdgeTpuSettings::clear_hardware_cluster_ids() {
  _internal_mutable_hardware_cluster_ids()->Clear();
}
inline ::int32_t EdgeTpuSettings::hardware_cluster_ids(int index) const {
  // @@protoc_insertion_point(field_get:tflite.proto.EdgeTpuSettings.hardware_cluster_ids)
  return _internal_hardware_cluster_ids().Get(index);
}
inline void EdgeTpuSettings::set_hardware_cluster_ids(int index, ::int32_t value) {
  _internal_mutable_hardware_cluster_ids()->Set(index, value);
  // @@protoc_insertion_point(field_set:tflite.proto.EdgeTpuSettings.hardware_cluster_ids)
}
inline void EdgeTpuSettings::add_hardware_cluster_ids(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_hardware_cluster_ids()->Add(value);
  // @@protoc_insertion_point(field_add:tflite.proto.EdgeTpuSettings.hardware_cluster_ids)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& EdgeTpuSettings::hardware_cluster_ids() const {
  // @@protoc_insertion_point(field_list:tflite.proto.EdgeTpuSettings.hardware_cluster_ids)
  return _internal_hardware_cluster_ids();
}
inline ::google::protobuf::RepeatedField<::int32_t>* EdgeTpuSettings::mutable_hardware_cluster_ids() {
  // @@protoc_insertion_point(field_mutable_list:tflite.proto.EdgeTpuSettings.hardware_cluster_ids)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_hardware_cluster_ids();
}

inline const ::google::protobuf::RepeatedField<::int32_t>& EdgeTpuSettings::_internal_hardware_cluster_ids() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.hardware_cluster_ids_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* EdgeTpuSettings::_internal_mutable_hardware_cluster_ids() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.hardware_cluster_ids_;
}

// optional string public_model_id = 9;
inline bool EdgeTpuSettings::has_public_model_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void EdgeTpuSettings::clear_public_model_id() {
  _impl_.public_model_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& EdgeTpuSettings::public_model_id() const {
  // @@protoc_insertion_point(field_get:tflite.proto.EdgeTpuSettings.public_model_id)
  return _internal_public_model_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EdgeTpuSettings::set_public_model_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.public_model_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.proto.EdgeTpuSettings.public_model_id)
}
inline std::string* EdgeTpuSettings::mutable_public_model_id() {
  std::string* _s = _internal_mutable_public_model_id();
  // @@protoc_insertion_point(field_mutable:tflite.proto.EdgeTpuSettings.public_model_id)
  return _s;
}
inline const std::string& EdgeTpuSettings::_internal_public_model_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.public_model_id_.Get();
}
inline void EdgeTpuSettings::_internal_set_public_model_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.public_model_id_.Set(value, GetArenaForAllocation());
}
inline std::string* EdgeTpuSettings::_internal_mutable_public_model_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.public_model_id_.Mutable( GetArenaForAllocation());
}
inline std::string* EdgeTpuSettings::release_public_model_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.EdgeTpuSettings.public_model_id)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.public_model_id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.public_model_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void EdgeTpuSettings::set_allocated_public_model_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.public_model_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.public_model_id_.IsDefault()) {
          _impl_.public_model_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.EdgeTpuSettings.public_model_id)
}

// -------------------------------------------------------------------

// GoogleEdgeTpuSettings

// optional int32 log_verbosity = 1 [default = -1];
inline bool GoogleEdgeTpuSettings::has_log_verbosity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void GoogleEdgeTpuSettings::clear_log_verbosity() {
  _impl_.log_verbosity_ = -1;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t GoogleEdgeTpuSettings::log_verbosity() const {
  // @@protoc_insertion_point(field_get:tflite.proto.GoogleEdgeTpuSettings.log_verbosity)
  return _internal_log_verbosity();
}
inline void GoogleEdgeTpuSettings::set_log_verbosity(::int32_t value) {
  _internal_set_log_verbosity(value);
  // @@protoc_insertion_point(field_set:tflite.proto.GoogleEdgeTpuSettings.log_verbosity)
}
inline ::int32_t GoogleEdgeTpuSettings::_internal_log_verbosity() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.log_verbosity_;
}
inline void GoogleEdgeTpuSettings::_internal_set_log_verbosity(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.log_verbosity_ = value;
}

// optional bool enable_tracing = 2 [default = false];
inline bool GoogleEdgeTpuSettings::has_enable_tracing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void GoogleEdgeTpuSettings::clear_enable_tracing() {
  _impl_.enable_tracing_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool GoogleEdgeTpuSettings::enable_tracing() const {
  // @@protoc_insertion_point(field_get:tflite.proto.GoogleEdgeTpuSettings.enable_tracing)
  return _internal_enable_tracing();
}
inline void GoogleEdgeTpuSettings::set_enable_tracing(bool value) {
  _internal_set_enable_tracing(value);
  // @@protoc_insertion_point(field_set:tflite.proto.GoogleEdgeTpuSettings.enable_tracing)
}
inline bool GoogleEdgeTpuSettings::_internal_enable_tracing() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.enable_tracing_;
}
inline void GoogleEdgeTpuSettings::_internal_set_enable_tracing(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.enable_tracing_ = value;
}

// optional .tflite.proto.GoogleEdgeTpuSettings.Priority priority = 3;
inline bool GoogleEdgeTpuSettings::has_priority() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GoogleEdgeTpuSettings::clear_priority() {
  _impl_.priority_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::tflite::proto::GoogleEdgeTpuSettings_Priority GoogleEdgeTpuSettings::priority() const {
  // @@protoc_insertion_point(field_get:tflite.proto.GoogleEdgeTpuSettings.priority)
  return _internal_priority();
}
inline void GoogleEdgeTpuSettings::set_priority(::tflite::proto::GoogleEdgeTpuSettings_Priority value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:tflite.proto.GoogleEdgeTpuSettings.priority)
}
inline ::tflite::proto::GoogleEdgeTpuSettings_Priority GoogleEdgeTpuSettings::_internal_priority() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tflite::proto::GoogleEdgeTpuSettings_Priority>(_impl_.priority_);
}
inline void GoogleEdgeTpuSettings::_internal_set_priority(::tflite::proto::GoogleEdgeTpuSettings_Priority value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::tflite::proto::GoogleEdgeTpuSettings_Priority_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.priority_ = value;
}

// optional bytes extension_data = 4;
inline bool GoogleEdgeTpuSettings::has_extension_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GoogleEdgeTpuSettings::clear_extension_data() {
  _impl_.extension_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GoogleEdgeTpuSettings::extension_data() const {
  // @@protoc_insertion_point(field_get:tflite.proto.GoogleEdgeTpuSettings.extension_data)
  return _internal_extension_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GoogleEdgeTpuSettings::set_extension_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.extension_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.proto.GoogleEdgeTpuSettings.extension_data)
}
inline std::string* GoogleEdgeTpuSettings::mutable_extension_data() {
  std::string* _s = _internal_mutable_extension_data();
  // @@protoc_insertion_point(field_mutable:tflite.proto.GoogleEdgeTpuSettings.extension_data)
  return _s;
}
inline const std::string& GoogleEdgeTpuSettings::_internal_extension_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.extension_data_.Get();
}
inline void GoogleEdgeTpuSettings::_internal_set_extension_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.extension_data_.Set(value, GetArenaForAllocation());
}
inline std::string* GoogleEdgeTpuSettings::_internal_mutable_extension_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.extension_data_.Mutable( GetArenaForAllocation());
}
inline std::string* GoogleEdgeTpuSettings::release_extension_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.GoogleEdgeTpuSettings.extension_data)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.extension_data_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.extension_data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void GoogleEdgeTpuSettings::set_allocated_extension_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.extension_data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.extension_data_.IsDefault()) {
          _impl_.extension_data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.GoogleEdgeTpuSettings.extension_data)
}

// optional string model_identifier = 5 [default = ""];
inline bool GoogleEdgeTpuSettings::has_model_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GoogleEdgeTpuSettings::clear_model_identifier() {
  _impl_.model_identifier_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GoogleEdgeTpuSettings::model_identifier() const {
  // @@protoc_insertion_point(field_get:tflite.proto.GoogleEdgeTpuSettings.model_identifier)
  return _internal_model_identifier();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GoogleEdgeTpuSettings::set_model_identifier(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.model_identifier_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.proto.GoogleEdgeTpuSettings.model_identifier)
}
inline std::string* GoogleEdgeTpuSettings::mutable_model_identifier() {
  std::string* _s = _internal_mutable_model_identifier();
  // @@protoc_insertion_point(field_mutable:tflite.proto.GoogleEdgeTpuSettings.model_identifier)
  return _s;
}
inline const std::string& GoogleEdgeTpuSettings::_internal_model_identifier() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.model_identifier_.Get();
}
inline void GoogleEdgeTpuSettings::_internal_set_model_identifier(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.model_identifier_.Set(value, GetArenaForAllocation());
}
inline std::string* GoogleEdgeTpuSettings::_internal_mutable_model_identifier() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.model_identifier_.Mutable( GetArenaForAllocation());
}
inline std::string* GoogleEdgeTpuSettings::release_model_identifier() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.GoogleEdgeTpuSettings.model_identifier)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.model_identifier_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void GoogleEdgeTpuSettings::set_allocated_model_identifier(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.model_identifier_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.model_identifier_.IsDefault()) {
          _impl_.model_identifier_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.GoogleEdgeTpuSettings.model_identifier)
}

// optional bool use_async_api = 6 [default = false];
inline bool GoogleEdgeTpuSettings::has_use_async_api() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void GoogleEdgeTpuSettings::clear_use_async_api() {
  _impl_.use_async_api_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool GoogleEdgeTpuSettings::use_async_api() const {
  // @@protoc_insertion_point(field_get:tflite.proto.GoogleEdgeTpuSettings.use_async_api)
  return _internal_use_async_api();
}
inline void GoogleEdgeTpuSettings::set_use_async_api(bool value) {
  _internal_set_use_async_api(value);
  // @@protoc_insertion_point(field_set:tflite.proto.GoogleEdgeTpuSettings.use_async_api)
}
inline bool GoogleEdgeTpuSettings::_internal_use_async_api() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.use_async_api_;
}
inline void GoogleEdgeTpuSettings::_internal_set_use_async_api(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.use_async_api_ = value;
}

// optional bool delegate_should_manage_cache_for_inputs = 7 [default = true];
inline bool GoogleEdgeTpuSettings::has_delegate_should_manage_cache_for_inputs() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void GoogleEdgeTpuSettings::clear_delegate_should_manage_cache_for_inputs() {
  _impl_.delegate_should_manage_cache_for_inputs_ = true;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool GoogleEdgeTpuSettings::delegate_should_manage_cache_for_inputs() const {
  // @@protoc_insertion_point(field_get:tflite.proto.GoogleEdgeTpuSettings.delegate_should_manage_cache_for_inputs)
  return _internal_delegate_should_manage_cache_for_inputs();
}
inline void GoogleEdgeTpuSettings::set_delegate_should_manage_cache_for_inputs(bool value) {
  _internal_set_delegate_should_manage_cache_for_inputs(value);
  // @@protoc_insertion_point(field_set:tflite.proto.GoogleEdgeTpuSettings.delegate_should_manage_cache_for_inputs)
}
inline bool GoogleEdgeTpuSettings::_internal_delegate_should_manage_cache_for_inputs() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.delegate_should_manage_cache_for_inputs_;
}
inline void GoogleEdgeTpuSettings::_internal_set_delegate_should_manage_cache_for_inputs(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.delegate_should_manage_cache_for_inputs_ = value;
}

// optional bool delegate_should_manage_cache_for_outputs = 8 [default = true];
inline bool GoogleEdgeTpuSettings::has_delegate_should_manage_cache_for_outputs() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void GoogleEdgeTpuSettings::clear_delegate_should_manage_cache_for_outputs() {
  _impl_.delegate_should_manage_cache_for_outputs_ = true;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool GoogleEdgeTpuSettings::delegate_should_manage_cache_for_outputs() const {
  // @@protoc_insertion_point(field_get:tflite.proto.GoogleEdgeTpuSettings.delegate_should_manage_cache_for_outputs)
  return _internal_delegate_should_manage_cache_for_outputs();
}
inline void GoogleEdgeTpuSettings::set_delegate_should_manage_cache_for_outputs(bool value) {
  _internal_set_delegate_should_manage_cache_for_outputs(value);
  // @@protoc_insertion_point(field_set:tflite.proto.GoogleEdgeTpuSettings.delegate_should_manage_cache_for_outputs)
}
inline bool GoogleEdgeTpuSettings::_internal_delegate_should_manage_cache_for_outputs() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.delegate_should_manage_cache_for_outputs_;
}
inline void GoogleEdgeTpuSettings::_internal_set_delegate_should_manage_cache_for_outputs(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.delegate_should_manage_cache_for_outputs_ = value;
}

// optional .tflite.proto.GoogleEdgeTpuSettings.TriState prefer_cache_coherency_for_inputs = 9;
inline bool GoogleEdgeTpuSettings::has_prefer_cache_coherency_for_inputs() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void GoogleEdgeTpuSettings::clear_prefer_cache_coherency_for_inputs() {
  _impl_.prefer_cache_coherency_for_inputs_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::tflite::proto::GoogleEdgeTpuSettings_TriState GoogleEdgeTpuSettings::prefer_cache_coherency_for_inputs() const {
  // @@protoc_insertion_point(field_get:tflite.proto.GoogleEdgeTpuSettings.prefer_cache_coherency_for_inputs)
  return _internal_prefer_cache_coherency_for_inputs();
}
inline void GoogleEdgeTpuSettings::set_prefer_cache_coherency_for_inputs(::tflite::proto::GoogleEdgeTpuSettings_TriState value) {
  _internal_set_prefer_cache_coherency_for_inputs(value);
  // @@protoc_insertion_point(field_set:tflite.proto.GoogleEdgeTpuSettings.prefer_cache_coherency_for_inputs)
}
inline ::tflite::proto::GoogleEdgeTpuSettings_TriState GoogleEdgeTpuSettings::_internal_prefer_cache_coherency_for_inputs() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tflite::proto::GoogleEdgeTpuSettings_TriState>(_impl_.prefer_cache_coherency_for_inputs_);
}
inline void GoogleEdgeTpuSettings::_internal_set_prefer_cache_coherency_for_inputs(::tflite::proto::GoogleEdgeTpuSettings_TriState value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::tflite::proto::GoogleEdgeTpuSettings_TriState_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.prefer_cache_coherency_for_inputs_ = value;
}

// optional .tflite.proto.GoogleEdgeTpuSettings.TriState prefer_cache_coherency_for_outputs = 10;
inline bool GoogleEdgeTpuSettings::has_prefer_cache_coherency_for_outputs() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void GoogleEdgeTpuSettings::clear_prefer_cache_coherency_for_outputs() {
  _impl_.prefer_cache_coherency_for_outputs_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::tflite::proto::GoogleEdgeTpuSettings_TriState GoogleEdgeTpuSettings::prefer_cache_coherency_for_outputs() const {
  // @@protoc_insertion_point(field_get:tflite.proto.GoogleEdgeTpuSettings.prefer_cache_coherency_for_outputs)
  return _internal_prefer_cache_coherency_for_outputs();
}
inline void GoogleEdgeTpuSettings::set_prefer_cache_coherency_for_outputs(::tflite::proto::GoogleEdgeTpuSettings_TriState value) {
  _internal_set_prefer_cache_coherency_for_outputs(value);
  // @@protoc_insertion_point(field_set:tflite.proto.GoogleEdgeTpuSettings.prefer_cache_coherency_for_outputs)
}
inline ::tflite::proto::GoogleEdgeTpuSettings_TriState GoogleEdgeTpuSettings::_internal_prefer_cache_coherency_for_outputs() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tflite::proto::GoogleEdgeTpuSettings_TriState>(_impl_.prefer_cache_coherency_for_outputs_);
}
inline void GoogleEdgeTpuSettings::_internal_set_prefer_cache_coherency_for_outputs(::tflite::proto::GoogleEdgeTpuSettings_TriState value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::tflite::proto::GoogleEdgeTpuSettings_TriState_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.prefer_cache_coherency_for_outputs_ = value;
}

// -------------------------------------------------------------------

// CoralSettings

// optional string device = 1;
inline bool CoralSettings::has_device() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CoralSettings::clear_device() {
  _impl_.device_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CoralSettings::device() const {
  // @@protoc_insertion_point(field_get:tflite.proto.CoralSettings.device)
  return _internal_device();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CoralSettings::set_device(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.device_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.proto.CoralSettings.device)
}
inline std::string* CoralSettings::mutable_device() {
  std::string* _s = _internal_mutable_device();
  // @@protoc_insertion_point(field_mutable:tflite.proto.CoralSettings.device)
  return _s;
}
inline const std::string& CoralSettings::_internal_device() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.device_.Get();
}
inline void CoralSettings::_internal_set_device(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.device_.Set(value, GetArenaForAllocation());
}
inline std::string* CoralSettings::_internal_mutable_device() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.device_.Mutable( GetArenaForAllocation());
}
inline std::string* CoralSettings::release_device() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.CoralSettings.device)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.device_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.device_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CoralSettings::set_allocated_device(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.device_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.device_.IsDefault()) {
          _impl_.device_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.CoralSettings.device)
}

// optional .tflite.proto.CoralSettings.Performance performance = 2 [default = MAXIMUM];
inline bool CoralSettings::has_performance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void CoralSettings::clear_performance() {
  _impl_.performance_ = 1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::tflite::proto::CoralSettings_Performance CoralSettings::performance() const {
  // @@protoc_insertion_point(field_get:tflite.proto.CoralSettings.performance)
  return _internal_performance();
}
inline void CoralSettings::set_performance(::tflite::proto::CoralSettings_Performance value) {
  _internal_set_performance(value);
  // @@protoc_insertion_point(field_set:tflite.proto.CoralSettings.performance)
}
inline ::tflite::proto::CoralSettings_Performance CoralSettings::_internal_performance() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tflite::proto::CoralSettings_Performance>(_impl_.performance_);
}
inline void CoralSettings::_internal_set_performance(::tflite::proto::CoralSettings_Performance value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::tflite::proto::CoralSettings_Performance_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.performance_ = value;
}

// optional bool usb_always_dfu = 3;
inline bool CoralSettings::has_usb_always_dfu() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CoralSettings::clear_usb_always_dfu() {
  _impl_.usb_always_dfu_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CoralSettings::usb_always_dfu() const {
  // @@protoc_insertion_point(field_get:tflite.proto.CoralSettings.usb_always_dfu)
  return _internal_usb_always_dfu();
}
inline void CoralSettings::set_usb_always_dfu(bool value) {
  _internal_set_usb_always_dfu(value);
  // @@protoc_insertion_point(field_set:tflite.proto.CoralSettings.usb_always_dfu)
}
inline bool CoralSettings::_internal_usb_always_dfu() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.usb_always_dfu_;
}
inline void CoralSettings::_internal_set_usb_always_dfu(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.usb_always_dfu_ = value;
}

// optional int32 usb_max_bulk_in_queue_length = 4;
inline bool CoralSettings::has_usb_max_bulk_in_queue_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CoralSettings::clear_usb_max_bulk_in_queue_length() {
  _impl_.usb_max_bulk_in_queue_length_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t CoralSettings::usb_max_bulk_in_queue_length() const {
  // @@protoc_insertion_point(field_get:tflite.proto.CoralSettings.usb_max_bulk_in_queue_length)
  return _internal_usb_max_bulk_in_queue_length();
}
inline void CoralSettings::set_usb_max_bulk_in_queue_length(::int32_t value) {
  _internal_set_usb_max_bulk_in_queue_length(value);
  // @@protoc_insertion_point(field_set:tflite.proto.CoralSettings.usb_max_bulk_in_queue_length)
}
inline ::int32_t CoralSettings::_internal_usb_max_bulk_in_queue_length() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.usb_max_bulk_in_queue_length_;
}
inline void CoralSettings::_internal_set_usb_max_bulk_in_queue_length(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.usb_max_bulk_in_queue_length_ = value;
}

// -------------------------------------------------------------------

// CPUSettings

// optional int32 num_threads = 1 [default = -1];
inline bool CPUSettings::has_num_threads() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CPUSettings::clear_num_threads() {
  _impl_.num_threads_ = -1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t CPUSettings::num_threads() const {
  // @@protoc_insertion_point(field_get:tflite.proto.CPUSettings.num_threads)
  return _internal_num_threads();
}
inline void CPUSettings::set_num_threads(::int32_t value) {
  _internal_set_num_threads(value);
  // @@protoc_insertion_point(field_set:tflite.proto.CPUSettings.num_threads)
}
inline ::int32_t CPUSettings::_internal_num_threads() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_threads_;
}
inline void CPUSettings::_internal_set_num_threads(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.num_threads_ = value;
}

// -------------------------------------------------------------------

// TFLiteSettings

// optional .tflite.proto.Delegate delegate = 1;
inline bool TFLiteSettings::has_delegate() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void TFLiteSettings::clear_delegate() {
  _impl_.delegate_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::tflite::proto::Delegate TFLiteSettings::delegate() const {
  // @@protoc_insertion_point(field_get:tflite.proto.TFLiteSettings.delegate)
  return _internal_delegate();
}
inline void TFLiteSettings::set_delegate(::tflite::proto::Delegate value) {
  _internal_set_delegate(value);
  // @@protoc_insertion_point(field_set:tflite.proto.TFLiteSettings.delegate)
}
inline ::tflite::proto::Delegate TFLiteSettings::_internal_delegate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tflite::proto::Delegate>(_impl_.delegate_);
}
inline void TFLiteSettings::_internal_set_delegate(::tflite::proto::Delegate value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::tflite::proto::Delegate_IsValid(value));
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.delegate_ = value;
}

// optional .tflite.proto.NNAPISettings nnapi_settings = 2;
inline bool TFLiteSettings::has_nnapi_settings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nnapi_settings_ != nullptr);
  return value;
}
inline void TFLiteSettings::clear_nnapi_settings() {
  if (_impl_.nnapi_settings_ != nullptr) _impl_.nnapi_settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tflite::proto::NNAPISettings& TFLiteSettings::_internal_nnapi_settings() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tflite::proto::NNAPISettings* p = _impl_.nnapi_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::proto::NNAPISettings&>(::tflite::proto::_NNAPISettings_default_instance_);
}
inline const ::tflite::proto::NNAPISettings& TFLiteSettings::nnapi_settings() const {
  // @@protoc_insertion_point(field_get:tflite.proto.TFLiteSettings.nnapi_settings)
  return _internal_nnapi_settings();
}
inline void TFLiteSettings::unsafe_arena_set_allocated_nnapi_settings(::tflite::proto::NNAPISettings* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.nnapi_settings_);
  }
  _impl_.nnapi_settings_ = reinterpret_cast<::tflite::proto::NNAPISettings*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.proto.TFLiteSettings.nnapi_settings)
}
inline ::tflite::proto::NNAPISettings* TFLiteSettings::release_nnapi_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tflite::proto::NNAPISettings* released = _impl_.nnapi_settings_;
  _impl_.nnapi_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tflite::proto::NNAPISettings* TFLiteSettings::unsafe_arena_release_nnapi_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.TFLiteSettings.nnapi_settings)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tflite::proto::NNAPISettings* temp = _impl_.nnapi_settings_;
  _impl_.nnapi_settings_ = nullptr;
  return temp;
}
inline ::tflite::proto::NNAPISettings* TFLiteSettings::_internal_mutable_nnapi_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.nnapi_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::proto::NNAPISettings>(GetArenaForAllocation());
    _impl_.nnapi_settings_ = reinterpret_cast<::tflite::proto::NNAPISettings*>(p);
  }
  return _impl_.nnapi_settings_;
}
inline ::tflite::proto::NNAPISettings* TFLiteSettings::mutable_nnapi_settings() {
  ::tflite::proto::NNAPISettings* _msg = _internal_mutable_nnapi_settings();
  // @@protoc_insertion_point(field_mutable:tflite.proto.TFLiteSettings.nnapi_settings)
  return _msg;
}
inline void TFLiteSettings::set_allocated_nnapi_settings(::tflite::proto::NNAPISettings* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::tflite::proto::NNAPISettings*>(_impl_.nnapi_settings_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::tflite::proto::NNAPISettings*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.nnapi_settings_ = reinterpret_cast<::tflite::proto::NNAPISettings*>(value);
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.TFLiteSettings.nnapi_settings)
}

// optional .tflite.proto.GPUSettings gpu_settings = 3;
inline bool TFLiteSettings::has_gpu_settings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gpu_settings_ != nullptr);
  return value;
}
inline void TFLiteSettings::clear_gpu_settings() {
  if (_impl_.gpu_settings_ != nullptr) _impl_.gpu_settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::tflite::proto::GPUSettings& TFLiteSettings::_internal_gpu_settings() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tflite::proto::GPUSettings* p = _impl_.gpu_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::proto::GPUSettings&>(::tflite::proto::_GPUSettings_default_instance_);
}
inline const ::tflite::proto::GPUSettings& TFLiteSettings::gpu_settings() const {
  // @@protoc_insertion_point(field_get:tflite.proto.TFLiteSettings.gpu_settings)
  return _internal_gpu_settings();
}
inline void TFLiteSettings::unsafe_arena_set_allocated_gpu_settings(::tflite::proto::GPUSettings* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.gpu_settings_);
  }
  _impl_.gpu_settings_ = reinterpret_cast<::tflite::proto::GPUSettings*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.proto.TFLiteSettings.gpu_settings)
}
inline ::tflite::proto::GPUSettings* TFLiteSettings::release_gpu_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tflite::proto::GPUSettings* released = _impl_.gpu_settings_;
  _impl_.gpu_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tflite::proto::GPUSettings* TFLiteSettings::unsafe_arena_release_gpu_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.TFLiteSettings.gpu_settings)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tflite::proto::GPUSettings* temp = _impl_.gpu_settings_;
  _impl_.gpu_settings_ = nullptr;
  return temp;
}
inline ::tflite::proto::GPUSettings* TFLiteSettings::_internal_mutable_gpu_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.gpu_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::proto::GPUSettings>(GetArenaForAllocation());
    _impl_.gpu_settings_ = reinterpret_cast<::tflite::proto::GPUSettings*>(p);
  }
  return _impl_.gpu_settings_;
}
inline ::tflite::proto::GPUSettings* TFLiteSettings::mutable_gpu_settings() {
  ::tflite::proto::GPUSettings* _msg = _internal_mutable_gpu_settings();
  // @@protoc_insertion_point(field_mutable:tflite.proto.TFLiteSettings.gpu_settings)
  return _msg;
}
inline void TFLiteSettings::set_allocated_gpu_settings(::tflite::proto::GPUSettings* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::tflite::proto::GPUSettings*>(_impl_.gpu_settings_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::tflite::proto::GPUSettings*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.gpu_settings_ = reinterpret_cast<::tflite::proto::GPUSettings*>(value);
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.TFLiteSettings.gpu_settings)
}

// optional .tflite.proto.HexagonSettings hexagon_settings = 4;
inline bool TFLiteSettings::has_hexagon_settings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.hexagon_settings_ != nullptr);
  return value;
}
inline void TFLiteSettings::clear_hexagon_settings() {
  if (_impl_.hexagon_settings_ != nullptr) _impl_.hexagon_settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::tflite::proto::HexagonSettings& TFLiteSettings::_internal_hexagon_settings() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tflite::proto::HexagonSettings* p = _impl_.hexagon_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::proto::HexagonSettings&>(::tflite::proto::_HexagonSettings_default_instance_);
}
inline const ::tflite::proto::HexagonSettings& TFLiteSettings::hexagon_settings() const {
  // @@protoc_insertion_point(field_get:tflite.proto.TFLiteSettings.hexagon_settings)
  return _internal_hexagon_settings();
}
inline void TFLiteSettings::unsafe_arena_set_allocated_hexagon_settings(::tflite::proto::HexagonSettings* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.hexagon_settings_);
  }
  _impl_.hexagon_settings_ = reinterpret_cast<::tflite::proto::HexagonSettings*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.proto.TFLiteSettings.hexagon_settings)
}
inline ::tflite::proto::HexagonSettings* TFLiteSettings::release_hexagon_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tflite::proto::HexagonSettings* released = _impl_.hexagon_settings_;
  _impl_.hexagon_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tflite::proto::HexagonSettings* TFLiteSettings::unsafe_arena_release_hexagon_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.TFLiteSettings.hexagon_settings)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tflite::proto::HexagonSettings* temp = _impl_.hexagon_settings_;
  _impl_.hexagon_settings_ = nullptr;
  return temp;
}
inline ::tflite::proto::HexagonSettings* TFLiteSettings::_internal_mutable_hexagon_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.hexagon_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::proto::HexagonSettings>(GetArenaForAllocation());
    _impl_.hexagon_settings_ = reinterpret_cast<::tflite::proto::HexagonSettings*>(p);
  }
  return _impl_.hexagon_settings_;
}
inline ::tflite::proto::HexagonSettings* TFLiteSettings::mutable_hexagon_settings() {
  ::tflite::proto::HexagonSettings* _msg = _internal_mutable_hexagon_settings();
  // @@protoc_insertion_point(field_mutable:tflite.proto.TFLiteSettings.hexagon_settings)
  return _msg;
}
inline void TFLiteSettings::set_allocated_hexagon_settings(::tflite::proto::HexagonSettings* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::tflite::proto::HexagonSettings*>(_impl_.hexagon_settings_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::tflite::proto::HexagonSettings*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.hexagon_settings_ = reinterpret_cast<::tflite::proto::HexagonSettings*>(value);
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.TFLiteSettings.hexagon_settings)
}

// optional .tflite.proto.XNNPackSettings xnnpack_settings = 5;
inline bool TFLiteSettings::has_xnnpack_settings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.xnnpack_settings_ != nullptr);
  return value;
}
inline void TFLiteSettings::clear_xnnpack_settings() {
  if (_impl_.xnnpack_settings_ != nullptr) _impl_.xnnpack_settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::tflite::proto::XNNPackSettings& TFLiteSettings::_internal_xnnpack_settings() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tflite::proto::XNNPackSettings* p = _impl_.xnnpack_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::proto::XNNPackSettings&>(::tflite::proto::_XNNPackSettings_default_instance_);
}
inline const ::tflite::proto::XNNPackSettings& TFLiteSettings::xnnpack_settings() const {
  // @@protoc_insertion_point(field_get:tflite.proto.TFLiteSettings.xnnpack_settings)
  return _internal_xnnpack_settings();
}
inline void TFLiteSettings::unsafe_arena_set_allocated_xnnpack_settings(::tflite::proto::XNNPackSettings* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.xnnpack_settings_);
  }
  _impl_.xnnpack_settings_ = reinterpret_cast<::tflite::proto::XNNPackSettings*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.proto.TFLiteSettings.xnnpack_settings)
}
inline ::tflite::proto::XNNPackSettings* TFLiteSettings::release_xnnpack_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tflite::proto::XNNPackSettings* released = _impl_.xnnpack_settings_;
  _impl_.xnnpack_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tflite::proto::XNNPackSettings* TFLiteSettings::unsafe_arena_release_xnnpack_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.TFLiteSettings.xnnpack_settings)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tflite::proto::XNNPackSettings* temp = _impl_.xnnpack_settings_;
  _impl_.xnnpack_settings_ = nullptr;
  return temp;
}
inline ::tflite::proto::XNNPackSettings* TFLiteSettings::_internal_mutable_xnnpack_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.xnnpack_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::proto::XNNPackSettings>(GetArenaForAllocation());
    _impl_.xnnpack_settings_ = reinterpret_cast<::tflite::proto::XNNPackSettings*>(p);
  }
  return _impl_.xnnpack_settings_;
}
inline ::tflite::proto::XNNPackSettings* TFLiteSettings::mutable_xnnpack_settings() {
  ::tflite::proto::XNNPackSettings* _msg = _internal_mutable_xnnpack_settings();
  // @@protoc_insertion_point(field_mutable:tflite.proto.TFLiteSettings.xnnpack_settings)
  return _msg;
}
inline void TFLiteSettings::set_allocated_xnnpack_settings(::tflite::proto::XNNPackSettings* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::tflite::proto::XNNPackSettings*>(_impl_.xnnpack_settings_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::tflite::proto::XNNPackSettings*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.xnnpack_settings_ = reinterpret_cast<::tflite::proto::XNNPackSettings*>(value);
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.TFLiteSettings.xnnpack_settings)
}

// optional .tflite.proto.CoreMLSettings coreml_settings = 11;
inline bool TFLiteSettings::has_coreml_settings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.coreml_settings_ != nullptr);
  return value;
}
inline void TFLiteSettings::clear_coreml_settings() {
  if (_impl_.coreml_settings_ != nullptr) _impl_.coreml_settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::tflite::proto::CoreMLSettings& TFLiteSettings::_internal_coreml_settings() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tflite::proto::CoreMLSettings* p = _impl_.coreml_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::proto::CoreMLSettings&>(::tflite::proto::_CoreMLSettings_default_instance_);
}
inline const ::tflite::proto::CoreMLSettings& TFLiteSettings::coreml_settings() const {
  // @@protoc_insertion_point(field_get:tflite.proto.TFLiteSettings.coreml_settings)
  return _internal_coreml_settings();
}
inline void TFLiteSettings::unsafe_arena_set_allocated_coreml_settings(::tflite::proto::CoreMLSettings* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.coreml_settings_);
  }
  _impl_.coreml_settings_ = reinterpret_cast<::tflite::proto::CoreMLSettings*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.proto.TFLiteSettings.coreml_settings)
}
inline ::tflite::proto::CoreMLSettings* TFLiteSettings::release_coreml_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::tflite::proto::CoreMLSettings* released = _impl_.coreml_settings_;
  _impl_.coreml_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tflite::proto::CoreMLSettings* TFLiteSettings::unsafe_arena_release_coreml_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.TFLiteSettings.coreml_settings)

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::tflite::proto::CoreMLSettings* temp = _impl_.coreml_settings_;
  _impl_.coreml_settings_ = nullptr;
  return temp;
}
inline ::tflite::proto::CoreMLSettings* TFLiteSettings::_internal_mutable_coreml_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.coreml_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::proto::CoreMLSettings>(GetArenaForAllocation());
    _impl_.coreml_settings_ = reinterpret_cast<::tflite::proto::CoreMLSettings*>(p);
  }
  return _impl_.coreml_settings_;
}
inline ::tflite::proto::CoreMLSettings* TFLiteSettings::mutable_coreml_settings() {
  ::tflite::proto::CoreMLSettings* _msg = _internal_mutable_coreml_settings();
  // @@protoc_insertion_point(field_mutable:tflite.proto.TFLiteSettings.coreml_settings)
  return _msg;
}
inline void TFLiteSettings::set_allocated_coreml_settings(::tflite::proto::CoreMLSettings* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::tflite::proto::CoreMLSettings*>(_impl_.coreml_settings_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::tflite::proto::CoreMLSettings*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }

  _impl_.coreml_settings_ = reinterpret_cast<::tflite::proto::CoreMLSettings*>(value);
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.TFLiteSettings.coreml_settings)
}

// optional .tflite.proto.CPUSettings cpu_settings = 6;
inline bool TFLiteSettings::has_cpu_settings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cpu_settings_ != nullptr);
  return value;
}
inline void TFLiteSettings::clear_cpu_settings() {
  if (_impl_.cpu_settings_ != nullptr) _impl_.cpu_settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::tflite::proto::CPUSettings& TFLiteSettings::_internal_cpu_settings() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tflite::proto::CPUSettings* p = _impl_.cpu_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::proto::CPUSettings&>(::tflite::proto::_CPUSettings_default_instance_);
}
inline const ::tflite::proto::CPUSettings& TFLiteSettings::cpu_settings() const {
  // @@protoc_insertion_point(field_get:tflite.proto.TFLiteSettings.cpu_settings)
  return _internal_cpu_settings();
}
inline void TFLiteSettings::unsafe_arena_set_allocated_cpu_settings(::tflite::proto::CPUSettings* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.cpu_settings_);
  }
  _impl_.cpu_settings_ = reinterpret_cast<::tflite::proto::CPUSettings*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.proto.TFLiteSettings.cpu_settings)
}
inline ::tflite::proto::CPUSettings* TFLiteSettings::release_cpu_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::tflite::proto::CPUSettings* released = _impl_.cpu_settings_;
  _impl_.cpu_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tflite::proto::CPUSettings* TFLiteSettings::unsafe_arena_release_cpu_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.TFLiteSettings.cpu_settings)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::tflite::proto::CPUSettings* temp = _impl_.cpu_settings_;
  _impl_.cpu_settings_ = nullptr;
  return temp;
}
inline ::tflite::proto::CPUSettings* TFLiteSettings::_internal_mutable_cpu_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.cpu_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::proto::CPUSettings>(GetArenaForAllocation());
    _impl_.cpu_settings_ = reinterpret_cast<::tflite::proto::CPUSettings*>(p);
  }
  return _impl_.cpu_settings_;
}
inline ::tflite::proto::CPUSettings* TFLiteSettings::mutable_cpu_settings() {
  ::tflite::proto::CPUSettings* _msg = _internal_mutable_cpu_settings();
  // @@protoc_insertion_point(field_mutable:tflite.proto.TFLiteSettings.cpu_settings)
  return _msg;
}
inline void TFLiteSettings::set_allocated_cpu_settings(::tflite::proto::CPUSettings* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::tflite::proto::CPUSettings*>(_impl_.cpu_settings_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::tflite::proto::CPUSettings*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.cpu_settings_ = reinterpret_cast<::tflite::proto::CPUSettings*>(value);
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.TFLiteSettings.cpu_settings)
}

// optional int32 max_delegated_partitions = 7;
inline bool TFLiteSettings::has_max_delegated_partitions() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void TFLiteSettings::clear_max_delegated_partitions() {
  _impl_.max_delegated_partitions_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::int32_t TFLiteSettings::max_delegated_partitions() const {
  // @@protoc_insertion_point(field_get:tflite.proto.TFLiteSettings.max_delegated_partitions)
  return _internal_max_delegated_partitions();
}
inline void TFLiteSettings::set_max_delegated_partitions(::int32_t value) {
  _internal_set_max_delegated_partitions(value);
  // @@protoc_insertion_point(field_set:tflite.proto.TFLiteSettings.max_delegated_partitions)
}
inline ::int32_t TFLiteSettings::_internal_max_delegated_partitions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_delegated_partitions_;
}
inline void TFLiteSettings::_internal_set_max_delegated_partitions(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.max_delegated_partitions_ = value;
}

// optional .tflite.proto.EdgeTpuSettings edgetpu_settings = 8;
inline bool TFLiteSettings::has_edgetpu_settings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.edgetpu_settings_ != nullptr);
  return value;
}
inline void TFLiteSettings::clear_edgetpu_settings() {
  if (_impl_.edgetpu_settings_ != nullptr) _impl_.edgetpu_settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::tflite::proto::EdgeTpuSettings& TFLiteSettings::_internal_edgetpu_settings() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tflite::proto::EdgeTpuSettings* p = _impl_.edgetpu_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::proto::EdgeTpuSettings&>(::tflite::proto::_EdgeTpuSettings_default_instance_);
}
inline const ::tflite::proto::EdgeTpuSettings& TFLiteSettings::edgetpu_settings() const {
  // @@protoc_insertion_point(field_get:tflite.proto.TFLiteSettings.edgetpu_settings)
  return _internal_edgetpu_settings();
}
inline void TFLiteSettings::unsafe_arena_set_allocated_edgetpu_settings(::tflite::proto::EdgeTpuSettings* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.edgetpu_settings_);
  }
  _impl_.edgetpu_settings_ = reinterpret_cast<::tflite::proto::EdgeTpuSettings*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.proto.TFLiteSettings.edgetpu_settings)
}
inline ::tflite::proto::EdgeTpuSettings* TFLiteSettings::release_edgetpu_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::tflite::proto::EdgeTpuSettings* released = _impl_.edgetpu_settings_;
  _impl_.edgetpu_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tflite::proto::EdgeTpuSettings* TFLiteSettings::unsafe_arena_release_edgetpu_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.TFLiteSettings.edgetpu_settings)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::tflite::proto::EdgeTpuSettings* temp = _impl_.edgetpu_settings_;
  _impl_.edgetpu_settings_ = nullptr;
  return temp;
}
inline ::tflite::proto::EdgeTpuSettings* TFLiteSettings::_internal_mutable_edgetpu_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.edgetpu_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::proto::EdgeTpuSettings>(GetArenaForAllocation());
    _impl_.edgetpu_settings_ = reinterpret_cast<::tflite::proto::EdgeTpuSettings*>(p);
  }
  return _impl_.edgetpu_settings_;
}
inline ::tflite::proto::EdgeTpuSettings* TFLiteSettings::mutable_edgetpu_settings() {
  ::tflite::proto::EdgeTpuSettings* _msg = _internal_mutable_edgetpu_settings();
  // @@protoc_insertion_point(field_mutable:tflite.proto.TFLiteSettings.edgetpu_settings)
  return _msg;
}
inline void TFLiteSettings::set_allocated_edgetpu_settings(::tflite::proto::EdgeTpuSettings* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::tflite::proto::EdgeTpuSettings*>(_impl_.edgetpu_settings_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::tflite::proto::EdgeTpuSettings*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.edgetpu_settings_ = reinterpret_cast<::tflite::proto::EdgeTpuSettings*>(value);
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.TFLiteSettings.edgetpu_settings)
}

// optional .tflite.proto.CoralSettings coral_settings = 10;
inline bool TFLiteSettings::has_coral_settings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.coral_settings_ != nullptr);
  return value;
}
inline void TFLiteSettings::clear_coral_settings() {
  if (_impl_.coral_settings_ != nullptr) _impl_.coral_settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::tflite::proto::CoralSettings& TFLiteSettings::_internal_coral_settings() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tflite::proto::CoralSettings* p = _impl_.coral_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::proto::CoralSettings&>(::tflite::proto::_CoralSettings_default_instance_);
}
inline const ::tflite::proto::CoralSettings& TFLiteSettings::coral_settings() const {
  // @@protoc_insertion_point(field_get:tflite.proto.TFLiteSettings.coral_settings)
  return _internal_coral_settings();
}
inline void TFLiteSettings::unsafe_arena_set_allocated_coral_settings(::tflite::proto::CoralSettings* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.coral_settings_);
  }
  _impl_.coral_settings_ = reinterpret_cast<::tflite::proto::CoralSettings*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.proto.TFLiteSettings.coral_settings)
}
inline ::tflite::proto::CoralSettings* TFLiteSettings::release_coral_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::tflite::proto::CoralSettings* released = _impl_.coral_settings_;
  _impl_.coral_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tflite::proto::CoralSettings* TFLiteSettings::unsafe_arena_release_coral_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.TFLiteSettings.coral_settings)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::tflite::proto::CoralSettings* temp = _impl_.coral_settings_;
  _impl_.coral_settings_ = nullptr;
  return temp;
}
inline ::tflite::proto::CoralSettings* TFLiteSettings::_internal_mutable_coral_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.coral_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::proto::CoralSettings>(GetArenaForAllocation());
    _impl_.coral_settings_ = reinterpret_cast<::tflite::proto::CoralSettings*>(p);
  }
  return _impl_.coral_settings_;
}
inline ::tflite::proto::CoralSettings* TFLiteSettings::mutable_coral_settings() {
  ::tflite::proto::CoralSettings* _msg = _internal_mutable_coral_settings();
  // @@protoc_insertion_point(field_mutable:tflite.proto.TFLiteSettings.coral_settings)
  return _msg;
}
inline void TFLiteSettings::set_allocated_coral_settings(::tflite::proto::CoralSettings* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::tflite::proto::CoralSettings*>(_impl_.coral_settings_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::tflite::proto::CoralSettings*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.coral_settings_ = reinterpret_cast<::tflite::proto::CoralSettings*>(value);
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.TFLiteSettings.coral_settings)
}

// optional .tflite.proto.FallbackSettings fallback_settings = 9;
inline bool TFLiteSettings::has_fallback_settings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fallback_settings_ != nullptr);
  return value;
}
inline void TFLiteSettings::clear_fallback_settings() {
  if (_impl_.fallback_settings_ != nullptr) _impl_.fallback_settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::tflite::proto::FallbackSettings& TFLiteSettings::_internal_fallback_settings() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tflite::proto::FallbackSettings* p = _impl_.fallback_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::proto::FallbackSettings&>(::tflite::proto::_FallbackSettings_default_instance_);
}
inline const ::tflite::proto::FallbackSettings& TFLiteSettings::fallback_settings() const {
  // @@protoc_insertion_point(field_get:tflite.proto.TFLiteSettings.fallback_settings)
  return _internal_fallback_settings();
}
inline void TFLiteSettings::unsafe_arena_set_allocated_fallback_settings(::tflite::proto::FallbackSettings* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.fallback_settings_);
  }
  _impl_.fallback_settings_ = reinterpret_cast<::tflite::proto::FallbackSettings*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.proto.TFLiteSettings.fallback_settings)
}
inline ::tflite::proto::FallbackSettings* TFLiteSettings::release_fallback_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::tflite::proto::FallbackSettings* released = _impl_.fallback_settings_;
  _impl_.fallback_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tflite::proto::FallbackSettings* TFLiteSettings::unsafe_arena_release_fallback_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.TFLiteSettings.fallback_settings)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::tflite::proto::FallbackSettings* temp = _impl_.fallback_settings_;
  _impl_.fallback_settings_ = nullptr;
  return temp;
}
inline ::tflite::proto::FallbackSettings* TFLiteSettings::_internal_mutable_fallback_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.fallback_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::proto::FallbackSettings>(GetArenaForAllocation());
    _impl_.fallback_settings_ = reinterpret_cast<::tflite::proto::FallbackSettings*>(p);
  }
  return _impl_.fallback_settings_;
}
inline ::tflite::proto::FallbackSettings* TFLiteSettings::mutable_fallback_settings() {
  ::tflite::proto::FallbackSettings* _msg = _internal_mutable_fallback_settings();
  // @@protoc_insertion_point(field_mutable:tflite.proto.TFLiteSettings.fallback_settings)
  return _msg;
}
inline void TFLiteSettings::set_allocated_fallback_settings(::tflite::proto::FallbackSettings* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::tflite::proto::FallbackSettings*>(_impl_.fallback_settings_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::tflite::proto::FallbackSettings*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.fallback_settings_ = reinterpret_cast<::tflite::proto::FallbackSettings*>(value);
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.TFLiteSettings.fallback_settings)
}

// optional bool disable_default_delegates = 12;
inline bool TFLiteSettings::has_disable_default_delegates() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void TFLiteSettings::clear_disable_default_delegates() {
  _impl_.disable_default_delegates_ = false;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline bool TFLiteSettings::disable_default_delegates() const {
  // @@protoc_insertion_point(field_get:tflite.proto.TFLiteSettings.disable_default_delegates)
  return _internal_disable_default_delegates();
}
inline void TFLiteSettings::set_disable_default_delegates(bool value) {
  _internal_set_disable_default_delegates(value);
  // @@protoc_insertion_point(field_set:tflite.proto.TFLiteSettings.disable_default_delegates)
}
inline bool TFLiteSettings::_internal_disable_default_delegates() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.disable_default_delegates_;
}
inline void TFLiteSettings::_internal_set_disable_default_delegates(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.disable_default_delegates_ = value;
}

// optional .tflite.proto.StableDelegateLoaderSettings stable_delegate_loader_settings = 13;
inline bool TFLiteSettings::has_stable_delegate_loader_settings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stable_delegate_loader_settings_ != nullptr);
  return value;
}
inline void TFLiteSettings::clear_stable_delegate_loader_settings() {
  if (_impl_.stable_delegate_loader_settings_ != nullptr) _impl_.stable_delegate_loader_settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const ::tflite::proto::StableDelegateLoaderSettings& TFLiteSettings::_internal_stable_delegate_loader_settings() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tflite::proto::StableDelegateLoaderSettings* p = _impl_.stable_delegate_loader_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::proto::StableDelegateLoaderSettings&>(::tflite::proto::_StableDelegateLoaderSettings_default_instance_);
}
inline const ::tflite::proto::StableDelegateLoaderSettings& TFLiteSettings::stable_delegate_loader_settings() const {
  // @@protoc_insertion_point(field_get:tflite.proto.TFLiteSettings.stable_delegate_loader_settings)
  return _internal_stable_delegate_loader_settings();
}
inline void TFLiteSettings::unsafe_arena_set_allocated_stable_delegate_loader_settings(::tflite::proto::StableDelegateLoaderSettings* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.stable_delegate_loader_settings_);
  }
  _impl_.stable_delegate_loader_settings_ = reinterpret_cast<::tflite::proto::StableDelegateLoaderSettings*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.proto.TFLiteSettings.stable_delegate_loader_settings)
}
inline ::tflite::proto::StableDelegateLoaderSettings* TFLiteSettings::release_stable_delegate_loader_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::tflite::proto::StableDelegateLoaderSettings* released = _impl_.stable_delegate_loader_settings_;
  _impl_.stable_delegate_loader_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tflite::proto::StableDelegateLoaderSettings* TFLiteSettings::unsafe_arena_release_stable_delegate_loader_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.TFLiteSettings.stable_delegate_loader_settings)

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::tflite::proto::StableDelegateLoaderSettings* temp = _impl_.stable_delegate_loader_settings_;
  _impl_.stable_delegate_loader_settings_ = nullptr;
  return temp;
}
inline ::tflite::proto::StableDelegateLoaderSettings* TFLiteSettings::_internal_mutable_stable_delegate_loader_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.stable_delegate_loader_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::proto::StableDelegateLoaderSettings>(GetArenaForAllocation());
    _impl_.stable_delegate_loader_settings_ = reinterpret_cast<::tflite::proto::StableDelegateLoaderSettings*>(p);
  }
  return _impl_.stable_delegate_loader_settings_;
}
inline ::tflite::proto::StableDelegateLoaderSettings* TFLiteSettings::mutable_stable_delegate_loader_settings() {
  ::tflite::proto::StableDelegateLoaderSettings* _msg = _internal_mutable_stable_delegate_loader_settings();
  // @@protoc_insertion_point(field_mutable:tflite.proto.TFLiteSettings.stable_delegate_loader_settings)
  return _msg;
}
inline void TFLiteSettings::set_allocated_stable_delegate_loader_settings(::tflite::proto::StableDelegateLoaderSettings* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::tflite::proto::StableDelegateLoaderSettings*>(_impl_.stable_delegate_loader_settings_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::tflite::proto::StableDelegateLoaderSettings*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }

  _impl_.stable_delegate_loader_settings_ = reinterpret_cast<::tflite::proto::StableDelegateLoaderSettings*>(value);
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.TFLiteSettings.stable_delegate_loader_settings)
}

// optional .tflite.proto.GoogleEdgeTpuSettings google_edgetpu_settings = 14;
inline bool TFLiteSettings::has_google_edgetpu_settings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.google_edgetpu_settings_ != nullptr);
  return value;
}
inline void TFLiteSettings::clear_google_edgetpu_settings() {
  if (_impl_.google_edgetpu_settings_ != nullptr) _impl_.google_edgetpu_settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const ::tflite::proto::GoogleEdgeTpuSettings& TFLiteSettings::_internal_google_edgetpu_settings() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tflite::proto::GoogleEdgeTpuSettings* p = _impl_.google_edgetpu_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::proto::GoogleEdgeTpuSettings&>(::tflite::proto::_GoogleEdgeTpuSettings_default_instance_);
}
inline const ::tflite::proto::GoogleEdgeTpuSettings& TFLiteSettings::google_edgetpu_settings() const {
  // @@protoc_insertion_point(field_get:tflite.proto.TFLiteSettings.google_edgetpu_settings)
  return _internal_google_edgetpu_settings();
}
inline void TFLiteSettings::unsafe_arena_set_allocated_google_edgetpu_settings(::tflite::proto::GoogleEdgeTpuSettings* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.google_edgetpu_settings_);
  }
  _impl_.google_edgetpu_settings_ = reinterpret_cast<::tflite::proto::GoogleEdgeTpuSettings*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.proto.TFLiteSettings.google_edgetpu_settings)
}
inline ::tflite::proto::GoogleEdgeTpuSettings* TFLiteSettings::release_google_edgetpu_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::tflite::proto::GoogleEdgeTpuSettings* released = _impl_.google_edgetpu_settings_;
  _impl_.google_edgetpu_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tflite::proto::GoogleEdgeTpuSettings* TFLiteSettings::unsafe_arena_release_google_edgetpu_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.TFLiteSettings.google_edgetpu_settings)

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::tflite::proto::GoogleEdgeTpuSettings* temp = _impl_.google_edgetpu_settings_;
  _impl_.google_edgetpu_settings_ = nullptr;
  return temp;
}
inline ::tflite::proto::GoogleEdgeTpuSettings* TFLiteSettings::_internal_mutable_google_edgetpu_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.google_edgetpu_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::proto::GoogleEdgeTpuSettings>(GetArenaForAllocation());
    _impl_.google_edgetpu_settings_ = reinterpret_cast<::tflite::proto::GoogleEdgeTpuSettings*>(p);
  }
  return _impl_.google_edgetpu_settings_;
}
inline ::tflite::proto::GoogleEdgeTpuSettings* TFLiteSettings::mutable_google_edgetpu_settings() {
  ::tflite::proto::GoogleEdgeTpuSettings* _msg = _internal_mutable_google_edgetpu_settings();
  // @@protoc_insertion_point(field_mutable:tflite.proto.TFLiteSettings.google_edgetpu_settings)
  return _msg;
}
inline void TFLiteSettings::set_allocated_google_edgetpu_settings(::tflite::proto::GoogleEdgeTpuSettings* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::tflite::proto::GoogleEdgeTpuSettings*>(_impl_.google_edgetpu_settings_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::tflite::proto::GoogleEdgeTpuSettings*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }

  _impl_.google_edgetpu_settings_ = reinterpret_cast<::tflite::proto::GoogleEdgeTpuSettings*>(value);
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.TFLiteSettings.google_edgetpu_settings)
}

// optional .tflite.proto.CompilationCachingSettings compilation_caching_settings = 15;
inline bool TFLiteSettings::has_compilation_caching_settings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.compilation_caching_settings_ != nullptr);
  return value;
}
inline void TFLiteSettings::clear_compilation_caching_settings() {
  if (_impl_.compilation_caching_settings_ != nullptr) _impl_.compilation_caching_settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const ::tflite::proto::CompilationCachingSettings& TFLiteSettings::_internal_compilation_caching_settings() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tflite::proto::CompilationCachingSettings* p = _impl_.compilation_caching_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::proto::CompilationCachingSettings&>(::tflite::proto::_CompilationCachingSettings_default_instance_);
}
inline const ::tflite::proto::CompilationCachingSettings& TFLiteSettings::compilation_caching_settings() const {
  // @@protoc_insertion_point(field_get:tflite.proto.TFLiteSettings.compilation_caching_settings)
  return _internal_compilation_caching_settings();
}
inline void TFLiteSettings::unsafe_arena_set_allocated_compilation_caching_settings(::tflite::proto::CompilationCachingSettings* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.compilation_caching_settings_);
  }
  _impl_.compilation_caching_settings_ = reinterpret_cast<::tflite::proto::CompilationCachingSettings*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.proto.TFLiteSettings.compilation_caching_settings)
}
inline ::tflite::proto::CompilationCachingSettings* TFLiteSettings::release_compilation_caching_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000800u;
  ::tflite::proto::CompilationCachingSettings* released = _impl_.compilation_caching_settings_;
  _impl_.compilation_caching_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tflite::proto::CompilationCachingSettings* TFLiteSettings::unsafe_arena_release_compilation_caching_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.TFLiteSettings.compilation_caching_settings)

  _impl_._has_bits_[0] &= ~0x00000800u;
  ::tflite::proto::CompilationCachingSettings* temp = _impl_.compilation_caching_settings_;
  _impl_.compilation_caching_settings_ = nullptr;
  return temp;
}
inline ::tflite::proto::CompilationCachingSettings* TFLiteSettings::_internal_mutable_compilation_caching_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.compilation_caching_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::proto::CompilationCachingSettings>(GetArenaForAllocation());
    _impl_.compilation_caching_settings_ = reinterpret_cast<::tflite::proto::CompilationCachingSettings*>(p);
  }
  return _impl_.compilation_caching_settings_;
}
inline ::tflite::proto::CompilationCachingSettings* TFLiteSettings::mutable_compilation_caching_settings() {
  ::tflite::proto::CompilationCachingSettings* _msg = _internal_mutable_compilation_caching_settings();
  // @@protoc_insertion_point(field_mutable:tflite.proto.TFLiteSettings.compilation_caching_settings)
  return _msg;
}
inline void TFLiteSettings::set_allocated_compilation_caching_settings(::tflite::proto::CompilationCachingSettings* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::tflite::proto::CompilationCachingSettings*>(_impl_.compilation_caching_settings_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::tflite::proto::CompilationCachingSettings*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }

  _impl_.compilation_caching_settings_ = reinterpret_cast<::tflite::proto::CompilationCachingSettings*>(value);
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.TFLiteSettings.compilation_caching_settings)
}

// -------------------------------------------------------------------

// FallbackSettings

// optional bool allow_automatic_fallback_on_compilation_error = 7;
inline bool FallbackSettings::has_allow_automatic_fallback_on_compilation_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void FallbackSettings::clear_allow_automatic_fallback_on_compilation_error() {
  _impl_.allow_automatic_fallback_on_compilation_error_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool FallbackSettings::allow_automatic_fallback_on_compilation_error() const {
  // @@protoc_insertion_point(field_get:tflite.proto.FallbackSettings.allow_automatic_fallback_on_compilation_error)
  return _internal_allow_automatic_fallback_on_compilation_error();
}
inline void FallbackSettings::set_allow_automatic_fallback_on_compilation_error(bool value) {
  _internal_set_allow_automatic_fallback_on_compilation_error(value);
  // @@protoc_insertion_point(field_set:tflite.proto.FallbackSettings.allow_automatic_fallback_on_compilation_error)
}
inline bool FallbackSettings::_internal_allow_automatic_fallback_on_compilation_error() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.allow_automatic_fallback_on_compilation_error_;
}
inline void FallbackSettings::_internal_set_allow_automatic_fallback_on_compilation_error(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.allow_automatic_fallback_on_compilation_error_ = value;
}

// optional bool allow_automatic_fallback_on_execution_error = 8;
inline bool FallbackSettings::has_allow_automatic_fallback_on_execution_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void FallbackSettings::clear_allow_automatic_fallback_on_execution_error() {
  _impl_.allow_automatic_fallback_on_execution_error_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool FallbackSettings::allow_automatic_fallback_on_execution_error() const {
  // @@protoc_insertion_point(field_get:tflite.proto.FallbackSettings.allow_automatic_fallback_on_execution_error)
  return _internal_allow_automatic_fallback_on_execution_error();
}
inline void FallbackSettings::set_allow_automatic_fallback_on_execution_error(bool value) {
  _internal_set_allow_automatic_fallback_on_execution_error(value);
  // @@protoc_insertion_point(field_set:tflite.proto.FallbackSettings.allow_automatic_fallback_on_execution_error)
}
inline bool FallbackSettings::_internal_allow_automatic_fallback_on_execution_error() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.allow_automatic_fallback_on_execution_error_;
}
inline void FallbackSettings::_internal_set_allow_automatic_fallback_on_execution_error(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.allow_automatic_fallback_on_execution_error_ = value;
}

// -------------------------------------------------------------------

// BenchmarkMetric

// optional string name = 1;
inline bool BenchmarkMetric::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void BenchmarkMetric::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BenchmarkMetric::name() const {
  // @@protoc_insertion_point(field_get:tflite.proto.BenchmarkMetric.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BenchmarkMetric::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.proto.BenchmarkMetric.name)
}
inline std::string* BenchmarkMetric::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tflite.proto.BenchmarkMetric.name)
  return _s;
}
inline const std::string& BenchmarkMetric::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void BenchmarkMetric::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* BenchmarkMetric::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* BenchmarkMetric::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.BenchmarkMetric.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void BenchmarkMetric::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.BenchmarkMetric.name)
}

// repeated float values = 2 [packed = true];
inline int BenchmarkMetric::_internal_values_size() const {
  return _internal_values().size();
}
inline int BenchmarkMetric::values_size() const {
  return _internal_values_size();
}
inline void BenchmarkMetric::clear_values() {
  _internal_mutable_values()->Clear();
}
inline float BenchmarkMetric::values(int index) const {
  // @@protoc_insertion_point(field_get:tflite.proto.BenchmarkMetric.values)
  return _internal_values().Get(index);
}
inline void BenchmarkMetric::set_values(int index, float value) {
  _internal_mutable_values()->Set(index, value);
  // @@protoc_insertion_point(field_set:tflite.proto.BenchmarkMetric.values)
}
inline void BenchmarkMetric::add_values(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add(value);
  // @@protoc_insertion_point(field_add:tflite.proto.BenchmarkMetric.values)
}
inline const ::google::protobuf::RepeatedField<float>& BenchmarkMetric::values() const {
  // @@protoc_insertion_point(field_list:tflite.proto.BenchmarkMetric.values)
  return _internal_values();
}
inline ::google::protobuf::RepeatedField<float>* BenchmarkMetric::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:tflite.proto.BenchmarkMetric.values)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_values();
}

inline const ::google::protobuf::RepeatedField<float>& BenchmarkMetric::_internal_values() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.values_;
}
inline ::google::protobuf::RepeatedField<float>* BenchmarkMetric::_internal_mutable_values() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// BenchmarkResult_InferenceOutput

// optional bytes value = 1;
inline bool BenchmarkResult_InferenceOutput::has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void BenchmarkResult_InferenceOutput::clear_value() {
  _impl_.value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BenchmarkResult_InferenceOutput::value() const {
  // @@protoc_insertion_point(field_get:tflite.proto.BenchmarkResult.InferenceOutput.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BenchmarkResult_InferenceOutput::set_value(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.value_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.proto.BenchmarkResult.InferenceOutput.value)
}
inline std::string* BenchmarkResult_InferenceOutput::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:tflite.proto.BenchmarkResult.InferenceOutput.value)
  return _s;
}
inline const std::string& BenchmarkResult_InferenceOutput::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_.Get();
}
inline void BenchmarkResult_InferenceOutput::_internal_set_value(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* BenchmarkResult_InferenceOutput::_internal_mutable_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.value_.Mutable( GetArenaForAllocation());
}
inline std::string* BenchmarkResult_InferenceOutput::release_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.BenchmarkResult.InferenceOutput.value)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.value_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void BenchmarkResult_InferenceOutput::set_allocated_value(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.BenchmarkResult.InferenceOutput.value)
}

// -------------------------------------------------------------------

// BenchmarkResult

// repeated int64 initialization_time_us = 1 [packed = true];
inline int BenchmarkResult::_internal_initialization_time_us_size() const {
  return _internal_initialization_time_us().size();
}
inline int BenchmarkResult::initialization_time_us_size() const {
  return _internal_initialization_time_us_size();
}
inline void BenchmarkResult::clear_initialization_time_us() {
  _internal_mutable_initialization_time_us()->Clear();
}
inline ::int64_t BenchmarkResult::initialization_time_us(int index) const {
  // @@protoc_insertion_point(field_get:tflite.proto.BenchmarkResult.initialization_time_us)
  return _internal_initialization_time_us().Get(index);
}
inline void BenchmarkResult::set_initialization_time_us(int index, ::int64_t value) {
  _internal_mutable_initialization_time_us()->Set(index, value);
  // @@protoc_insertion_point(field_set:tflite.proto.BenchmarkResult.initialization_time_us)
}
inline void BenchmarkResult::add_initialization_time_us(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_initialization_time_us()->Add(value);
  // @@protoc_insertion_point(field_add:tflite.proto.BenchmarkResult.initialization_time_us)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& BenchmarkResult::initialization_time_us() const {
  // @@protoc_insertion_point(field_list:tflite.proto.BenchmarkResult.initialization_time_us)
  return _internal_initialization_time_us();
}
inline ::google::protobuf::RepeatedField<::int64_t>* BenchmarkResult::mutable_initialization_time_us() {
  // @@protoc_insertion_point(field_mutable_list:tflite.proto.BenchmarkResult.initialization_time_us)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_initialization_time_us();
}

inline const ::google::protobuf::RepeatedField<::int64_t>& BenchmarkResult::_internal_initialization_time_us() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.initialization_time_us_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* BenchmarkResult::_internal_mutable_initialization_time_us() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.initialization_time_us_;
}

// repeated int64 inference_time_us = 2 [packed = true];
inline int BenchmarkResult::_internal_inference_time_us_size() const {
  return _internal_inference_time_us().size();
}
inline int BenchmarkResult::inference_time_us_size() const {
  return _internal_inference_time_us_size();
}
inline void BenchmarkResult::clear_inference_time_us() {
  _internal_mutable_inference_time_us()->Clear();
}
inline ::int64_t BenchmarkResult::inference_time_us(int index) const {
  // @@protoc_insertion_point(field_get:tflite.proto.BenchmarkResult.inference_time_us)
  return _internal_inference_time_us().Get(index);
}
inline void BenchmarkResult::set_inference_time_us(int index, ::int64_t value) {
  _internal_mutable_inference_time_us()->Set(index, value);
  // @@protoc_insertion_point(field_set:tflite.proto.BenchmarkResult.inference_time_us)
}
inline void BenchmarkResult::add_inference_time_us(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_inference_time_us()->Add(value);
  // @@protoc_insertion_point(field_add:tflite.proto.BenchmarkResult.inference_time_us)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& BenchmarkResult::inference_time_us() const {
  // @@protoc_insertion_point(field_list:tflite.proto.BenchmarkResult.inference_time_us)
  return _internal_inference_time_us();
}
inline ::google::protobuf::RepeatedField<::int64_t>* BenchmarkResult::mutable_inference_time_us() {
  // @@protoc_insertion_point(field_mutable_list:tflite.proto.BenchmarkResult.inference_time_us)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_inference_time_us();
}

inline const ::google::protobuf::RepeatedField<::int64_t>& BenchmarkResult::_internal_inference_time_us() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.inference_time_us_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* BenchmarkResult::_internal_mutable_inference_time_us() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.inference_time_us_;
}

// optional int32 max_memory_kb = 3;
inline bool BenchmarkResult::has_max_memory_kb() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void BenchmarkResult::clear_max_memory_kb() {
  _impl_.max_memory_kb_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t BenchmarkResult::max_memory_kb() const {
  // @@protoc_insertion_point(field_get:tflite.proto.BenchmarkResult.max_memory_kb)
  return _internal_max_memory_kb();
}
inline void BenchmarkResult::set_max_memory_kb(::int32_t value) {
  _internal_set_max_memory_kb(value);
  // @@protoc_insertion_point(field_set:tflite.proto.BenchmarkResult.max_memory_kb)
}
inline ::int32_t BenchmarkResult::_internal_max_memory_kb() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_memory_kb_;
}
inline void BenchmarkResult::_internal_set_max_memory_kb(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.max_memory_kb_ = value;
}

// optional bool ok = 4;
inline bool BenchmarkResult::has_ok() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void BenchmarkResult::clear_ok() {
  _impl_.ok_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool BenchmarkResult::ok() const {
  // @@protoc_insertion_point(field_get:tflite.proto.BenchmarkResult.ok)
  return _internal_ok();
}
inline void BenchmarkResult::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:tflite.proto.BenchmarkResult.ok)
}
inline bool BenchmarkResult::_internal_ok() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ok_;
}
inline void BenchmarkResult::_internal_set_ok(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ok_ = value;
}

// repeated .tflite.proto.BenchmarkMetric metrics = 5;
inline int BenchmarkResult::_internal_metrics_size() const {
  return _internal_metrics().size();
}
inline int BenchmarkResult::metrics_size() const {
  return _internal_metrics_size();
}
inline void BenchmarkResult::clear_metrics() {
  _internal_mutable_metrics()->Clear();
}
inline ::tflite::proto::BenchmarkMetric* BenchmarkResult::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:tflite.proto.BenchmarkResult.metrics)
  return _internal_mutable_metrics()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tflite::proto::BenchmarkMetric >*
BenchmarkResult::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:tflite.proto.BenchmarkResult.metrics)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_metrics();
}
inline const ::tflite::proto::BenchmarkMetric& BenchmarkResult::metrics(int index) const {
  // @@protoc_insertion_point(field_get:tflite.proto.BenchmarkResult.metrics)
    return _internal_metrics().Get(index);
}
inline ::tflite::proto::BenchmarkMetric* BenchmarkResult::add_metrics() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::tflite::proto::BenchmarkMetric* _add = _internal_mutable_metrics()->Add();
  // @@protoc_insertion_point(field_add:tflite.proto.BenchmarkResult.metrics)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::tflite::proto::BenchmarkMetric >&
BenchmarkResult::metrics() const {
  // @@protoc_insertion_point(field_list:tflite.proto.BenchmarkResult.metrics)
  return _internal_metrics();
}
inline const ::google::protobuf::RepeatedPtrField<::tflite::proto::BenchmarkMetric>&
BenchmarkResult::_internal_metrics() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.metrics_;
}
inline ::google::protobuf::RepeatedPtrField<::tflite::proto::BenchmarkMetric>*
BenchmarkResult::_internal_mutable_metrics() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.metrics_;
}

// repeated .tflite.proto.BenchmarkResult.InferenceOutput actual_output = 6;
inline int BenchmarkResult::_internal_actual_output_size() const {
  return _internal_actual_output().size();
}
inline int BenchmarkResult::actual_output_size() const {
  return _internal_actual_output_size();
}
inline void BenchmarkResult::clear_actual_output() {
  _internal_mutable_actual_output()->Clear();
}
inline ::tflite::proto::BenchmarkResult_InferenceOutput* BenchmarkResult::mutable_actual_output(int index) {
  // @@protoc_insertion_point(field_mutable:tflite.proto.BenchmarkResult.actual_output)
  return _internal_mutable_actual_output()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tflite::proto::BenchmarkResult_InferenceOutput >*
BenchmarkResult::mutable_actual_output() {
  // @@protoc_insertion_point(field_mutable_list:tflite.proto.BenchmarkResult.actual_output)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_actual_output();
}
inline const ::tflite::proto::BenchmarkResult_InferenceOutput& BenchmarkResult::actual_output(int index) const {
  // @@protoc_insertion_point(field_get:tflite.proto.BenchmarkResult.actual_output)
    return _internal_actual_output().Get(index);
}
inline ::tflite::proto::BenchmarkResult_InferenceOutput* BenchmarkResult::add_actual_output() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::tflite::proto::BenchmarkResult_InferenceOutput* _add = _internal_mutable_actual_output()->Add();
  // @@protoc_insertion_point(field_add:tflite.proto.BenchmarkResult.actual_output)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::tflite::proto::BenchmarkResult_InferenceOutput >&
BenchmarkResult::actual_output() const {
  // @@protoc_insertion_point(field_list:tflite.proto.BenchmarkResult.actual_output)
  return _internal_actual_output();
}
inline const ::google::protobuf::RepeatedPtrField<::tflite::proto::BenchmarkResult_InferenceOutput>&
BenchmarkResult::_internal_actual_output() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actual_output_;
}
inline ::google::protobuf::RepeatedPtrField<::tflite::proto::BenchmarkResult_InferenceOutput>*
BenchmarkResult::_internal_mutable_actual_output() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.actual_output_;
}

// -------------------------------------------------------------------

// ErrorCode

// optional .tflite.proto.Delegate source = 1;
inline bool ErrorCode::has_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ErrorCode::clear_source() {
  _impl_.source_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::tflite::proto::Delegate ErrorCode::source() const {
  // @@protoc_insertion_point(field_get:tflite.proto.ErrorCode.source)
  return _internal_source();
}
inline void ErrorCode::set_source(::tflite::proto::Delegate value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:tflite.proto.ErrorCode.source)
}
inline ::tflite::proto::Delegate ErrorCode::_internal_source() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tflite::proto::Delegate>(_impl_.source_);
}
inline void ErrorCode::_internal_set_source(::tflite::proto::Delegate value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::tflite::proto::Delegate_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.source_ = value;
}

// optional int32 tflite_error = 2;
inline bool ErrorCode::has_tflite_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ErrorCode::clear_tflite_error() {
  _impl_.tflite_error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t ErrorCode::tflite_error() const {
  // @@protoc_insertion_point(field_get:tflite.proto.ErrorCode.tflite_error)
  return _internal_tflite_error();
}
inline void ErrorCode::set_tflite_error(::int32_t value) {
  _internal_set_tflite_error(value);
  // @@protoc_insertion_point(field_set:tflite.proto.ErrorCode.tflite_error)
}
inline ::int32_t ErrorCode::_internal_tflite_error() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tflite_error_;
}
inline void ErrorCode::_internal_set_tflite_error(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.tflite_error_ = value;
}

// optional int64 underlying_api_error = 3;
inline bool ErrorCode::has_underlying_api_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ErrorCode::clear_underlying_api_error() {
  _impl_.underlying_api_error_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t ErrorCode::underlying_api_error() const {
  // @@protoc_insertion_point(field_get:tflite.proto.ErrorCode.underlying_api_error)
  return _internal_underlying_api_error();
}
inline void ErrorCode::set_underlying_api_error(::int64_t value) {
  _internal_set_underlying_api_error(value);
  // @@protoc_insertion_point(field_set:tflite.proto.ErrorCode.underlying_api_error)
}
inline ::int64_t ErrorCode::_internal_underlying_api_error() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.underlying_api_error_;
}
inline void ErrorCode::_internal_set_underlying_api_error(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.underlying_api_error_ = value;
}

// -------------------------------------------------------------------

// BenchmarkError

// optional .tflite.proto.BenchmarkStage stage = 1;
inline bool BenchmarkError::has_stage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void BenchmarkError::clear_stage() {
  _impl_.stage_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::tflite::proto::BenchmarkStage BenchmarkError::stage() const {
  // @@protoc_insertion_point(field_get:tflite.proto.BenchmarkError.stage)
  return _internal_stage();
}
inline void BenchmarkError::set_stage(::tflite::proto::BenchmarkStage value) {
  _internal_set_stage(value);
  // @@protoc_insertion_point(field_set:tflite.proto.BenchmarkError.stage)
}
inline ::tflite::proto::BenchmarkStage BenchmarkError::_internal_stage() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tflite::proto::BenchmarkStage>(_impl_.stage_);
}
inline void BenchmarkError::_internal_set_stage(::tflite::proto::BenchmarkStage value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::tflite::proto::BenchmarkStage_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.stage_ = value;
}

// optional int32 exit_code = 2;
inline bool BenchmarkError::has_exit_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void BenchmarkError::clear_exit_code() {
  _impl_.exit_code_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t BenchmarkError::exit_code() const {
  // @@protoc_insertion_point(field_get:tflite.proto.BenchmarkError.exit_code)
  return _internal_exit_code();
}
inline void BenchmarkError::set_exit_code(::int32_t value) {
  _internal_set_exit_code(value);
  // @@protoc_insertion_point(field_set:tflite.proto.BenchmarkError.exit_code)
}
inline ::int32_t BenchmarkError::_internal_exit_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.exit_code_;
}
inline void BenchmarkError::_internal_set_exit_code(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.exit_code_ = value;
}

// optional int32 signal = 3;
inline bool BenchmarkError::has_signal() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void BenchmarkError::clear_signal() {
  _impl_.signal_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t BenchmarkError::signal() const {
  // @@protoc_insertion_point(field_get:tflite.proto.BenchmarkError.signal)
  return _internal_signal();
}
inline void BenchmarkError::set_signal(::int32_t value) {
  _internal_set_signal(value);
  // @@protoc_insertion_point(field_set:tflite.proto.BenchmarkError.signal)
}
inline ::int32_t BenchmarkError::_internal_signal() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.signal_;
}
inline void BenchmarkError::_internal_set_signal(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.signal_ = value;
}

// repeated .tflite.proto.ErrorCode error_code = 4;
inline int BenchmarkError::_internal_error_code_size() const {
  return _internal_error_code().size();
}
inline int BenchmarkError::error_code_size() const {
  return _internal_error_code_size();
}
inline void BenchmarkError::clear_error_code() {
  _internal_mutable_error_code()->Clear();
}
inline ::tflite::proto::ErrorCode* BenchmarkError::mutable_error_code(int index) {
  // @@protoc_insertion_point(field_mutable:tflite.proto.BenchmarkError.error_code)
  return _internal_mutable_error_code()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tflite::proto::ErrorCode >*
BenchmarkError::mutable_error_code() {
  // @@protoc_insertion_point(field_mutable_list:tflite.proto.BenchmarkError.error_code)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_error_code();
}
inline const ::tflite::proto::ErrorCode& BenchmarkError::error_code(int index) const {
  // @@protoc_insertion_point(field_get:tflite.proto.BenchmarkError.error_code)
    return _internal_error_code().Get(index);
}
inline ::tflite::proto::ErrorCode* BenchmarkError::add_error_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::tflite::proto::ErrorCode* _add = _internal_mutable_error_code()->Add();
  // @@protoc_insertion_point(field_add:tflite.proto.BenchmarkError.error_code)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::tflite::proto::ErrorCode >&
BenchmarkError::error_code() const {
  // @@protoc_insertion_point(field_list:tflite.proto.BenchmarkError.error_code)
  return _internal_error_code();
}
inline const ::google::protobuf::RepeatedPtrField<::tflite::proto::ErrorCode>&
BenchmarkError::_internal_error_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_code_;
}
inline ::google::protobuf::RepeatedPtrField<::tflite::proto::ErrorCode>*
BenchmarkError::_internal_mutable_error_code() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.error_code_;
}

// optional int32 mini_benchmark_error_code = 5;
inline bool BenchmarkError::has_mini_benchmark_error_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void BenchmarkError::clear_mini_benchmark_error_code() {
  _impl_.mini_benchmark_error_code_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t BenchmarkError::mini_benchmark_error_code() const {
  // @@protoc_insertion_point(field_get:tflite.proto.BenchmarkError.mini_benchmark_error_code)
  return _internal_mini_benchmark_error_code();
}
inline void BenchmarkError::set_mini_benchmark_error_code(::int32_t value) {
  _internal_set_mini_benchmark_error_code(value);
  // @@protoc_insertion_point(field_set:tflite.proto.BenchmarkError.mini_benchmark_error_code)
}
inline ::int32_t BenchmarkError::_internal_mini_benchmark_error_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mini_benchmark_error_code_;
}
inline void BenchmarkError::_internal_set_mini_benchmark_error_code(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.mini_benchmark_error_code_ = value;
}

// -------------------------------------------------------------------

// BenchmarkEvent

// optional .tflite.proto.TFLiteSettings tflite_settings = 1;
inline bool BenchmarkEvent::has_tflite_settings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tflite_settings_ != nullptr);
  return value;
}
inline void BenchmarkEvent::clear_tflite_settings() {
  if (_impl_.tflite_settings_ != nullptr) _impl_.tflite_settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tflite::proto::TFLiteSettings& BenchmarkEvent::_internal_tflite_settings() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tflite::proto::TFLiteSettings* p = _impl_.tflite_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::proto::TFLiteSettings&>(::tflite::proto::_TFLiteSettings_default_instance_);
}
inline const ::tflite::proto::TFLiteSettings& BenchmarkEvent::tflite_settings() const {
  // @@protoc_insertion_point(field_get:tflite.proto.BenchmarkEvent.tflite_settings)
  return _internal_tflite_settings();
}
inline void BenchmarkEvent::unsafe_arena_set_allocated_tflite_settings(::tflite::proto::TFLiteSettings* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tflite_settings_);
  }
  _impl_.tflite_settings_ = reinterpret_cast<::tflite::proto::TFLiteSettings*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.proto.BenchmarkEvent.tflite_settings)
}
inline ::tflite::proto::TFLiteSettings* BenchmarkEvent::release_tflite_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tflite::proto::TFLiteSettings* released = _impl_.tflite_settings_;
  _impl_.tflite_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tflite::proto::TFLiteSettings* BenchmarkEvent::unsafe_arena_release_tflite_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.BenchmarkEvent.tflite_settings)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tflite::proto::TFLiteSettings* temp = _impl_.tflite_settings_;
  _impl_.tflite_settings_ = nullptr;
  return temp;
}
inline ::tflite::proto::TFLiteSettings* BenchmarkEvent::_internal_mutable_tflite_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.tflite_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::proto::TFLiteSettings>(GetArenaForAllocation());
    _impl_.tflite_settings_ = reinterpret_cast<::tflite::proto::TFLiteSettings*>(p);
  }
  return _impl_.tflite_settings_;
}
inline ::tflite::proto::TFLiteSettings* BenchmarkEvent::mutable_tflite_settings() {
  ::tflite::proto::TFLiteSettings* _msg = _internal_mutable_tflite_settings();
  // @@protoc_insertion_point(field_mutable:tflite.proto.BenchmarkEvent.tflite_settings)
  return _msg;
}
inline void BenchmarkEvent::set_allocated_tflite_settings(::tflite::proto::TFLiteSettings* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::tflite::proto::TFLiteSettings*>(_impl_.tflite_settings_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::tflite::proto::TFLiteSettings*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.tflite_settings_ = reinterpret_cast<::tflite::proto::TFLiteSettings*>(value);
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.BenchmarkEvent.tflite_settings)
}

// optional .tflite.proto.BenchmarkEventType event_type = 2;
inline bool BenchmarkEvent::has_event_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void BenchmarkEvent::clear_event_type() {
  _impl_.event_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::tflite::proto::BenchmarkEventType BenchmarkEvent::event_type() const {
  // @@protoc_insertion_point(field_get:tflite.proto.BenchmarkEvent.event_type)
  return _internal_event_type();
}
inline void BenchmarkEvent::set_event_type(::tflite::proto::BenchmarkEventType value) {
  _internal_set_event_type(value);
  // @@protoc_insertion_point(field_set:tflite.proto.BenchmarkEvent.event_type)
}
inline ::tflite::proto::BenchmarkEventType BenchmarkEvent::_internal_event_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tflite::proto::BenchmarkEventType>(_impl_.event_type_);
}
inline void BenchmarkEvent::_internal_set_event_type(::tflite::proto::BenchmarkEventType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::tflite::proto::BenchmarkEventType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.event_type_ = value;
}

// optional .tflite.proto.BenchmarkResult result = 3;
inline bool BenchmarkEvent::has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline void BenchmarkEvent::clear_result() {
  if (_impl_.result_ != nullptr) _impl_.result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::tflite::proto::BenchmarkResult& BenchmarkEvent::_internal_result() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tflite::proto::BenchmarkResult* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::proto::BenchmarkResult&>(::tflite::proto::_BenchmarkResult_default_instance_);
}
inline const ::tflite::proto::BenchmarkResult& BenchmarkEvent::result() const {
  // @@protoc_insertion_point(field_get:tflite.proto.BenchmarkEvent.result)
  return _internal_result();
}
inline void BenchmarkEvent::unsafe_arena_set_allocated_result(::tflite::proto::BenchmarkResult* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = reinterpret_cast<::tflite::proto::BenchmarkResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.proto.BenchmarkEvent.result)
}
inline ::tflite::proto::BenchmarkResult* BenchmarkEvent::release_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tflite::proto::BenchmarkResult* released = _impl_.result_;
  _impl_.result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tflite::proto::BenchmarkResult* BenchmarkEvent::unsafe_arena_release_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.BenchmarkEvent.result)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tflite::proto::BenchmarkResult* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::tflite::proto::BenchmarkResult* BenchmarkEvent::_internal_mutable_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.result_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::proto::BenchmarkResult>(GetArenaForAllocation());
    _impl_.result_ = reinterpret_cast<::tflite::proto::BenchmarkResult*>(p);
  }
  return _impl_.result_;
}
inline ::tflite::proto::BenchmarkResult* BenchmarkEvent::mutable_result() {
  ::tflite::proto::BenchmarkResult* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:tflite.proto.BenchmarkEvent.result)
  return _msg;
}
inline void BenchmarkEvent::set_allocated_result(::tflite::proto::BenchmarkResult* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::tflite::proto::BenchmarkResult*>(_impl_.result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::tflite::proto::BenchmarkResult*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.result_ = reinterpret_cast<::tflite::proto::BenchmarkResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.BenchmarkEvent.result)
}

// optional .tflite.proto.BenchmarkError error = 4;
inline bool BenchmarkEvent::has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.error_ != nullptr);
  return value;
}
inline void BenchmarkEvent::clear_error() {
  if (_impl_.error_ != nullptr) _impl_.error_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::tflite::proto::BenchmarkError& BenchmarkEvent::_internal_error() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tflite::proto::BenchmarkError* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::proto::BenchmarkError&>(::tflite::proto::_BenchmarkError_default_instance_);
}
inline const ::tflite::proto::BenchmarkError& BenchmarkEvent::error() const {
  // @@protoc_insertion_point(field_get:tflite.proto.BenchmarkEvent.error)
  return _internal_error();
}
inline void BenchmarkEvent::unsafe_arena_set_allocated_error(::tflite::proto::BenchmarkError* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = reinterpret_cast<::tflite::proto::BenchmarkError*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.proto.BenchmarkEvent.error)
}
inline ::tflite::proto::BenchmarkError* BenchmarkEvent::release_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tflite::proto::BenchmarkError* released = _impl_.error_;
  _impl_.error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tflite::proto::BenchmarkError* BenchmarkEvent::unsafe_arena_release_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.BenchmarkEvent.error)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tflite::proto::BenchmarkError* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::tflite::proto::BenchmarkError* BenchmarkEvent::_internal_mutable_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.error_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::proto::BenchmarkError>(GetArenaForAllocation());
    _impl_.error_ = reinterpret_cast<::tflite::proto::BenchmarkError*>(p);
  }
  return _impl_.error_;
}
inline ::tflite::proto::BenchmarkError* BenchmarkEvent::mutable_error() {
  ::tflite::proto::BenchmarkError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:tflite.proto.BenchmarkEvent.error)
  return _msg;
}
inline void BenchmarkEvent::set_allocated_error(::tflite::proto::BenchmarkError* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::tflite::proto::BenchmarkError*>(_impl_.error_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::tflite::proto::BenchmarkError*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.error_ = reinterpret_cast<::tflite::proto::BenchmarkError*>(value);
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.BenchmarkEvent.error)
}

// optional int64 boottime_us = 5;
inline bool BenchmarkEvent::has_boottime_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void BenchmarkEvent::clear_boottime_us() {
  _impl_.boottime_us_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t BenchmarkEvent::boottime_us() const {
  // @@protoc_insertion_point(field_get:tflite.proto.BenchmarkEvent.boottime_us)
  return _internal_boottime_us();
}
inline void BenchmarkEvent::set_boottime_us(::int64_t value) {
  _internal_set_boottime_us(value);
  // @@protoc_insertion_point(field_set:tflite.proto.BenchmarkEvent.boottime_us)
}
inline ::int64_t BenchmarkEvent::_internal_boottime_us() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.boottime_us_;
}
inline void BenchmarkEvent::_internal_set_boottime_us(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.boottime_us_ = value;
}

// optional int64 wallclock_us = 6;
inline bool BenchmarkEvent::has_wallclock_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void BenchmarkEvent::clear_wallclock_us() {
  _impl_.wallclock_us_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t BenchmarkEvent::wallclock_us() const {
  // @@protoc_insertion_point(field_get:tflite.proto.BenchmarkEvent.wallclock_us)
  return _internal_wallclock_us();
}
inline void BenchmarkEvent::set_wallclock_us(::int64_t value) {
  _internal_set_wallclock_us(value);
  // @@protoc_insertion_point(field_set:tflite.proto.BenchmarkEvent.wallclock_us)
}
inline ::int64_t BenchmarkEvent::_internal_wallclock_us() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.wallclock_us_;
}
inline void BenchmarkEvent::_internal_set_wallclock_us(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.wallclock_us_ = value;
}

// -------------------------------------------------------------------

// BestAccelerationDecision

// optional int32 number_of_source_events = 1;
inline bool BestAccelerationDecision::has_number_of_source_events() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void BestAccelerationDecision::clear_number_of_source_events() {
  _impl_.number_of_source_events_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t BestAccelerationDecision::number_of_source_events() const {
  // @@protoc_insertion_point(field_get:tflite.proto.BestAccelerationDecision.number_of_source_events)
  return _internal_number_of_source_events();
}
inline void BestAccelerationDecision::set_number_of_source_events(::int32_t value) {
  _internal_set_number_of_source_events(value);
  // @@protoc_insertion_point(field_set:tflite.proto.BestAccelerationDecision.number_of_source_events)
}
inline ::int32_t BestAccelerationDecision::_internal_number_of_source_events() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.number_of_source_events_;
}
inline void BestAccelerationDecision::_internal_set_number_of_source_events(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.number_of_source_events_ = value;
}

// optional .tflite.proto.BenchmarkEvent min_latency_event = 2;
inline bool BestAccelerationDecision::has_min_latency_event() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.min_latency_event_ != nullptr);
  return value;
}
inline void BestAccelerationDecision::clear_min_latency_event() {
  if (_impl_.min_latency_event_ != nullptr) _impl_.min_latency_event_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tflite::proto::BenchmarkEvent& BestAccelerationDecision::_internal_min_latency_event() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tflite::proto::BenchmarkEvent* p = _impl_.min_latency_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::proto::BenchmarkEvent&>(::tflite::proto::_BenchmarkEvent_default_instance_);
}
inline const ::tflite::proto::BenchmarkEvent& BestAccelerationDecision::min_latency_event() const {
  // @@protoc_insertion_point(field_get:tflite.proto.BestAccelerationDecision.min_latency_event)
  return _internal_min_latency_event();
}
inline void BestAccelerationDecision::unsafe_arena_set_allocated_min_latency_event(::tflite::proto::BenchmarkEvent* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.min_latency_event_);
  }
  _impl_.min_latency_event_ = reinterpret_cast<::tflite::proto::BenchmarkEvent*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.proto.BestAccelerationDecision.min_latency_event)
}
inline ::tflite::proto::BenchmarkEvent* BestAccelerationDecision::release_min_latency_event() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tflite::proto::BenchmarkEvent* released = _impl_.min_latency_event_;
  _impl_.min_latency_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tflite::proto::BenchmarkEvent* BestAccelerationDecision::unsafe_arena_release_min_latency_event() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.BestAccelerationDecision.min_latency_event)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tflite::proto::BenchmarkEvent* temp = _impl_.min_latency_event_;
  _impl_.min_latency_event_ = nullptr;
  return temp;
}
inline ::tflite::proto::BenchmarkEvent* BestAccelerationDecision::_internal_mutable_min_latency_event() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.min_latency_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::proto::BenchmarkEvent>(GetArenaForAllocation());
    _impl_.min_latency_event_ = reinterpret_cast<::tflite::proto::BenchmarkEvent*>(p);
  }
  return _impl_.min_latency_event_;
}
inline ::tflite::proto::BenchmarkEvent* BestAccelerationDecision::mutable_min_latency_event() {
  ::tflite::proto::BenchmarkEvent* _msg = _internal_mutable_min_latency_event();
  // @@protoc_insertion_point(field_mutable:tflite.proto.BestAccelerationDecision.min_latency_event)
  return _msg;
}
inline void BestAccelerationDecision::set_allocated_min_latency_event(::tflite::proto::BenchmarkEvent* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::tflite::proto::BenchmarkEvent*>(_impl_.min_latency_event_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::tflite::proto::BenchmarkEvent*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.min_latency_event_ = reinterpret_cast<::tflite::proto::BenchmarkEvent*>(value);
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.BestAccelerationDecision.min_latency_event)
}

// optional int64 min_inference_time_us = 3;
inline bool BestAccelerationDecision::has_min_inference_time_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void BestAccelerationDecision::clear_min_inference_time_us() {
  _impl_.min_inference_time_us_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t BestAccelerationDecision::min_inference_time_us() const {
  // @@protoc_insertion_point(field_get:tflite.proto.BestAccelerationDecision.min_inference_time_us)
  return _internal_min_inference_time_us();
}
inline void BestAccelerationDecision::set_min_inference_time_us(::int64_t value) {
  _internal_set_min_inference_time_us(value);
  // @@protoc_insertion_point(field_set:tflite.proto.BestAccelerationDecision.min_inference_time_us)
}
inline ::int64_t BestAccelerationDecision::_internal_min_inference_time_us() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.min_inference_time_us_;
}
inline void BestAccelerationDecision::_internal_set_min_inference_time_us(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.min_inference_time_us_ = value;
}

// -------------------------------------------------------------------

// BenchmarkInitializationFailure

// optional int32 initialization_status = 1;
inline bool BenchmarkInitializationFailure::has_initialization_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void BenchmarkInitializationFailure::clear_initialization_status() {
  _impl_.initialization_status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t BenchmarkInitializationFailure::initialization_status() const {
  // @@protoc_insertion_point(field_get:tflite.proto.BenchmarkInitializationFailure.initialization_status)
  return _internal_initialization_status();
}
inline void BenchmarkInitializationFailure::set_initialization_status(::int32_t value) {
  _internal_set_initialization_status(value);
  // @@protoc_insertion_point(field_set:tflite.proto.BenchmarkInitializationFailure.initialization_status)
}
inline ::int32_t BenchmarkInitializationFailure::_internal_initialization_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.initialization_status_;
}
inline void BenchmarkInitializationFailure::_internal_set_initialization_status(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.initialization_status_ = value;
}

// -------------------------------------------------------------------

// MiniBenchmarkEvent

// optional bool is_log_flushing_event = 1;
inline bool MiniBenchmarkEvent::has_is_log_flushing_event() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void MiniBenchmarkEvent::clear_is_log_flushing_event() {
  _impl_.is_log_flushing_event_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool MiniBenchmarkEvent::is_log_flushing_event() const {
  // @@protoc_insertion_point(field_get:tflite.proto.MiniBenchmarkEvent.is_log_flushing_event)
  return _internal_is_log_flushing_event();
}
inline void MiniBenchmarkEvent::set_is_log_flushing_event(bool value) {
  _internal_set_is_log_flushing_event(value);
  // @@protoc_insertion_point(field_set:tflite.proto.MiniBenchmarkEvent.is_log_flushing_event)
}
inline bool MiniBenchmarkEvent::_internal_is_log_flushing_event() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_log_flushing_event_;
}
inline void MiniBenchmarkEvent::_internal_set_is_log_flushing_event(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.is_log_flushing_event_ = value;
}

// optional .tflite.proto.BestAccelerationDecision best_acceleration_decision = 2;
inline bool MiniBenchmarkEvent::has_best_acceleration_decision() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.best_acceleration_decision_ != nullptr);
  return value;
}
inline void MiniBenchmarkEvent::clear_best_acceleration_decision() {
  if (_impl_.best_acceleration_decision_ != nullptr) _impl_.best_acceleration_decision_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tflite::proto::BestAccelerationDecision& MiniBenchmarkEvent::_internal_best_acceleration_decision() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tflite::proto::BestAccelerationDecision* p = _impl_.best_acceleration_decision_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::proto::BestAccelerationDecision&>(::tflite::proto::_BestAccelerationDecision_default_instance_);
}
inline const ::tflite::proto::BestAccelerationDecision& MiniBenchmarkEvent::best_acceleration_decision() const {
  // @@protoc_insertion_point(field_get:tflite.proto.MiniBenchmarkEvent.best_acceleration_decision)
  return _internal_best_acceleration_decision();
}
inline void MiniBenchmarkEvent::unsafe_arena_set_allocated_best_acceleration_decision(::tflite::proto::BestAccelerationDecision* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.best_acceleration_decision_);
  }
  _impl_.best_acceleration_decision_ = reinterpret_cast<::tflite::proto::BestAccelerationDecision*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.proto.MiniBenchmarkEvent.best_acceleration_decision)
}
inline ::tflite::proto::BestAccelerationDecision* MiniBenchmarkEvent::release_best_acceleration_decision() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tflite::proto::BestAccelerationDecision* released = _impl_.best_acceleration_decision_;
  _impl_.best_acceleration_decision_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tflite::proto::BestAccelerationDecision* MiniBenchmarkEvent::unsafe_arena_release_best_acceleration_decision() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.MiniBenchmarkEvent.best_acceleration_decision)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tflite::proto::BestAccelerationDecision* temp = _impl_.best_acceleration_decision_;
  _impl_.best_acceleration_decision_ = nullptr;
  return temp;
}
inline ::tflite::proto::BestAccelerationDecision* MiniBenchmarkEvent::_internal_mutable_best_acceleration_decision() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.best_acceleration_decision_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::proto::BestAccelerationDecision>(GetArenaForAllocation());
    _impl_.best_acceleration_decision_ = reinterpret_cast<::tflite::proto::BestAccelerationDecision*>(p);
  }
  return _impl_.best_acceleration_decision_;
}
inline ::tflite::proto::BestAccelerationDecision* MiniBenchmarkEvent::mutable_best_acceleration_decision() {
  ::tflite::proto::BestAccelerationDecision* _msg = _internal_mutable_best_acceleration_decision();
  // @@protoc_insertion_point(field_mutable:tflite.proto.MiniBenchmarkEvent.best_acceleration_decision)
  return _msg;
}
inline void MiniBenchmarkEvent::set_allocated_best_acceleration_decision(::tflite::proto::BestAccelerationDecision* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::tflite::proto::BestAccelerationDecision*>(_impl_.best_acceleration_decision_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::tflite::proto::BestAccelerationDecision*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.best_acceleration_decision_ = reinterpret_cast<::tflite::proto::BestAccelerationDecision*>(value);
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.MiniBenchmarkEvent.best_acceleration_decision)
}

// optional .tflite.proto.BenchmarkInitializationFailure initialization_failure = 3;
inline bool MiniBenchmarkEvent::has_initialization_failure() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.initialization_failure_ != nullptr);
  return value;
}
inline void MiniBenchmarkEvent::clear_initialization_failure() {
  if (_impl_.initialization_failure_ != nullptr) _impl_.initialization_failure_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::tflite::proto::BenchmarkInitializationFailure& MiniBenchmarkEvent::_internal_initialization_failure() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tflite::proto::BenchmarkInitializationFailure* p = _impl_.initialization_failure_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::proto::BenchmarkInitializationFailure&>(::tflite::proto::_BenchmarkInitializationFailure_default_instance_);
}
inline const ::tflite::proto::BenchmarkInitializationFailure& MiniBenchmarkEvent::initialization_failure() const {
  // @@protoc_insertion_point(field_get:tflite.proto.MiniBenchmarkEvent.initialization_failure)
  return _internal_initialization_failure();
}
inline void MiniBenchmarkEvent::unsafe_arena_set_allocated_initialization_failure(::tflite::proto::BenchmarkInitializationFailure* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.initialization_failure_);
  }
  _impl_.initialization_failure_ = reinterpret_cast<::tflite::proto::BenchmarkInitializationFailure*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.proto.MiniBenchmarkEvent.initialization_failure)
}
inline ::tflite::proto::BenchmarkInitializationFailure* MiniBenchmarkEvent::release_initialization_failure() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tflite::proto::BenchmarkInitializationFailure* released = _impl_.initialization_failure_;
  _impl_.initialization_failure_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tflite::proto::BenchmarkInitializationFailure* MiniBenchmarkEvent::unsafe_arena_release_initialization_failure() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.MiniBenchmarkEvent.initialization_failure)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tflite::proto::BenchmarkInitializationFailure* temp = _impl_.initialization_failure_;
  _impl_.initialization_failure_ = nullptr;
  return temp;
}
inline ::tflite::proto::BenchmarkInitializationFailure* MiniBenchmarkEvent::_internal_mutable_initialization_failure() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.initialization_failure_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::proto::BenchmarkInitializationFailure>(GetArenaForAllocation());
    _impl_.initialization_failure_ = reinterpret_cast<::tflite::proto::BenchmarkInitializationFailure*>(p);
  }
  return _impl_.initialization_failure_;
}
inline ::tflite::proto::BenchmarkInitializationFailure* MiniBenchmarkEvent::mutable_initialization_failure() {
  ::tflite::proto::BenchmarkInitializationFailure* _msg = _internal_mutable_initialization_failure();
  // @@protoc_insertion_point(field_mutable:tflite.proto.MiniBenchmarkEvent.initialization_failure)
  return _msg;
}
inline void MiniBenchmarkEvent::set_allocated_initialization_failure(::tflite::proto::BenchmarkInitializationFailure* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::tflite::proto::BenchmarkInitializationFailure*>(_impl_.initialization_failure_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::tflite::proto::BenchmarkInitializationFailure*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.initialization_failure_ = reinterpret_cast<::tflite::proto::BenchmarkInitializationFailure*>(value);
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.MiniBenchmarkEvent.initialization_failure)
}

// optional .tflite.proto.BenchmarkEvent benchmark_event = 4;
inline bool MiniBenchmarkEvent::has_benchmark_event() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.benchmark_event_ != nullptr);
  return value;
}
inline void MiniBenchmarkEvent::clear_benchmark_event() {
  if (_impl_.benchmark_event_ != nullptr) _impl_.benchmark_event_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::tflite::proto::BenchmarkEvent& MiniBenchmarkEvent::_internal_benchmark_event() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tflite::proto::BenchmarkEvent* p = _impl_.benchmark_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::proto::BenchmarkEvent&>(::tflite::proto::_BenchmarkEvent_default_instance_);
}
inline const ::tflite::proto::BenchmarkEvent& MiniBenchmarkEvent::benchmark_event() const {
  // @@protoc_insertion_point(field_get:tflite.proto.MiniBenchmarkEvent.benchmark_event)
  return _internal_benchmark_event();
}
inline void MiniBenchmarkEvent::unsafe_arena_set_allocated_benchmark_event(::tflite::proto::BenchmarkEvent* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.benchmark_event_);
  }
  _impl_.benchmark_event_ = reinterpret_cast<::tflite::proto::BenchmarkEvent*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.proto.MiniBenchmarkEvent.benchmark_event)
}
inline ::tflite::proto::BenchmarkEvent* MiniBenchmarkEvent::release_benchmark_event() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tflite::proto::BenchmarkEvent* released = _impl_.benchmark_event_;
  _impl_.benchmark_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tflite::proto::BenchmarkEvent* MiniBenchmarkEvent::unsafe_arena_release_benchmark_event() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.MiniBenchmarkEvent.benchmark_event)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tflite::proto::BenchmarkEvent* temp = _impl_.benchmark_event_;
  _impl_.benchmark_event_ = nullptr;
  return temp;
}
inline ::tflite::proto::BenchmarkEvent* MiniBenchmarkEvent::_internal_mutable_benchmark_event() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.benchmark_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::proto::BenchmarkEvent>(GetArenaForAllocation());
    _impl_.benchmark_event_ = reinterpret_cast<::tflite::proto::BenchmarkEvent*>(p);
  }
  return _impl_.benchmark_event_;
}
inline ::tflite::proto::BenchmarkEvent* MiniBenchmarkEvent::mutable_benchmark_event() {
  ::tflite::proto::BenchmarkEvent* _msg = _internal_mutable_benchmark_event();
  // @@protoc_insertion_point(field_mutable:tflite.proto.MiniBenchmarkEvent.benchmark_event)
  return _msg;
}
inline void MiniBenchmarkEvent::set_allocated_benchmark_event(::tflite::proto::BenchmarkEvent* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::tflite::proto::BenchmarkEvent*>(_impl_.benchmark_event_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::tflite::proto::BenchmarkEvent*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.benchmark_event_ = reinterpret_cast<::tflite::proto::BenchmarkEvent*>(value);
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.MiniBenchmarkEvent.benchmark_event)
}

// -------------------------------------------------------------------

// ModelFile

// optional string filename = 1;
inline bool ModelFile::has_filename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ModelFile::clear_filename() {
  _impl_.filename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ModelFile::filename() const {
  // @@protoc_insertion_point(field_get:tflite.proto.ModelFile.filename)
  return _internal_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ModelFile::set_filename(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.filename_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.proto.ModelFile.filename)
}
inline std::string* ModelFile::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:tflite.proto.ModelFile.filename)
  return _s;
}
inline const std::string& ModelFile::_internal_filename() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.filename_.Get();
}
inline void ModelFile::_internal_set_filename(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.filename_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelFile::_internal_mutable_filename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.filename_.Mutable( GetArenaForAllocation());
}
inline std::string* ModelFile::release_filename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.ModelFile.filename)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.filename_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ModelFile::set_allocated_filename(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.filename_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.filename_.IsDefault()) {
          _impl_.filename_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.ModelFile.filename)
}

// optional int64 fd = 2;
inline bool ModelFile::has_fd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ModelFile::clear_fd() {
  _impl_.fd_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t ModelFile::fd() const {
  // @@protoc_insertion_point(field_get:tflite.proto.ModelFile.fd)
  return _internal_fd();
}
inline void ModelFile::set_fd(::int64_t value) {
  _internal_set_fd(value);
  // @@protoc_insertion_point(field_set:tflite.proto.ModelFile.fd)
}
inline ::int64_t ModelFile::_internal_fd() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.fd_;
}
inline void ModelFile::_internal_set_fd(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.fd_ = value;
}

// optional int64 offset = 3;
inline bool ModelFile::has_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ModelFile::clear_offset() {
  _impl_.offset_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t ModelFile::offset() const {
  // @@protoc_insertion_point(field_get:tflite.proto.ModelFile.offset)
  return _internal_offset();
}
inline void ModelFile::set_offset(::int64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:tflite.proto.ModelFile.offset)
}
inline ::int64_t ModelFile::_internal_offset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.offset_;
}
inline void ModelFile::_internal_set_offset(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.offset_ = value;
}

// optional int64 length = 4;
inline bool ModelFile::has_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ModelFile::clear_length() {
  _impl_.length_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t ModelFile::length() const {
  // @@protoc_insertion_point(field_get:tflite.proto.ModelFile.length)
  return _internal_length();
}
inline void ModelFile::set_length(::int64_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:tflite.proto.ModelFile.length)
}
inline ::int64_t ModelFile::_internal_length() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.length_;
}
inline void ModelFile::_internal_set_length(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.length_ = value;
}

// optional .tflite.proto.ModelIdGroup model_id_group = 5;
inline bool ModelFile::has_model_id_group() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.model_id_group_ != nullptr);
  return value;
}
inline void ModelFile::clear_model_id_group() {
  if (_impl_.model_id_group_ != nullptr) _impl_.model_id_group_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::tflite::proto::ModelIdGroup& ModelFile::_internal_model_id_group() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tflite::proto::ModelIdGroup* p = _impl_.model_id_group_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::proto::ModelIdGroup&>(::tflite::proto::_ModelIdGroup_default_instance_);
}
inline const ::tflite::proto::ModelIdGroup& ModelFile::model_id_group() const {
  // @@protoc_insertion_point(field_get:tflite.proto.ModelFile.model_id_group)
  return _internal_model_id_group();
}
inline void ModelFile::unsafe_arena_set_allocated_model_id_group(::tflite::proto::ModelIdGroup* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.model_id_group_);
  }
  _impl_.model_id_group_ = reinterpret_cast<::tflite::proto::ModelIdGroup*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.proto.ModelFile.model_id_group)
}
inline ::tflite::proto::ModelIdGroup* ModelFile::release_model_id_group() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tflite::proto::ModelIdGroup* released = _impl_.model_id_group_;
  _impl_.model_id_group_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tflite::proto::ModelIdGroup* ModelFile::unsafe_arena_release_model_id_group() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.ModelFile.model_id_group)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tflite::proto::ModelIdGroup* temp = _impl_.model_id_group_;
  _impl_.model_id_group_ = nullptr;
  return temp;
}
inline ::tflite::proto::ModelIdGroup* ModelFile::_internal_mutable_model_id_group() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.model_id_group_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::proto::ModelIdGroup>(GetArenaForAllocation());
    _impl_.model_id_group_ = reinterpret_cast<::tflite::proto::ModelIdGroup*>(p);
  }
  return _impl_.model_id_group_;
}
inline ::tflite::proto::ModelIdGroup* ModelFile::mutable_model_id_group() {
  ::tflite::proto::ModelIdGroup* _msg = _internal_mutable_model_id_group();
  // @@protoc_insertion_point(field_mutable:tflite.proto.ModelFile.model_id_group)
  return _msg;
}
inline void ModelFile::set_allocated_model_id_group(::tflite::proto::ModelIdGroup* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::tflite::proto::ModelIdGroup*>(_impl_.model_id_group_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::tflite::proto::ModelIdGroup*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.model_id_group_ = reinterpret_cast<::tflite::proto::ModelIdGroup*>(value);
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.ModelFile.model_id_group)
}

// optional int64 buffer_handle = 6;
inline bool ModelFile::has_buffer_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ModelFile::clear_buffer_handle() {
  _impl_.buffer_handle_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int64_t ModelFile::buffer_handle() const {
  // @@protoc_insertion_point(field_get:tflite.proto.ModelFile.buffer_handle)
  return _internal_buffer_handle();
}
inline void ModelFile::set_buffer_handle(::int64_t value) {
  _internal_set_buffer_handle(value);
  // @@protoc_insertion_point(field_set:tflite.proto.ModelFile.buffer_handle)
}
inline ::int64_t ModelFile::_internal_buffer_handle() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.buffer_handle_;
}
inline void ModelFile::_internal_set_buffer_handle(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.buffer_handle_ = value;
}

// -------------------------------------------------------------------

// ModelIdGroup

// optional string model_namespace = 1;
inline bool ModelIdGroup::has_model_namespace() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ModelIdGroup::clear_model_namespace() {
  _impl_.model_namespace_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ModelIdGroup::model_namespace() const {
  // @@protoc_insertion_point(field_get:tflite.proto.ModelIdGroup.model_namespace)
  return _internal_model_namespace();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ModelIdGroup::set_model_namespace(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.model_namespace_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.proto.ModelIdGroup.model_namespace)
}
inline std::string* ModelIdGroup::mutable_model_namespace() {
  std::string* _s = _internal_mutable_model_namespace();
  // @@protoc_insertion_point(field_mutable:tflite.proto.ModelIdGroup.model_namespace)
  return _s;
}
inline const std::string& ModelIdGroup::_internal_model_namespace() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.model_namespace_.Get();
}
inline void ModelIdGroup::_internal_set_model_namespace(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.model_namespace_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelIdGroup::_internal_mutable_model_namespace() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.model_namespace_.Mutable( GetArenaForAllocation());
}
inline std::string* ModelIdGroup::release_model_namespace() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.ModelIdGroup.model_namespace)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.model_namespace_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_namespace_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ModelIdGroup::set_allocated_model_namespace(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.model_namespace_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.model_namespace_.IsDefault()) {
          _impl_.model_namespace_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.ModelIdGroup.model_namespace)
}

// optional string model_id = 2;
inline bool ModelIdGroup::has_model_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ModelIdGroup::clear_model_id() {
  _impl_.model_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ModelIdGroup::model_id() const {
  // @@protoc_insertion_point(field_get:tflite.proto.ModelIdGroup.model_id)
  return _internal_model_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ModelIdGroup::set_model_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.model_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.proto.ModelIdGroup.model_id)
}
inline std::string* ModelIdGroup::mutable_model_id() {
  std::string* _s = _internal_mutable_model_id();
  // @@protoc_insertion_point(field_mutable:tflite.proto.ModelIdGroup.model_id)
  return _s;
}
inline const std::string& ModelIdGroup::_internal_model_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.model_id_.Get();
}
inline void ModelIdGroup::_internal_set_model_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.model_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelIdGroup::_internal_mutable_model_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.model_id_.Mutable( GetArenaForAllocation());
}
inline std::string* ModelIdGroup::release_model_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.ModelIdGroup.model_id)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.model_id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ModelIdGroup::set_allocated_model_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.model_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.model_id_.IsDefault()) {
          _impl_.model_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.ModelIdGroup.model_id)
}

// -------------------------------------------------------------------

// BenchmarkStoragePaths

// optional string storage_file_path = 1;
inline bool BenchmarkStoragePaths::has_storage_file_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void BenchmarkStoragePaths::clear_storage_file_path() {
  _impl_.storage_file_path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BenchmarkStoragePaths::storage_file_path() const {
  // @@protoc_insertion_point(field_get:tflite.proto.BenchmarkStoragePaths.storage_file_path)
  return _internal_storage_file_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BenchmarkStoragePaths::set_storage_file_path(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.storage_file_path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.proto.BenchmarkStoragePaths.storage_file_path)
}
inline std::string* BenchmarkStoragePaths::mutable_storage_file_path() {
  std::string* _s = _internal_mutable_storage_file_path();
  // @@protoc_insertion_point(field_mutable:tflite.proto.BenchmarkStoragePaths.storage_file_path)
  return _s;
}
inline const std::string& BenchmarkStoragePaths::_internal_storage_file_path() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.storage_file_path_.Get();
}
inline void BenchmarkStoragePaths::_internal_set_storage_file_path(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.storage_file_path_.Set(value, GetArenaForAllocation());
}
inline std::string* BenchmarkStoragePaths::_internal_mutable_storage_file_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.storage_file_path_.Mutable( GetArenaForAllocation());
}
inline std::string* BenchmarkStoragePaths::release_storage_file_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.BenchmarkStoragePaths.storage_file_path)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.storage_file_path_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.storage_file_path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void BenchmarkStoragePaths::set_allocated_storage_file_path(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.storage_file_path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.storage_file_path_.IsDefault()) {
          _impl_.storage_file_path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.BenchmarkStoragePaths.storage_file_path)
}

// optional string data_directory_path = 2;
inline bool BenchmarkStoragePaths::has_data_directory_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void BenchmarkStoragePaths::clear_data_directory_path() {
  _impl_.data_directory_path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BenchmarkStoragePaths::data_directory_path() const {
  // @@protoc_insertion_point(field_get:tflite.proto.BenchmarkStoragePaths.data_directory_path)
  return _internal_data_directory_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BenchmarkStoragePaths::set_data_directory_path(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.data_directory_path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.proto.BenchmarkStoragePaths.data_directory_path)
}
inline std::string* BenchmarkStoragePaths::mutable_data_directory_path() {
  std::string* _s = _internal_mutable_data_directory_path();
  // @@protoc_insertion_point(field_mutable:tflite.proto.BenchmarkStoragePaths.data_directory_path)
  return _s;
}
inline const std::string& BenchmarkStoragePaths::_internal_data_directory_path() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_directory_path_.Get();
}
inline void BenchmarkStoragePaths::_internal_set_data_directory_path(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.data_directory_path_.Set(value, GetArenaForAllocation());
}
inline std::string* BenchmarkStoragePaths::_internal_mutable_data_directory_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.data_directory_path_.Mutable( GetArenaForAllocation());
}
inline std::string* BenchmarkStoragePaths::release_data_directory_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.BenchmarkStoragePaths.data_directory_path)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.data_directory_path_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_directory_path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void BenchmarkStoragePaths::set_allocated_data_directory_path(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.data_directory_path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_directory_path_.IsDefault()) {
          _impl_.data_directory_path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.BenchmarkStoragePaths.data_directory_path)
}

// -------------------------------------------------------------------

// ValidationSettings

// optional int64 per_test_timeout_ms = 1;
inline bool ValidationSettings::has_per_test_timeout_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ValidationSettings::clear_per_test_timeout_ms() {
  _impl_.per_test_timeout_ms_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t ValidationSettings::per_test_timeout_ms() const {
  // @@protoc_insertion_point(field_get:tflite.proto.ValidationSettings.per_test_timeout_ms)
  return _internal_per_test_timeout_ms();
}
inline void ValidationSettings::set_per_test_timeout_ms(::int64_t value) {
  _internal_set_per_test_timeout_ms(value);
  // @@protoc_insertion_point(field_set:tflite.proto.ValidationSettings.per_test_timeout_ms)
}
inline ::int64_t ValidationSettings::_internal_per_test_timeout_ms() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.per_test_timeout_ms_;
}
inline void ValidationSettings::_internal_set_per_test_timeout_ms(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.per_test_timeout_ms_ = value;
}

// -------------------------------------------------------------------

// MinibenchmarkSettings

// repeated .tflite.proto.TFLiteSettings settings_to_test = 1;
inline int MinibenchmarkSettings::_internal_settings_to_test_size() const {
  return _internal_settings_to_test().size();
}
inline int MinibenchmarkSettings::settings_to_test_size() const {
  return _internal_settings_to_test_size();
}
inline void MinibenchmarkSettings::clear_settings_to_test() {
  _internal_mutable_settings_to_test()->Clear();
}
inline ::tflite::proto::TFLiteSettings* MinibenchmarkSettings::mutable_settings_to_test(int index) {
  // @@protoc_insertion_point(field_mutable:tflite.proto.MinibenchmarkSettings.settings_to_test)
  return _internal_mutable_settings_to_test()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tflite::proto::TFLiteSettings >*
MinibenchmarkSettings::mutable_settings_to_test() {
  // @@protoc_insertion_point(field_mutable_list:tflite.proto.MinibenchmarkSettings.settings_to_test)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_settings_to_test();
}
inline const ::tflite::proto::TFLiteSettings& MinibenchmarkSettings::settings_to_test(int index) const {
  // @@protoc_insertion_point(field_get:tflite.proto.MinibenchmarkSettings.settings_to_test)
    return _internal_settings_to_test().Get(index);
}
inline ::tflite::proto::TFLiteSettings* MinibenchmarkSettings::add_settings_to_test() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::tflite::proto::TFLiteSettings* _add = _internal_mutable_settings_to_test()->Add();
  // @@protoc_insertion_point(field_add:tflite.proto.MinibenchmarkSettings.settings_to_test)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::tflite::proto::TFLiteSettings >&
MinibenchmarkSettings::settings_to_test() const {
  // @@protoc_insertion_point(field_list:tflite.proto.MinibenchmarkSettings.settings_to_test)
  return _internal_settings_to_test();
}
inline const ::google::protobuf::RepeatedPtrField<::tflite::proto::TFLiteSettings>&
MinibenchmarkSettings::_internal_settings_to_test() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.settings_to_test_;
}
inline ::google::protobuf::RepeatedPtrField<::tflite::proto::TFLiteSettings>*
MinibenchmarkSettings::_internal_mutable_settings_to_test() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.settings_to_test_;
}

// optional .tflite.proto.ModelFile model_file = 2;
inline bool MinibenchmarkSettings::has_model_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.model_file_ != nullptr);
  return value;
}
inline void MinibenchmarkSettings::clear_model_file() {
  if (_impl_.model_file_ != nullptr) _impl_.model_file_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tflite::proto::ModelFile& MinibenchmarkSettings::_internal_model_file() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tflite::proto::ModelFile* p = _impl_.model_file_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::proto::ModelFile&>(::tflite::proto::_ModelFile_default_instance_);
}
inline const ::tflite::proto::ModelFile& MinibenchmarkSettings::model_file() const {
  // @@protoc_insertion_point(field_get:tflite.proto.MinibenchmarkSettings.model_file)
  return _internal_model_file();
}
inline void MinibenchmarkSettings::unsafe_arena_set_allocated_model_file(::tflite::proto::ModelFile* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.model_file_);
  }
  _impl_.model_file_ = reinterpret_cast<::tflite::proto::ModelFile*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.proto.MinibenchmarkSettings.model_file)
}
inline ::tflite::proto::ModelFile* MinibenchmarkSettings::release_model_file() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tflite::proto::ModelFile* released = _impl_.model_file_;
  _impl_.model_file_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tflite::proto::ModelFile* MinibenchmarkSettings::unsafe_arena_release_model_file() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.MinibenchmarkSettings.model_file)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tflite::proto::ModelFile* temp = _impl_.model_file_;
  _impl_.model_file_ = nullptr;
  return temp;
}
inline ::tflite::proto::ModelFile* MinibenchmarkSettings::_internal_mutable_model_file() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.model_file_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::proto::ModelFile>(GetArenaForAllocation());
    _impl_.model_file_ = reinterpret_cast<::tflite::proto::ModelFile*>(p);
  }
  return _impl_.model_file_;
}
inline ::tflite::proto::ModelFile* MinibenchmarkSettings::mutable_model_file() {
  ::tflite::proto::ModelFile* _msg = _internal_mutable_model_file();
  // @@protoc_insertion_point(field_mutable:tflite.proto.MinibenchmarkSettings.model_file)
  return _msg;
}
inline void MinibenchmarkSettings::set_allocated_model_file(::tflite::proto::ModelFile* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::tflite::proto::ModelFile*>(_impl_.model_file_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::tflite::proto::ModelFile*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.model_file_ = reinterpret_cast<::tflite::proto::ModelFile*>(value);
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.MinibenchmarkSettings.model_file)
}

// optional .tflite.proto.BenchmarkStoragePaths storage_paths = 3;
inline bool MinibenchmarkSettings::has_storage_paths() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.storage_paths_ != nullptr);
  return value;
}
inline void MinibenchmarkSettings::clear_storage_paths() {
  if (_impl_.storage_paths_ != nullptr) _impl_.storage_paths_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::tflite::proto::BenchmarkStoragePaths& MinibenchmarkSettings::_internal_storage_paths() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tflite::proto::BenchmarkStoragePaths* p = _impl_.storage_paths_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::proto::BenchmarkStoragePaths&>(::tflite::proto::_BenchmarkStoragePaths_default_instance_);
}
inline const ::tflite::proto::BenchmarkStoragePaths& MinibenchmarkSettings::storage_paths() const {
  // @@protoc_insertion_point(field_get:tflite.proto.MinibenchmarkSettings.storage_paths)
  return _internal_storage_paths();
}
inline void MinibenchmarkSettings::unsafe_arena_set_allocated_storage_paths(::tflite::proto::BenchmarkStoragePaths* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.storage_paths_);
  }
  _impl_.storage_paths_ = reinterpret_cast<::tflite::proto::BenchmarkStoragePaths*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.proto.MinibenchmarkSettings.storage_paths)
}
inline ::tflite::proto::BenchmarkStoragePaths* MinibenchmarkSettings::release_storage_paths() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tflite::proto::BenchmarkStoragePaths* released = _impl_.storage_paths_;
  _impl_.storage_paths_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tflite::proto::BenchmarkStoragePaths* MinibenchmarkSettings::unsafe_arena_release_storage_paths() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.MinibenchmarkSettings.storage_paths)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tflite::proto::BenchmarkStoragePaths* temp = _impl_.storage_paths_;
  _impl_.storage_paths_ = nullptr;
  return temp;
}
inline ::tflite::proto::BenchmarkStoragePaths* MinibenchmarkSettings::_internal_mutable_storage_paths() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.storage_paths_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::proto::BenchmarkStoragePaths>(GetArenaForAllocation());
    _impl_.storage_paths_ = reinterpret_cast<::tflite::proto::BenchmarkStoragePaths*>(p);
  }
  return _impl_.storage_paths_;
}
inline ::tflite::proto::BenchmarkStoragePaths* MinibenchmarkSettings::mutable_storage_paths() {
  ::tflite::proto::BenchmarkStoragePaths* _msg = _internal_mutable_storage_paths();
  // @@protoc_insertion_point(field_mutable:tflite.proto.MinibenchmarkSettings.storage_paths)
  return _msg;
}
inline void MinibenchmarkSettings::set_allocated_storage_paths(::tflite::proto::BenchmarkStoragePaths* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::tflite::proto::BenchmarkStoragePaths*>(_impl_.storage_paths_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::tflite::proto::BenchmarkStoragePaths*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.storage_paths_ = reinterpret_cast<::tflite::proto::BenchmarkStoragePaths*>(value);
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.MinibenchmarkSettings.storage_paths)
}

// optional .tflite.proto.ValidationSettings validation_settings = 4;
inline bool MinibenchmarkSettings::has_validation_settings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.validation_settings_ != nullptr);
  return value;
}
inline void MinibenchmarkSettings::clear_validation_settings() {
  if (_impl_.validation_settings_ != nullptr) _impl_.validation_settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::tflite::proto::ValidationSettings& MinibenchmarkSettings::_internal_validation_settings() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tflite::proto::ValidationSettings* p = _impl_.validation_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::proto::ValidationSettings&>(::tflite::proto::_ValidationSettings_default_instance_);
}
inline const ::tflite::proto::ValidationSettings& MinibenchmarkSettings::validation_settings() const {
  // @@protoc_insertion_point(field_get:tflite.proto.MinibenchmarkSettings.validation_settings)
  return _internal_validation_settings();
}
inline void MinibenchmarkSettings::unsafe_arena_set_allocated_validation_settings(::tflite::proto::ValidationSettings* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.validation_settings_);
  }
  _impl_.validation_settings_ = reinterpret_cast<::tflite::proto::ValidationSettings*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.proto.MinibenchmarkSettings.validation_settings)
}
inline ::tflite::proto::ValidationSettings* MinibenchmarkSettings::release_validation_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tflite::proto::ValidationSettings* released = _impl_.validation_settings_;
  _impl_.validation_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tflite::proto::ValidationSettings* MinibenchmarkSettings::unsafe_arena_release_validation_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.MinibenchmarkSettings.validation_settings)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tflite::proto::ValidationSettings* temp = _impl_.validation_settings_;
  _impl_.validation_settings_ = nullptr;
  return temp;
}
inline ::tflite::proto::ValidationSettings* MinibenchmarkSettings::_internal_mutable_validation_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.validation_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::proto::ValidationSettings>(GetArenaForAllocation());
    _impl_.validation_settings_ = reinterpret_cast<::tflite::proto::ValidationSettings*>(p);
  }
  return _impl_.validation_settings_;
}
inline ::tflite::proto::ValidationSettings* MinibenchmarkSettings::mutable_validation_settings() {
  ::tflite::proto::ValidationSettings* _msg = _internal_mutable_validation_settings();
  // @@protoc_insertion_point(field_mutable:tflite.proto.MinibenchmarkSettings.validation_settings)
  return _msg;
}
inline void MinibenchmarkSettings::set_allocated_validation_settings(::tflite::proto::ValidationSettings* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::tflite::proto::ValidationSettings*>(_impl_.validation_settings_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::tflite::proto::ValidationSettings*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.validation_settings_ = reinterpret_cast<::tflite::proto::ValidationSettings*>(value);
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.MinibenchmarkSettings.validation_settings)
}

// -------------------------------------------------------------------

// BenchmarkEventStorage

// optional .tflite.proto.ModelIdGroup model_id_group = 1;
inline bool BenchmarkEventStorage::has_model_id_group() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.model_id_group_ != nullptr);
  return value;
}
inline void BenchmarkEventStorage::clear_model_id_group() {
  if (_impl_.model_id_group_ != nullptr) _impl_.model_id_group_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tflite::proto::ModelIdGroup& BenchmarkEventStorage::_internal_model_id_group() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tflite::proto::ModelIdGroup* p = _impl_.model_id_group_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::proto::ModelIdGroup&>(::tflite::proto::_ModelIdGroup_default_instance_);
}
inline const ::tflite::proto::ModelIdGroup& BenchmarkEventStorage::model_id_group() const {
  // @@protoc_insertion_point(field_get:tflite.proto.BenchmarkEventStorage.model_id_group)
  return _internal_model_id_group();
}
inline void BenchmarkEventStorage::unsafe_arena_set_allocated_model_id_group(::tflite::proto::ModelIdGroup* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.model_id_group_);
  }
  _impl_.model_id_group_ = reinterpret_cast<::tflite::proto::ModelIdGroup*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.proto.BenchmarkEventStorage.model_id_group)
}
inline ::tflite::proto::ModelIdGroup* BenchmarkEventStorage::release_model_id_group() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tflite::proto::ModelIdGroup* released = _impl_.model_id_group_;
  _impl_.model_id_group_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tflite::proto::ModelIdGroup* BenchmarkEventStorage::unsafe_arena_release_model_id_group() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.BenchmarkEventStorage.model_id_group)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tflite::proto::ModelIdGroup* temp = _impl_.model_id_group_;
  _impl_.model_id_group_ = nullptr;
  return temp;
}
inline ::tflite::proto::ModelIdGroup* BenchmarkEventStorage::_internal_mutable_model_id_group() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.model_id_group_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::proto::ModelIdGroup>(GetArenaForAllocation());
    _impl_.model_id_group_ = reinterpret_cast<::tflite::proto::ModelIdGroup*>(p);
  }
  return _impl_.model_id_group_;
}
inline ::tflite::proto::ModelIdGroup* BenchmarkEventStorage::mutable_model_id_group() {
  ::tflite::proto::ModelIdGroup* _msg = _internal_mutable_model_id_group();
  // @@protoc_insertion_point(field_mutable:tflite.proto.BenchmarkEventStorage.model_id_group)
  return _msg;
}
inline void BenchmarkEventStorage::set_allocated_model_id_group(::tflite::proto::ModelIdGroup* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::tflite::proto::ModelIdGroup*>(_impl_.model_id_group_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::tflite::proto::ModelIdGroup*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.model_id_group_ = reinterpret_cast<::tflite::proto::ModelIdGroup*>(value);
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.BenchmarkEventStorage.model_id_group)
}

// optional .tflite.proto.BenchmarkEvent benchmark_event = 2;
inline bool BenchmarkEventStorage::has_benchmark_event() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.benchmark_event_ != nullptr);
  return value;
}
inline void BenchmarkEventStorage::clear_benchmark_event() {
  if (_impl_.benchmark_event_ != nullptr) _impl_.benchmark_event_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::tflite::proto::BenchmarkEvent& BenchmarkEventStorage::_internal_benchmark_event() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tflite::proto::BenchmarkEvent* p = _impl_.benchmark_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::proto::BenchmarkEvent&>(::tflite::proto::_BenchmarkEvent_default_instance_);
}
inline const ::tflite::proto::BenchmarkEvent& BenchmarkEventStorage::benchmark_event() const {
  // @@protoc_insertion_point(field_get:tflite.proto.BenchmarkEventStorage.benchmark_event)
  return _internal_benchmark_event();
}
inline void BenchmarkEventStorage::unsafe_arena_set_allocated_benchmark_event(::tflite::proto::BenchmarkEvent* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.benchmark_event_);
  }
  _impl_.benchmark_event_ = reinterpret_cast<::tflite::proto::BenchmarkEvent*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.proto.BenchmarkEventStorage.benchmark_event)
}
inline ::tflite::proto::BenchmarkEvent* BenchmarkEventStorage::release_benchmark_event() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tflite::proto::BenchmarkEvent* released = _impl_.benchmark_event_;
  _impl_.benchmark_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tflite::proto::BenchmarkEvent* BenchmarkEventStorage::unsafe_arena_release_benchmark_event() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.proto.BenchmarkEventStorage.benchmark_event)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tflite::proto::BenchmarkEvent* temp = _impl_.benchmark_event_;
  _impl_.benchmark_event_ = nullptr;
  return temp;
}
inline ::tflite::proto::BenchmarkEvent* BenchmarkEventStorage::_internal_mutable_benchmark_event() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.benchmark_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::proto::BenchmarkEvent>(GetArenaForAllocation());
    _impl_.benchmark_event_ = reinterpret_cast<::tflite::proto::BenchmarkEvent*>(p);
  }
  return _impl_.benchmark_event_;
}
inline ::tflite::proto::BenchmarkEvent* BenchmarkEventStorage::mutable_benchmark_event() {
  ::tflite::proto::BenchmarkEvent* _msg = _internal_mutable_benchmark_event();
  // @@protoc_insertion_point(field_mutable:tflite.proto.BenchmarkEventStorage.benchmark_event)
  return _msg;
}
inline void BenchmarkEventStorage::set_allocated_benchmark_event(::tflite::proto::BenchmarkEvent* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::tflite::proto::BenchmarkEvent*>(_impl_.benchmark_event_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::tflite::proto::BenchmarkEvent*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.benchmark_event_ = reinterpret_cast<::tflite::proto::BenchmarkEvent*>(value);
  // @@protoc_insertion_point(field_set_allocated:tflite.proto.BenchmarkEventStorage.benchmark_event)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace tflite


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::tflite::proto::CoreMLSettings_EnabledDevices> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tflite::proto::CoreMLSettings_EnabledDevices>() {
  return ::tflite::proto::CoreMLSettings_EnabledDevices_descriptor();
}
template <>
struct is_proto_enum<::tflite::proto::EdgeTpuDeviceSpec_PlatformType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tflite::proto::EdgeTpuDeviceSpec_PlatformType>() {
  return ::tflite::proto::EdgeTpuDeviceSpec_PlatformType_descriptor();
}
template <>
struct is_proto_enum<::tflite::proto::EdgeTpuSettings_FloatTruncationType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tflite::proto::EdgeTpuSettings_FloatTruncationType>() {
  return ::tflite::proto::EdgeTpuSettings_FloatTruncationType_descriptor();
}
template <>
struct is_proto_enum<::tflite::proto::EdgeTpuSettings_QosClass> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tflite::proto::EdgeTpuSettings_QosClass>() {
  return ::tflite::proto::EdgeTpuSettings_QosClass_descriptor();
}
template <>
struct is_proto_enum<::tflite::proto::GoogleEdgeTpuSettings_Priority> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tflite::proto::GoogleEdgeTpuSettings_Priority>() {
  return ::tflite::proto::GoogleEdgeTpuSettings_Priority_descriptor();
}
template <>
struct is_proto_enum<::tflite::proto::GoogleEdgeTpuSettings_TriState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tflite::proto::GoogleEdgeTpuSettings_TriState>() {
  return ::tflite::proto::GoogleEdgeTpuSettings_TriState_descriptor();
}
template <>
struct is_proto_enum<::tflite::proto::CoralSettings_Performance> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tflite::proto::CoralSettings_Performance>() {
  return ::tflite::proto::CoralSettings_Performance_descriptor();
}
template <>
struct is_proto_enum<::tflite::proto::ExecutionPreference> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tflite::proto::ExecutionPreference>() {
  return ::tflite::proto::ExecutionPreference_descriptor();
}
template <>
struct is_proto_enum<::tflite::proto::Delegate> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tflite::proto::Delegate>() {
  return ::tflite::proto::Delegate_descriptor();
}
template <>
struct is_proto_enum<::tflite::proto::NNAPIExecutionPreference> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tflite::proto::NNAPIExecutionPreference>() {
  return ::tflite::proto::NNAPIExecutionPreference_descriptor();
}
template <>
struct is_proto_enum<::tflite::proto::NNAPIExecutionPriority> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tflite::proto::NNAPIExecutionPriority>() {
  return ::tflite::proto::NNAPIExecutionPriority_descriptor();
}
template <>
struct is_proto_enum<::tflite::proto::GPUBackend> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tflite::proto::GPUBackend>() {
  return ::tflite::proto::GPUBackend_descriptor();
}
template <>
struct is_proto_enum<::tflite::proto::GPUInferencePriority> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tflite::proto::GPUInferencePriority>() {
  return ::tflite::proto::GPUInferencePriority_descriptor();
}
template <>
struct is_proto_enum<::tflite::proto::GPUInferenceUsage> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tflite::proto::GPUInferenceUsage>() {
  return ::tflite::proto::GPUInferenceUsage_descriptor();
}
template <>
struct is_proto_enum<::tflite::proto::XNNPackFlags> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tflite::proto::XNNPackFlags>() {
  return ::tflite::proto::XNNPackFlags_descriptor();
}
template <>
struct is_proto_enum<::tflite::proto::EdgeTpuPowerState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tflite::proto::EdgeTpuPowerState>() {
  return ::tflite::proto::EdgeTpuPowerState_descriptor();
}
template <>
struct is_proto_enum<::tflite::proto::BenchmarkEventType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tflite::proto::BenchmarkEventType>() {
  return ::tflite::proto::BenchmarkEventType_descriptor();
}
template <>
struct is_proto_enum<::tflite::proto::BenchmarkStage> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tflite::proto::BenchmarkStage>() {
  return ::tflite::proto::BenchmarkStage_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_2epb_2eh
