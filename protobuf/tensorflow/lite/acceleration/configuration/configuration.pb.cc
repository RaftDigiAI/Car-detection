// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/lite/acceleration/configuration/configuration.proto

#include "tensorflow/lite/acceleration/configuration/configuration.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace tflite {
namespace proto {
        template <typename>
PROTOBUF_CONSTEXPR ComputeSettings::ComputeSettings(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.model_namespace_for_statistics_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.model_identifier_for_statistics_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.tflite_settings_)*/ nullptr,
      /*decltype(_impl_.settings_to_test_locally_)*/ nullptr,
      /*decltype(_impl_.preference_)*/ 0,
    } {}
struct ComputeSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComputeSettingsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComputeSettingsDefaultTypeInternal() {}
  union {
    ComputeSettings _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComputeSettingsDefaultTypeInternal _ComputeSettings_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR NNAPISettings::NNAPISettings(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.accelerator_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.cache_directory_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.model_token_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.fallback_settings_)*/ nullptr,
      /*decltype(_impl_.execution_preference_)*/ 0,
      /*decltype(_impl_.no_of_nnapi_instances_to_cache_)*/ 0,
      /*decltype(_impl_.execution_priority_)*/ 0,
      /*decltype(_impl_.allow_nnapi_cpu_on_android_10_plus_)*/ false,
      /*decltype(_impl_.allow_dynamic_dimensions_)*/ false,
      /*decltype(_impl_.allow_fp16_precision_for_fp32_)*/ false,
      /*decltype(_impl_.use_burst_computation_)*/ false,
      /*decltype(_impl_.support_library_handle_)*/ ::int64_t{0},
    } {}
struct NNAPISettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NNAPISettingsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NNAPISettingsDefaultTypeInternal() {}
  union {
    NNAPISettings _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NNAPISettingsDefaultTypeInternal _NNAPISettings_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR GPUSettings::GPUSettings(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.cache_directory_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.model_token_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.is_precision_loss_allowed_)*/ false,
      /*decltype(_impl_.force_backend_)*/ 0,
      /*decltype(_impl_.inference_priority1_)*/ 0,
      /*decltype(_impl_.inference_priority2_)*/ 0,
      /*decltype(_impl_.inference_priority3_)*/ 0,
      /*decltype(_impl_.inference_preference_)*/ 0,
      /*decltype(_impl_.enable_quantized_inference_)*/ true,
    } {}
struct GPUSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GPUSettingsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GPUSettingsDefaultTypeInternal() {}
  union {
    GPUSettings _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GPUSettingsDefaultTypeInternal _GPUSettings_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR HexagonSettings::HexagonSettings(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.debug_level_)*/ 0,
      /*decltype(_impl_.powersave_level_)*/ 0,
      /*decltype(_impl_.print_graph_profile_)*/ false,
      /*decltype(_impl_.print_graph_debug_)*/ false,
    } {}
struct HexagonSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HexagonSettingsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HexagonSettingsDefaultTypeInternal() {}
  union {
    HexagonSettings _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HexagonSettingsDefaultTypeInternal _HexagonSettings_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR XNNPackSettings::XNNPackSettings(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.num_threads_)*/ 0,
      /*decltype(_impl_.flags_)*/ 0,
    } {}
struct XNNPackSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR XNNPackSettingsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~XNNPackSettingsDefaultTypeInternal() {}
  union {
    XNNPackSettings _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 XNNPackSettingsDefaultTypeInternal _XNNPackSettings_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CoreMLSettings::CoreMLSettings(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.enabled_devices_)*/ 0,
      /*decltype(_impl_.coreml_version_)*/ 0,
      /*decltype(_impl_.max_delegated_partitions_)*/ 0,
      /*decltype(_impl_.min_nodes_per_partition_)*/ 2,
    } {}
struct CoreMLSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CoreMLSettingsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CoreMLSettingsDefaultTypeInternal() {}
  union {
    CoreMLSettings _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CoreMLSettingsDefaultTypeInternal _CoreMLSettings_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR StableDelegateLoaderSettings::StableDelegateLoaderSettings(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.delegate_path_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
    } {}
struct StableDelegateLoaderSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StableDelegateLoaderSettingsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StableDelegateLoaderSettingsDefaultTypeInternal() {}
  union {
    StableDelegateLoaderSettings _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StableDelegateLoaderSettingsDefaultTypeInternal _StableDelegateLoaderSettings_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CompilationCachingSettings::CompilationCachingSettings(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.cache_dir_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.model_token_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
    } {}
struct CompilationCachingSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompilationCachingSettingsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompilationCachingSettingsDefaultTypeInternal() {}
  union {
    CompilationCachingSettings _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompilationCachingSettingsDefaultTypeInternal _CompilationCachingSettings_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR EdgeTpuDeviceSpec::EdgeTpuDeviceSpec(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.device_paths_)*/ {},
      /*decltype(_impl_.platform_type_)*/ 0,
      /*decltype(_impl_.num_chips_)*/ 0,
      /*decltype(_impl_.chip_family_)*/ 0,
    } {}
struct EdgeTpuDeviceSpecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EdgeTpuDeviceSpecDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EdgeTpuDeviceSpecDefaultTypeInternal() {}
  union {
    EdgeTpuDeviceSpec _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EdgeTpuDeviceSpecDefaultTypeInternal _EdgeTpuDeviceSpec_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR EdgeTpuInactivePowerConfig::EdgeTpuInactivePowerConfig(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.inactive_timeout_us_)*/ ::int64_t{0},
      /*decltype(_impl_.inactive_power_state_)*/ 0,
    } {}
struct EdgeTpuInactivePowerConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EdgeTpuInactivePowerConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EdgeTpuInactivePowerConfigDefaultTypeInternal() {}
  union {
    EdgeTpuInactivePowerConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EdgeTpuInactivePowerConfigDefaultTypeInternal _EdgeTpuInactivePowerConfig_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR EdgeTpuSettings::EdgeTpuSettings(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.inactive_power_configs_)*/ {},
      /*decltype(_impl_.hardware_cluster_ids_)*/ {},
      /* _impl_._hardware_cluster_ids_cached_byte_size_ = */ {0},
      /*decltype(_impl_.model_token_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.public_model_id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.edgetpu_device_spec_)*/ nullptr,
      /*decltype(_impl_.inference_power_state_)*/ 0,
      /*decltype(_impl_.float_truncation_type_)*/ 0,
      /*decltype(_impl_.qos_class_)*/ 0,
      /*decltype(_impl_.inference_priority_)*/ -1,
    } {}
struct EdgeTpuSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EdgeTpuSettingsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EdgeTpuSettingsDefaultTypeInternal() {}
  union {
    EdgeTpuSettings _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EdgeTpuSettingsDefaultTypeInternal _EdgeTpuSettings_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR GoogleEdgeTpuSettings::GoogleEdgeTpuSettings(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.extension_data_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.model_identifier_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.priority_)*/ 0,
      /*decltype(_impl_.enable_tracing_)*/ false,
      /*decltype(_impl_.use_async_api_)*/ false,
      /*decltype(_impl_.prefer_cache_coherency_for_inputs_)*/ 0,
      /*decltype(_impl_.prefer_cache_coherency_for_outputs_)*/ 0,
      /*decltype(_impl_.log_verbosity_)*/ -1,
      /*decltype(_impl_.delegate_should_manage_cache_for_inputs_)*/ true,
      /*decltype(_impl_.delegate_should_manage_cache_for_outputs_)*/ true,
    } {}
struct GoogleEdgeTpuSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GoogleEdgeTpuSettingsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GoogleEdgeTpuSettingsDefaultTypeInternal() {}
  union {
    GoogleEdgeTpuSettings _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GoogleEdgeTpuSettingsDefaultTypeInternal _GoogleEdgeTpuSettings_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CoralSettings::CoralSettings(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.device_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.usb_always_dfu_)*/ false,
      /*decltype(_impl_.usb_max_bulk_in_queue_length_)*/ 0,
      /*decltype(_impl_.performance_)*/ 1,
    } {}
struct CoralSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CoralSettingsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CoralSettingsDefaultTypeInternal() {}
  union {
    CoralSettings _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CoralSettingsDefaultTypeInternal _CoralSettings_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CPUSettings::CPUSettings(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.num_threads_)*/ -1,
    } {}
struct CPUSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPUSettingsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPUSettingsDefaultTypeInternal() {}
  union {
    CPUSettings _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPUSettingsDefaultTypeInternal _CPUSettings_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TFLiteSettings::TFLiteSettings(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.nnapi_settings_)*/ nullptr,
      /*decltype(_impl_.gpu_settings_)*/ nullptr,
      /*decltype(_impl_.hexagon_settings_)*/ nullptr,
      /*decltype(_impl_.xnnpack_settings_)*/ nullptr,
      /*decltype(_impl_.cpu_settings_)*/ nullptr,
      /*decltype(_impl_.edgetpu_settings_)*/ nullptr,
      /*decltype(_impl_.fallback_settings_)*/ nullptr,
      /*decltype(_impl_.coral_settings_)*/ nullptr,
      /*decltype(_impl_.coreml_settings_)*/ nullptr,
      /*decltype(_impl_.stable_delegate_loader_settings_)*/ nullptr,
      /*decltype(_impl_.google_edgetpu_settings_)*/ nullptr,
      /*decltype(_impl_.compilation_caching_settings_)*/ nullptr,
      /*decltype(_impl_.delegate_)*/ 0,
      /*decltype(_impl_.max_delegated_partitions_)*/ 0,
      /*decltype(_impl_.disable_default_delegates_)*/ false,
    } {}
struct TFLiteSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TFLiteSettingsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TFLiteSettingsDefaultTypeInternal() {}
  union {
    TFLiteSettings _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TFLiteSettingsDefaultTypeInternal _TFLiteSettings_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR FallbackSettings::FallbackSettings(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.allow_automatic_fallback_on_compilation_error_)*/ false,
      /*decltype(_impl_.allow_automatic_fallback_on_execution_error_)*/ false,
    } {}
struct FallbackSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FallbackSettingsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FallbackSettingsDefaultTypeInternal() {}
  union {
    FallbackSettings _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FallbackSettingsDefaultTypeInternal _FallbackSettings_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR BenchmarkMetric::BenchmarkMetric(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.values_)*/ {},
      /*decltype(_impl_.name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
    } {}
struct BenchmarkMetricDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BenchmarkMetricDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BenchmarkMetricDefaultTypeInternal() {}
  union {
    BenchmarkMetric _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BenchmarkMetricDefaultTypeInternal _BenchmarkMetric_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR BenchmarkResult_InferenceOutput::BenchmarkResult_InferenceOutput(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.value_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
    } {}
struct BenchmarkResult_InferenceOutputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BenchmarkResult_InferenceOutputDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BenchmarkResult_InferenceOutputDefaultTypeInternal() {}
  union {
    BenchmarkResult_InferenceOutput _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BenchmarkResult_InferenceOutputDefaultTypeInternal _BenchmarkResult_InferenceOutput_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR BenchmarkResult::BenchmarkResult(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.initialization_time_us_)*/ {},
      /* _impl_._initialization_time_us_cached_byte_size_ = */ {0},
      /*decltype(_impl_.inference_time_us_)*/ {},
      /* _impl_._inference_time_us_cached_byte_size_ = */ {0},
      /*decltype(_impl_.metrics_)*/ {},
      /*decltype(_impl_.actual_output_)*/ {},
      /*decltype(_impl_.max_memory_kb_)*/ 0,
      /*decltype(_impl_.ok_)*/ false,
    } {}
struct BenchmarkResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BenchmarkResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BenchmarkResultDefaultTypeInternal() {}
  union {
    BenchmarkResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BenchmarkResultDefaultTypeInternal _BenchmarkResult_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR ErrorCode::ErrorCode(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.source_)*/ 0,
      /*decltype(_impl_.tflite_error_)*/ 0,
      /*decltype(_impl_.underlying_api_error_)*/ ::int64_t{0},
    } {}
struct ErrorCodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ErrorCodeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ErrorCodeDefaultTypeInternal() {}
  union {
    ErrorCode _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ErrorCodeDefaultTypeInternal _ErrorCode_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR BenchmarkError::BenchmarkError(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.error_code_)*/ {},
      /*decltype(_impl_.stage_)*/ 0,
      /*decltype(_impl_.exit_code_)*/ 0,
      /*decltype(_impl_.signal_)*/ 0,
      /*decltype(_impl_.mini_benchmark_error_code_)*/ 0,
    } {}
struct BenchmarkErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BenchmarkErrorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BenchmarkErrorDefaultTypeInternal() {}
  union {
    BenchmarkError _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BenchmarkErrorDefaultTypeInternal _BenchmarkError_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR BenchmarkEvent::BenchmarkEvent(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.tflite_settings_)*/ nullptr,
      /*decltype(_impl_.result_)*/ nullptr,
      /*decltype(_impl_.error_)*/ nullptr,
      /*decltype(_impl_.boottime_us_)*/ ::int64_t{0},
      /*decltype(_impl_.wallclock_us_)*/ ::int64_t{0},
      /*decltype(_impl_.event_type_)*/ 0,
    } {}
struct BenchmarkEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BenchmarkEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BenchmarkEventDefaultTypeInternal() {}
  union {
    BenchmarkEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BenchmarkEventDefaultTypeInternal _BenchmarkEvent_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR BestAccelerationDecision::BestAccelerationDecision(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.min_latency_event_)*/ nullptr,
      /*decltype(_impl_.min_inference_time_us_)*/ ::int64_t{0},
      /*decltype(_impl_.number_of_source_events_)*/ 0,
    } {}
struct BestAccelerationDecisionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BestAccelerationDecisionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BestAccelerationDecisionDefaultTypeInternal() {}
  union {
    BestAccelerationDecision _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BestAccelerationDecisionDefaultTypeInternal _BestAccelerationDecision_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR BenchmarkInitializationFailure::BenchmarkInitializationFailure(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.initialization_status_)*/ 0,
    } {}
struct BenchmarkInitializationFailureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BenchmarkInitializationFailureDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BenchmarkInitializationFailureDefaultTypeInternal() {}
  union {
    BenchmarkInitializationFailure _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BenchmarkInitializationFailureDefaultTypeInternal _BenchmarkInitializationFailure_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR MiniBenchmarkEvent::MiniBenchmarkEvent(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.best_acceleration_decision_)*/ nullptr,
      /*decltype(_impl_.initialization_failure_)*/ nullptr,
      /*decltype(_impl_.benchmark_event_)*/ nullptr,
      /*decltype(_impl_.is_log_flushing_event_)*/ false,
    } {}
struct MiniBenchmarkEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MiniBenchmarkEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MiniBenchmarkEventDefaultTypeInternal() {}
  union {
    MiniBenchmarkEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MiniBenchmarkEventDefaultTypeInternal _MiniBenchmarkEvent_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR ModelFile::ModelFile(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.filename_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.model_id_group_)*/ nullptr,
      /*decltype(_impl_.fd_)*/ ::int64_t{0},
      /*decltype(_impl_.offset_)*/ ::int64_t{0},
      /*decltype(_impl_.length_)*/ ::int64_t{0},
      /*decltype(_impl_.buffer_handle_)*/ ::int64_t{0},
    } {}
struct ModelFileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelFileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelFileDefaultTypeInternal() {}
  union {
    ModelFile _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelFileDefaultTypeInternal _ModelFile_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR ModelIdGroup::ModelIdGroup(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.model_namespace_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.model_id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
    } {}
struct ModelIdGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelIdGroupDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelIdGroupDefaultTypeInternal() {}
  union {
    ModelIdGroup _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelIdGroupDefaultTypeInternal _ModelIdGroup_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR BenchmarkStoragePaths::BenchmarkStoragePaths(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.storage_file_path_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.data_directory_path_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
    } {}
struct BenchmarkStoragePathsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BenchmarkStoragePathsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BenchmarkStoragePathsDefaultTypeInternal() {}
  union {
    BenchmarkStoragePaths _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BenchmarkStoragePathsDefaultTypeInternal _BenchmarkStoragePaths_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR ValidationSettings::ValidationSettings(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.per_test_timeout_ms_)*/ ::int64_t{0},
    } {}
struct ValidationSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValidationSettingsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValidationSettingsDefaultTypeInternal() {}
  union {
    ValidationSettings _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValidationSettingsDefaultTypeInternal _ValidationSettings_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR MinibenchmarkSettings::MinibenchmarkSettings(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.settings_to_test_)*/ {},
      /*decltype(_impl_.model_file_)*/ nullptr,
      /*decltype(_impl_.storage_paths_)*/ nullptr,
      /*decltype(_impl_.validation_settings_)*/ nullptr,
    } {}
struct MinibenchmarkSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MinibenchmarkSettingsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MinibenchmarkSettingsDefaultTypeInternal() {}
  union {
    MinibenchmarkSettings _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MinibenchmarkSettingsDefaultTypeInternal _MinibenchmarkSettings_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR BenchmarkEventStorage::BenchmarkEventStorage(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.model_id_group_)*/ nullptr,
      /*decltype(_impl_.benchmark_event_)*/ nullptr,
    } {}
struct BenchmarkEventStorageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BenchmarkEventStorageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BenchmarkEventStorageDefaultTypeInternal() {}
  union {
    BenchmarkEventStorage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BenchmarkEventStorageDefaultTypeInternal _BenchmarkEventStorage_default_instance_;
}  // namespace proto
}  // namespace tflite
static ::_pb::Metadata file_level_metadata_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[31];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[18];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto = nullptr;
const ::uint32_t TableStruct_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::tflite::proto::ComputeSettings, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::ComputeSettings, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tflite::proto::ComputeSettings, _impl_.preference_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::ComputeSettings, _impl_.tflite_settings_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::ComputeSettings, _impl_.model_namespace_for_statistics_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::ComputeSettings, _impl_.model_identifier_for_statistics_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::ComputeSettings, _impl_.settings_to_test_locally_),
    4,
    2,
    0,
    1,
    3,
    PROTOBUF_FIELD_OFFSET(::tflite::proto::NNAPISettings, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::NNAPISettings, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tflite::proto::NNAPISettings, _impl_.accelerator_name_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::NNAPISettings, _impl_.cache_directory_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::NNAPISettings, _impl_.model_token_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::NNAPISettings, _impl_.execution_preference_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::NNAPISettings, _impl_.no_of_nnapi_instances_to_cache_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::NNAPISettings, _impl_.fallback_settings_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::NNAPISettings, _impl_.allow_nnapi_cpu_on_android_10_plus_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::NNAPISettings, _impl_.execution_priority_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::NNAPISettings, _impl_.allow_dynamic_dimensions_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::NNAPISettings, _impl_.allow_fp16_precision_for_fp32_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::NNAPISettings, _impl_.use_burst_computation_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::NNAPISettings, _impl_.support_library_handle_),
    0,
    1,
    2,
    4,
    5,
    3,
    7,
    6,
    8,
    9,
    10,
    11,
    PROTOBUF_FIELD_OFFSET(::tflite::proto::GPUSettings, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::GPUSettings, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tflite::proto::GPUSettings, _impl_.is_precision_loss_allowed_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::GPUSettings, _impl_.enable_quantized_inference_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::GPUSettings, _impl_.force_backend_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::GPUSettings, _impl_.inference_priority1_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::GPUSettings, _impl_.inference_priority2_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::GPUSettings, _impl_.inference_priority3_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::GPUSettings, _impl_.inference_preference_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::GPUSettings, _impl_.cache_directory_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::GPUSettings, _impl_.model_token_),
    2,
    8,
    3,
    4,
    5,
    6,
    7,
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::tflite::proto::HexagonSettings, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::HexagonSettings, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tflite::proto::HexagonSettings, _impl_.debug_level_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::HexagonSettings, _impl_.powersave_level_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::HexagonSettings, _impl_.print_graph_profile_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::HexagonSettings, _impl_.print_graph_debug_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::tflite::proto::XNNPackSettings, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::XNNPackSettings, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tflite::proto::XNNPackSettings, _impl_.num_threads_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::XNNPackSettings, _impl_.flags_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::tflite::proto::CoreMLSettings, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::CoreMLSettings, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tflite::proto::CoreMLSettings, _impl_.enabled_devices_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::CoreMLSettings, _impl_.coreml_version_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::CoreMLSettings, _impl_.max_delegated_partitions_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::CoreMLSettings, _impl_.min_nodes_per_partition_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::tflite::proto::StableDelegateLoaderSettings, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::StableDelegateLoaderSettings, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tflite::proto::StableDelegateLoaderSettings, _impl_.delegate_path_),
    0,
    PROTOBUF_FIELD_OFFSET(::tflite::proto::CompilationCachingSettings, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::CompilationCachingSettings, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tflite::proto::CompilationCachingSettings, _impl_.cache_dir_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::CompilationCachingSettings, _impl_.model_token_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::tflite::proto::EdgeTpuDeviceSpec, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::EdgeTpuDeviceSpec, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tflite::proto::EdgeTpuDeviceSpec, _impl_.platform_type_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::EdgeTpuDeviceSpec, _impl_.num_chips_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::EdgeTpuDeviceSpec, _impl_.device_paths_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::EdgeTpuDeviceSpec, _impl_.chip_family_),
    0,
    1,
    ~0u,
    2,
    PROTOBUF_FIELD_OFFSET(::tflite::proto::EdgeTpuInactivePowerConfig, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::EdgeTpuInactivePowerConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tflite::proto::EdgeTpuInactivePowerConfig, _impl_.inactive_power_state_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::EdgeTpuInactivePowerConfig, _impl_.inactive_timeout_us_),
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::tflite::proto::EdgeTpuSettings, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::EdgeTpuSettings, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tflite::proto::EdgeTpuSettings, _impl_.inference_power_state_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::EdgeTpuSettings, _impl_.inactive_power_configs_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::EdgeTpuSettings, _impl_.inference_priority_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::EdgeTpuSettings, _impl_.edgetpu_device_spec_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::EdgeTpuSettings, _impl_.model_token_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::EdgeTpuSettings, _impl_.float_truncation_type_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::EdgeTpuSettings, _impl_.qos_class_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::EdgeTpuSettings, _impl_.hardware_cluster_ids_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::EdgeTpuSettings, _impl_.public_model_id_),
    3,
    ~0u,
    6,
    2,
    0,
    4,
    5,
    ~0u,
    1,
    PROTOBUF_FIELD_OFFSET(::tflite::proto::GoogleEdgeTpuSettings, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::GoogleEdgeTpuSettings, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tflite::proto::GoogleEdgeTpuSettings, _impl_.log_verbosity_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::GoogleEdgeTpuSettings, _impl_.enable_tracing_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::GoogleEdgeTpuSettings, _impl_.priority_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::GoogleEdgeTpuSettings, _impl_.extension_data_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::GoogleEdgeTpuSettings, _impl_.model_identifier_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::GoogleEdgeTpuSettings, _impl_.use_async_api_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::GoogleEdgeTpuSettings, _impl_.delegate_should_manage_cache_for_inputs_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::GoogleEdgeTpuSettings, _impl_.delegate_should_manage_cache_for_outputs_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::GoogleEdgeTpuSettings, _impl_.prefer_cache_coherency_for_inputs_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::GoogleEdgeTpuSettings, _impl_.prefer_cache_coherency_for_outputs_),
    7,
    3,
    2,
    0,
    1,
    4,
    8,
    9,
    5,
    6,
    PROTOBUF_FIELD_OFFSET(::tflite::proto::CoralSettings, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::CoralSettings, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tflite::proto::CoralSettings, _impl_.device_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::CoralSettings, _impl_.performance_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::CoralSettings, _impl_.usb_always_dfu_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::CoralSettings, _impl_.usb_max_bulk_in_queue_length_),
    0,
    3,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::tflite::proto::CPUSettings, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::CPUSettings, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tflite::proto::CPUSettings, _impl_.num_threads_),
    0,
    PROTOBUF_FIELD_OFFSET(::tflite::proto::TFLiteSettings, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::TFLiteSettings, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tflite::proto::TFLiteSettings, _impl_.delegate_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::TFLiteSettings, _impl_.nnapi_settings_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::TFLiteSettings, _impl_.gpu_settings_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::TFLiteSettings, _impl_.hexagon_settings_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::TFLiteSettings, _impl_.xnnpack_settings_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::TFLiteSettings, _impl_.coreml_settings_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::TFLiteSettings, _impl_.cpu_settings_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::TFLiteSettings, _impl_.max_delegated_partitions_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::TFLiteSettings, _impl_.edgetpu_settings_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::TFLiteSettings, _impl_.coral_settings_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::TFLiteSettings, _impl_.fallback_settings_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::TFLiteSettings, _impl_.disable_default_delegates_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::TFLiteSettings, _impl_.stable_delegate_loader_settings_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::TFLiteSettings, _impl_.google_edgetpu_settings_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::TFLiteSettings, _impl_.compilation_caching_settings_),
    12,
    0,
    1,
    2,
    3,
    8,
    4,
    13,
    5,
    7,
    6,
    14,
    9,
    10,
    11,
    PROTOBUF_FIELD_OFFSET(::tflite::proto::FallbackSettings, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::FallbackSettings, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tflite::proto::FallbackSettings, _impl_.allow_automatic_fallback_on_compilation_error_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::FallbackSettings, _impl_.allow_automatic_fallback_on_execution_error_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BenchmarkMetric, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BenchmarkMetric, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BenchmarkMetric, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BenchmarkMetric, _impl_.values_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BenchmarkResult_InferenceOutput, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BenchmarkResult_InferenceOutput, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BenchmarkResult_InferenceOutput, _impl_.value_),
    0,
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BenchmarkResult, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BenchmarkResult, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BenchmarkResult, _impl_.initialization_time_us_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BenchmarkResult, _impl_.inference_time_us_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BenchmarkResult, _impl_.max_memory_kb_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BenchmarkResult, _impl_.ok_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BenchmarkResult, _impl_.metrics_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BenchmarkResult, _impl_.actual_output_),
    ~0u,
    ~0u,
    0,
    1,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::tflite::proto::ErrorCode, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::ErrorCode, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tflite::proto::ErrorCode, _impl_.source_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::ErrorCode, _impl_.tflite_error_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::ErrorCode, _impl_.underlying_api_error_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BenchmarkError, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BenchmarkError, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BenchmarkError, _impl_.stage_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BenchmarkError, _impl_.exit_code_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BenchmarkError, _impl_.signal_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BenchmarkError, _impl_.error_code_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BenchmarkError, _impl_.mini_benchmark_error_code_),
    0,
    1,
    2,
    ~0u,
    3,
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BenchmarkEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BenchmarkEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BenchmarkEvent, _impl_.tflite_settings_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BenchmarkEvent, _impl_.event_type_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BenchmarkEvent, _impl_.result_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BenchmarkEvent, _impl_.error_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BenchmarkEvent, _impl_.boottime_us_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BenchmarkEvent, _impl_.wallclock_us_),
    0,
    5,
    1,
    2,
    3,
    4,
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BestAccelerationDecision, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BestAccelerationDecision, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BestAccelerationDecision, _impl_.number_of_source_events_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BestAccelerationDecision, _impl_.min_latency_event_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BestAccelerationDecision, _impl_.min_inference_time_us_),
    2,
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BenchmarkInitializationFailure, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BenchmarkInitializationFailure, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BenchmarkInitializationFailure, _impl_.initialization_status_),
    0,
    PROTOBUF_FIELD_OFFSET(::tflite::proto::MiniBenchmarkEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::MiniBenchmarkEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tflite::proto::MiniBenchmarkEvent, _impl_.is_log_flushing_event_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::MiniBenchmarkEvent, _impl_.best_acceleration_decision_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::MiniBenchmarkEvent, _impl_.initialization_failure_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::MiniBenchmarkEvent, _impl_.benchmark_event_),
    3,
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::tflite::proto::ModelFile, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::ModelFile, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tflite::proto::ModelFile, _impl_.filename_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::ModelFile, _impl_.fd_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::ModelFile, _impl_.offset_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::ModelFile, _impl_.length_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::ModelFile, _impl_.model_id_group_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::ModelFile, _impl_.buffer_handle_),
    0,
    2,
    3,
    4,
    1,
    5,
    PROTOBUF_FIELD_OFFSET(::tflite::proto::ModelIdGroup, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::ModelIdGroup, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tflite::proto::ModelIdGroup, _impl_.model_namespace_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::ModelIdGroup, _impl_.model_id_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BenchmarkStoragePaths, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BenchmarkStoragePaths, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BenchmarkStoragePaths, _impl_.storage_file_path_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BenchmarkStoragePaths, _impl_.data_directory_path_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::tflite::proto::ValidationSettings, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::ValidationSettings, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tflite::proto::ValidationSettings, _impl_.per_test_timeout_ms_),
    0,
    PROTOBUF_FIELD_OFFSET(::tflite::proto::MinibenchmarkSettings, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::MinibenchmarkSettings, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tflite::proto::MinibenchmarkSettings, _impl_.settings_to_test_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::MinibenchmarkSettings, _impl_.model_file_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::MinibenchmarkSettings, _impl_.storage_paths_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::MinibenchmarkSettings, _impl_.validation_settings_),
    ~0u,
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BenchmarkEventStorage, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BenchmarkEventStorage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BenchmarkEventStorage, _impl_.model_id_group_),
    PROTOBUF_FIELD_OFFSET(::tflite::proto::BenchmarkEventStorage, _impl_.benchmark_event_),
    0,
    1,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 13, -1, sizeof(::tflite::proto::ComputeSettings)},
        {18, 38, -1, sizeof(::tflite::proto::NNAPISettings)},
        {50, 67, -1, sizeof(::tflite::proto::GPUSettings)},
        {76, 88, -1, sizeof(::tflite::proto::HexagonSettings)},
        {92, 102, -1, sizeof(::tflite::proto::XNNPackSettings)},
        {104, 116, -1, sizeof(::tflite::proto::CoreMLSettings)},
        {120, 129, -1, sizeof(::tflite::proto::StableDelegateLoaderSettings)},
        {130, 140, -1, sizeof(::tflite::proto::CompilationCachingSettings)},
        {142, 154, -1, sizeof(::tflite::proto::EdgeTpuDeviceSpec)},
        {158, 168, -1, sizeof(::tflite::proto::EdgeTpuInactivePowerConfig)},
        {170, 187, -1, sizeof(::tflite::proto::EdgeTpuSettings)},
        {196, 214, -1, sizeof(::tflite::proto::GoogleEdgeTpuSettings)},
        {224, 236, -1, sizeof(::tflite::proto::CoralSettings)},
        {240, 249, -1, sizeof(::tflite::proto::CPUSettings)},
        {250, 273, -1, sizeof(::tflite::proto::TFLiteSettings)},
        {288, 298, -1, sizeof(::tflite::proto::FallbackSettings)},
        {300, 310, -1, sizeof(::tflite::proto::BenchmarkMetric)},
        {312, 321, -1, sizeof(::tflite::proto::BenchmarkResult_InferenceOutput)},
        {322, 336, -1, sizeof(::tflite::proto::BenchmarkResult)},
        {342, 353, -1, sizeof(::tflite::proto::ErrorCode)},
        {356, 369, -1, sizeof(::tflite::proto::BenchmarkError)},
        {374, 388, -1, sizeof(::tflite::proto::BenchmarkEvent)},
        {394, 405, -1, sizeof(::tflite::proto::BestAccelerationDecision)},
        {408, 417, -1, sizeof(::tflite::proto::BenchmarkInitializationFailure)},
        {418, 430, -1, sizeof(::tflite::proto::MiniBenchmarkEvent)},
        {434, 448, -1, sizeof(::tflite::proto::ModelFile)},
        {454, 464, -1, sizeof(::tflite::proto::ModelIdGroup)},
        {466, 476, -1, sizeof(::tflite::proto::BenchmarkStoragePaths)},
        {478, 487, -1, sizeof(::tflite::proto::ValidationSettings)},
        {488, 500, -1, sizeof(::tflite::proto::MinibenchmarkSettings)},
        {504, 514, -1, sizeof(::tflite::proto::BenchmarkEventStorage)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::tflite::proto::_ComputeSettings_default_instance_._instance,
    &::tflite::proto::_NNAPISettings_default_instance_._instance,
    &::tflite::proto::_GPUSettings_default_instance_._instance,
    &::tflite::proto::_HexagonSettings_default_instance_._instance,
    &::tflite::proto::_XNNPackSettings_default_instance_._instance,
    &::tflite::proto::_CoreMLSettings_default_instance_._instance,
    &::tflite::proto::_StableDelegateLoaderSettings_default_instance_._instance,
    &::tflite::proto::_CompilationCachingSettings_default_instance_._instance,
    &::tflite::proto::_EdgeTpuDeviceSpec_default_instance_._instance,
    &::tflite::proto::_EdgeTpuInactivePowerConfig_default_instance_._instance,
    &::tflite::proto::_EdgeTpuSettings_default_instance_._instance,
    &::tflite::proto::_GoogleEdgeTpuSettings_default_instance_._instance,
    &::tflite::proto::_CoralSettings_default_instance_._instance,
    &::tflite::proto::_CPUSettings_default_instance_._instance,
    &::tflite::proto::_TFLiteSettings_default_instance_._instance,
    &::tflite::proto::_FallbackSettings_default_instance_._instance,
    &::tflite::proto::_BenchmarkMetric_default_instance_._instance,
    &::tflite::proto::_BenchmarkResult_InferenceOutput_default_instance_._instance,
    &::tflite::proto::_BenchmarkResult_default_instance_._instance,
    &::tflite::proto::_ErrorCode_default_instance_._instance,
    &::tflite::proto::_BenchmarkError_default_instance_._instance,
    &::tflite::proto::_BenchmarkEvent_default_instance_._instance,
    &::tflite::proto::_BestAccelerationDecision_default_instance_._instance,
    &::tflite::proto::_BenchmarkInitializationFailure_default_instance_._instance,
    &::tflite::proto::_MiniBenchmarkEvent_default_instance_._instance,
    &::tflite::proto::_ModelFile_default_instance_._instance,
    &::tflite::proto::_ModelIdGroup_default_instance_._instance,
    &::tflite::proto::_BenchmarkStoragePaths_default_instance_._instance,
    &::tflite::proto::_ValidationSettings_default_instance_._instance,
    &::tflite::proto::_MinibenchmarkSettings_default_instance_._instance,
    &::tflite::proto::_BenchmarkEventStorage_default_instance_._instance,
};
const char descriptor_table_protodef_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n>tensorflow/lite/acceleration/configura"
    "tion/configuration.proto\022\014tflite.proto\"\227"
    "\002\n\017ComputeSettings\0225\n\npreference\030\001 \001(\0162!"
    ".tflite.proto.ExecutionPreference\0225\n\017tfl"
    "ite_settings\030\002 \001(\0132\034.tflite.proto.TFLite"
    "Settings\022&\n\036model_namespace_for_statisti"
    "cs\030\003 \001(\t\022\'\n\037model_identifier_for_statist"
    "ics\030\004 \001(\t\022E\n\030settings_to_test_locally\030\005 "
    "\001(\0132#.tflite.proto.MinibenchmarkSettings"
    "\"\202\004\n\rNNAPISettings\022\030\n\020accelerator_name\030\001"
    " \001(\t\022\033\n\017cache_directory\030\002 \001(\tB\002\030\001\022\027\n\013mod"
    "el_token\030\003 \001(\tB\002\030\001\022D\n\024execution_preferen"
    "ce\030\004 \001(\0162&.tflite.proto.NNAPIExecutionPr"
    "eference\022&\n\036no_of_nnapi_instances_to_cac"
    "he\030\005 \001(\005\022=\n\021fallback_settings\030\006 \001(\0132\036.tf"
    "lite.proto.FallbackSettingsB\002\030\001\022*\n\"allow"
    "_nnapi_cpu_on_android_10_plus\030\007 \001(\010\022@\n\022e"
    "xecution_priority\030\010 \001(\0162$.tflite.proto.N"
    "NAPIExecutionPriority\022 \n\030allow_dynamic_d"
    "imensions\030\t \001(\010\022%\n\035allow_fp16_precision_"
    "for_fp32\030\n \001(\010\022\035\n\025use_burst_computation\030"
    "\013 \001(\010\022\036\n\026support_library_handle\030\014 \001(\003\"\364\003"
    "\n\013GPUSettings\022!\n\031is_precision_loss_allow"
    "ed\030\001 \001(\010\022(\n\032enable_quantized_inference\030\002"
    " \001(\010:\004true\022/\n\rforce_backend\030\003 \001(\0162\030.tfli"
    "te.proto.GPUBackend\022R\n\023inference_priorit"
    "y1\030\004 \001(\0162\".tflite.proto.GPUInferencePrio"
    "rity:\021GPU_PRIORITY_AUTO\022R\n\023inference_pri"
    "ority2\030\005 \001(\0162\".tflite.proto.GPUInference"
    "Priority:\021GPU_PRIORITY_AUTO\022R\n\023inference"
    "_priority3\030\006 \001(\0162\".tflite.proto.GPUInfer"
    "encePriority:\021GPU_PRIORITY_AUTO\022=\n\024infer"
    "ence_preference\030\007 \001(\0162\037.tflite.proto.GPU"
    "InferenceUsage\022\027\n\017cache_directory\030\010 \001(\t\022"
    "\023\n\013model_token\030\t \001(\t\"w\n\017HexagonSettings\022"
    "\023\n\013debug_level\030\001 \001(\005\022\027\n\017powersave_level\030"
    "\002 \001(\005\022\033\n\023print_graph_profile\030\003 \001(\010\022\031\n\021pr"
    "int_graph_debug\030\004 \001(\010\"s\n\017XNNPackSettings"
    "\022\023\n\013num_threads\030\001 \001(\005\022K\n\005flags\030\002 \001(\0162\032.t"
    "flite.proto.XNNPackFlags: TFLITE_XNNPACK"
    "_DELEGATE_NO_FLAGS\"\372\001\n\016CoreMLSettings\022D\n"
    "\017enabled_devices\030\001 \001(\0162+.tflite.proto.Co"
    "reMLSettings.EnabledDevices\022\026\n\016coreml_ve"
    "rsion\030\002 \001(\005\022#\n\030max_delegated_partitions\030"
    "\003 \001(\005:\0010\022\"\n\027min_nodes_per_partition\030\004 \001("
    "\005:\0012\"A\n\016EnabledDevices\022\017\n\013DEVICES_ALL\020\000\022"
    "\036\n\032DEVICES_WITH_NEURAL_ENGINE\020\001\"5\n\034Stabl"
    "eDelegateLoaderSettings\022\025\n\rdelegate_path"
    "\030\001 \001(\t\"D\n\032CompilationCachingSettings\022\021\n\t"
    "cache_dir\030\001 \001(\t\022\023\n\013model_token\030\002 \001(\t\"\344\001\n"
    "\021EdgeTpuDeviceSpec\022C\n\rplatform_type\030\001 \001("
    "\0162,.tflite.proto.EdgeTpuDeviceSpec.Platf"
    "ormType\022\021\n\tnum_chips\030\002 \001(\005\022\024\n\014device_pat"
    "hs\030\003 \003(\t\022\023\n\013chip_family\030\004 \001(\005\"L\n\014Platfor"
    "mType\022\010\n\004MMIO\020\000\022\r\n\tREFERENCE\020\001\022\r\n\tSIMULA"
    "TOR\020\002\022\024\n\020REMOTE_SIMULATOR\020\003\"x\n\032EdgeTpuIn"
    "activePowerConfig\022=\n\024inactive_power_stat"
    "e\030\001 \001(\0162\037.tflite.proto.EdgeTpuPowerState"
    "\022\033\n\023inactive_timeout_us\030\002 \001(\003\"\366\004\n\017EdgeTp"
    "uSettings\022>\n\025inference_power_state\030\001 \001(\016"
    "2\037.tflite.proto.EdgeTpuPowerState\022H\n\026ina"
    "ctive_power_configs\030\002 \003(\0132(.tflite.proto"
    ".EdgeTpuInactivePowerConfig\022\036\n\022inference"
    "_priority\030\003 \001(\005:\002-1\022<\n\023edgetpu_device_sp"
    "ec\030\004 \001(\0132\037.tflite.proto.EdgeTpuDeviceSpe"
    "c\022\023\n\013model_token\030\005 \001(\t\022P\n\025float_truncati"
    "on_type\030\006 \001(\01621.tflite.proto.EdgeTpuSett"
    "ings.FloatTruncationType\022H\n\tqos_class\030\007 "
    "\001(\0162&.tflite.proto.EdgeTpuSettings.QosCl"
    "ass:\rQOS_UNDEFINED\022 \n\024hardware_cluster_i"
    "ds\030\010 \003(\005B\002\020\001\022\027\n\017public_model_id\030\t \001(\t\"Q\n"
    "\023FloatTruncationType\022\017\n\013UNSPECIFIED\020\000\022\021\n"
    "\rNO_TRUNCATION\020\001\022\014\n\010BFLOAT16\020\002\022\010\n\004HALF\020\003"
    "\"<\n\010QosClass\022\021\n\rQOS_UNDEFINED\020\000\022\017\n\013BEST_"
    "EFFORT\020\001\022\014\n\010REALTIME\020\002\"\256\005\n\025GoogleEdgeTpu"
    "Settings\022\031\n\rlog_verbosity\030\001 \001(\005:\002-1\022\035\n\016e"
    "nable_tracing\030\002 \001(\010:\005false\022>\n\010priority\030\003"
    " \001(\0162,.tflite.proto.GoogleEdgeTpuSetting"
    "s.Priority\022\026\n\016extension_data\030\004 \001(\014\022\032\n\020mo"
    "del_identifier\030\005 \001(\t:\000\022\034\n\ruse_async_api\030"
    "\006 \001(\010:\005false\0225\n\'delegate_should_manage_c"
    "ache_for_inputs\030\007 \001(\010:\004true\0226\n(delegate_"
    "should_manage_cache_for_outputs\030\010 \001(\010:\004t"
    "rue\022W\n!prefer_cache_coherency_for_inputs"
    "\030\t \001(\0162,.tflite.proto.GoogleEdgeTpuSetti"
    "ngs.TriState\022X\n\"prefer_cache_coherency_f"
    "or_outputs\030\n \001(\0162,.tflite.proto.GoogleEd"
    "geTpuSettings.TriState\"\\\n\010Priority\022\026\n\022PR"
    "IORITY_UNDEFINED\020\000\022\020\n\014PRIORITY_LOW\020\001\022\023\n\017"
    "PRIORITY_MEDIUM\020\002\022\021\n\rPRIORITY_HIGH\020\003\"I\n\010"
    "TriState\022\026\n\022TRISTATE_UNDEFINED\020\000\022\022\n\016TRIS"
    "TATE_FALSE\020\001\022\021\n\rTRISTATE_TRUE\020\002\"\356\001\n\rCora"
    "lSettings\022\016\n\006device\030\001 \001(\t\022E\n\013performance"
    "\030\002 \001(\0162\'.tflite.proto.CoralSettings.Perf"
    "ormance:\007MAXIMUM\022\026\n\016usb_always_dfu\030\003 \001(\010"
    "\022$\n\034usb_max_bulk_in_queue_length\030\004 \001(\005\"H"
    "\n\013Performance\022\r\n\tUNDEFINED\020\000\022\013\n\007MAXIMUM\020"
    "\001\022\010\n\004HIGH\020\002\022\n\n\006MEDIUM\020\003\022\007\n\003LOW\020\004\"&\n\013CPUS"
    "ettings\022\027\n\013num_threads\030\001 \001(\005:\002-1\"\323\006\n\016TFL"
    "iteSettings\022(\n\010delegate\030\001 \001(\0162\026.tflite.p"
    "roto.Delegate\0223\n\016nnapi_settings\030\002 \001(\0132\033."
    "tflite.proto.NNAPISettings\022/\n\014gpu_settin"
    "gs\030\003 \001(\0132\031.tflite.proto.GPUSettings\0227\n\020h"
    "exagon_settings\030\004 \001(\0132\035.tflite.proto.Hex"
    "agonSettings\0227\n\020xnnpack_settings\030\005 \001(\0132\035"
    ".tflite.proto.XNNPackSettings\0225\n\017coreml_"
    "settings\030\013 \001(\0132\034.tflite.proto.CoreMLSett"
    "ings\022/\n\014cpu_settings\030\006 \001(\0132\031.tflite.prot"
    "o.CPUSettings\022 \n\030max_delegated_partition"
    "s\030\007 \001(\005\0227\n\020edgetpu_settings\030\010 \001(\0132\035.tfli"
    "te.proto.EdgeTpuSettings\0223\n\016coral_settin"
    "gs\030\n \001(\0132\033.tflite.proto.CoralSettings\0229\n"
    "\021fallback_settings\030\t \001(\0132\036.tflite.proto."
    "FallbackSettings\022!\n\031disable_default_dele"
    "gates\030\014 \001(\010\022S\n\037stable_delegate_loader_se"
    "ttings\030\r \001(\0132*.tflite.proto.StableDelega"
    "teLoaderSettings\022D\n\027google_edgetpu_setti"
    "ngs\030\016 \001(\0132#.tflite.proto.GoogleEdgeTpuSe"
    "ttings\022N\n\034compilation_caching_settings\030\017"
    " \001(\0132(.tflite.proto.CompilationCachingSe"
    "ttings\"~\n\020FallbackSettings\0225\n-allow_auto"
    "matic_fallback_on_compilation_error\030\007 \001("
    "\010\0223\n+allow_automatic_fallback_on_executi"
    "on_error\030\010 \001(\010\"3\n\017BenchmarkMetric\022\014\n\004nam"
    "e\030\001 \001(\t\022\022\n\006values\030\002 \003(\002B\002\020\001\"\217\002\n\017Benchmar"
    "kResult\022\"\n\026initialization_time_us\030\001 \003(\003B"
    "\002\020\001\022\035\n\021inference_time_us\030\002 \003(\003B\002\020\001\022\025\n\rma"
    "x_memory_kb\030\003 \001(\005\022\n\n\002ok\030\004 \001(\010\022.\n\007metrics"
    "\030\005 \003(\0132\035.tflite.proto.BenchmarkMetric\022D\n"
    "\ractual_output\030\006 \003(\0132-.tflite.proto.Benc"
    "hmarkResult.InferenceOutput\032 \n\017Inference"
    "Output\022\r\n\005value\030\001 \001(\014\"g\n\tErrorCode\022&\n\006so"
    "urce\030\001 \001(\0162\026.tflite.proto.Delegate\022\024\n\014tf"
    "lite_error\030\002 \001(\005\022\034\n\024underlying_api_error"
    "\030\003 \001(\003\"\260\001\n\016BenchmarkError\022+\n\005stage\030\001 \001(\016"
    "2\034.tflite.proto.BenchmarkStage\022\021\n\texit_c"
    "ode\030\002 \001(\005\022\016\n\006signal\030\003 \001(\005\022+\n\nerror_code\030"
    "\004 \003(\0132\027.tflite.proto.ErrorCode\022!\n\031mini_b"
    "enchmark_error_code\030\005 \001(\005\"\204\002\n\016BenchmarkE"
    "vent\0225\n\017tflite_settings\030\001 \001(\0132\034.tflite.p"
    "roto.TFLiteSettings\0224\n\nevent_type\030\002 \001(\0162"
    " .tflite.proto.BenchmarkEventType\022-\n\006res"
    "ult\030\003 \001(\0132\035.tflite.proto.BenchmarkResult"
    "\022+\n\005error\030\004 \001(\0132\034.tflite.proto.Benchmark"
    "Error\022\023\n\013boottime_us\030\005 \001(\003\022\024\n\014wallclock_"
    "us\030\006 \001(\003\"\223\001\n\030BestAccelerationDecision\022\037\n"
    "\027number_of_source_events\030\001 \001(\005\0227\n\021min_la"
    "tency_event\030\002 \001(\0132\034.tflite.proto.Benchma"
    "rkEvent\022\035\n\025min_inference_time_us\030\003 \001(\003\"\?"
    "\n\036BenchmarkInitializationFailure\022\035\n\025init"
    "ialization_status\030\001 \001(\005\"\204\002\n\022MiniBenchmar"
    "kEvent\022\035\n\025is_log_flushing_event\030\001 \001(\010\022J\n"
    "\032best_acceleration_decision\030\002 \001(\0132&.tfli"
    "te.proto.BestAccelerationDecision\022L\n\026ini"
    "tialization_failure\030\003 \001(\0132,.tflite.proto"
    ".BenchmarkInitializationFailure\0225\n\017bench"
    "mark_event\030\004 \001(\0132\034.tflite.proto.Benchmar"
    "kEvent\"\224\001\n\tModelFile\022\020\n\010filename\030\001 \001(\t\022\n"
    "\n\002fd\030\002 \001(\003\022\016\n\006offset\030\003 \001(\003\022\016\n\006length\030\004 \001"
    "(\003\0222\n\016model_id_group\030\005 \001(\0132\032.tflite.prot"
    "o.ModelIdGroup\022\025\n\rbuffer_handle\030\006 \001(\003\"9\n"
    "\014ModelIdGroup\022\027\n\017model_namespace\030\001 \001(\t\022\020"
    "\n\010model_id\030\002 \001(\t\"O\n\025BenchmarkStoragePath"
    "s\022\031\n\021storage_file_path\030\001 \001(\t\022\033\n\023data_dir"
    "ectory_path\030\002 \001(\t\"1\n\022ValidationSettings\022"
    "\033\n\023per_test_timeout_ms\030\001 \001(\003\"\367\001\n\025Miniben"
    "chmarkSettings\0226\n\020settings_to_test\030\001 \003(\013"
    "2\034.tflite.proto.TFLiteSettings\022+\n\nmodel_"
    "file\030\002 \001(\0132\027.tflite.proto.ModelFile\022:\n\rs"
    "torage_paths\030\003 \001(\0132#.tflite.proto.Benchm"
    "arkStoragePaths\022=\n\023validation_settings\030\004"
    " \001(\0132 .tflite.proto.ValidationSettings\"\202"
    "\001\n\025BenchmarkEventStorage\0222\n\016model_id_gro"
    "up\030\001 \001(\0132\032.tflite.proto.ModelIdGroup\0225\n\017"
    "benchmark_event\030\002 \001(\0132\034.tflite.proto.Ben"
    "chmarkEvent*M\n\023ExecutionPreference\022\007\n\003AN"
    "Y\020\000\022\017\n\013LOW_LATENCY\020\001\022\r\n\tLOW_POWER\020\002\022\r\n\tF"
    "ORCE_CPU\020\003*o\n\010Delegate\022\010\n\004NONE\020\000\022\t\n\005NNAP"
    "I\020\001\022\007\n\003GPU\020\002\022\013\n\007HEXAGON\020\003\022\013\n\007XNNPACK\020\004\022\013"
    "\n\007EDGETPU\020\005\022\021\n\rEDGETPU_CORAL\020\006\022\013\n\007CORE_M"
    "L\020\007*w\n\030NNAPIExecutionPreference\022\r\n\tUNDEF"
    "INED\020\000\022\023\n\017NNAPI_LOW_POWER\020\001\022\034\n\030NNAPI_FAS"
    "T_SINGLE_ANSWER\020\002\022\031\n\025NNAPI_SUSTAINED_SPE"
    "ED\020\003*\202\001\n\026NNAPIExecutionPriority\022\034\n\030NNAPI"
    "_PRIORITY_UNDEFINED\020\000\022\026\n\022NNAPI_PRIORITY_"
    "LOW\020\001\022\031\n\025NNAPI_PRIORITY_MEDIUM\020\002\022\027\n\023NNAP"
    "I_PRIORITY_HIGH\020\003*/\n\nGPUBackend\022\t\n\005UNSET"
    "\020\000\022\n\n\006OPENCL\020\001\022\n\n\006OPENGL\020\002*\216\001\n\024GPUInfere"
    "ncePriority\022\025\n\021GPU_PRIORITY_AUTO\020\000\022\036\n\032GP"
    "U_PRIORITY_MAX_PRECISION\020\001\022\034\n\030GPU_PRIORI"
    "TY_MIN_LATENCY\020\002\022!\n\035GPU_PRIORITY_MIN_MEM"
    "ORY_USAGE\020\003*r\n\021GPUInferenceUsage\022/\n+GPU_"
    "INFERENCE_PREFERENCE_FAST_SINGLE_ANSWER\020"
    "\000\022,\n(GPU_INFERENCE_PREFERENCE_SUSTAINED_"
    "SPEED\020\001*\327\001\n\014XNNPackFlags\022$\n TFLITE_XNNPA"
    "CK_DELEGATE_NO_FLAGS\020\000\022$\n TFLITE_XNNPACK"
    "_DELEGATE_FLAG_QS8\020\001\022$\n TFLITE_XNNPACK_D"
    "ELEGATE_FLAG_QU8\020\002\022(\n$TFLITE_XNNPACK_DEL"
    "EGATE_FLAG_QS8_QU8\020\003\022+\n\'TFLITE_XNNPACK_D"
    "ELEGATE_FLAG_FORCE_FP16\020\004*\255\001\n\021EdgeTpuPow"
    "erState\022\030\n\024UNDEFINED_POWERSTATE\020\000\022\020\n\014TPU"
    "_CORE_OFF\020\001\022\t\n\005READY\020\002\022\024\n\020ACTIVE_MIN_POW"
    "ER\020\003\022\031\n\025ACTIVE_VERY_LOW_POWER\020\004\022\024\n\020ACTIV"
    "E_LOW_POWER\020\005\022\n\n\006ACTIVE\020\006\022\016\n\nOVER_DRIVE\020"
    "\007*x\n\022BenchmarkEventType\022\"\n\036UNDEFINED_BEN"
    "CHMARK_EVENT_TYPE\020\000\022\t\n\005START\020\001\022\007\n\003END\020\002\022"
    "\t\n\005ERROR\020\003\022\n\n\006LOGGED\020\004\022\023\n\017RECOVERED_ERRO"
    "R\020\005*@\n\016BenchmarkStage\022\013\n\007UNKNOWN\020\000\022\022\n\016IN"
    "ITIALIZATION\020\001\022\r\n\tINFERENCE\020\002"
};
static ::absl::once_flag descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto = {
    false,
    false,
    8349,
    descriptor_table_protodef_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto,
    "tensorflow/lite/acceleration/configuration/configuration.proto",
    &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_once,
    nullptr,
    0,
    31,
    schemas,
    file_default_instances,
    TableStruct_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto::offsets,
    file_level_metadata_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto,
    file_level_enum_descriptors_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto,
    file_level_service_descriptors_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_getter() {
  return &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto(&descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto);
namespace tflite {
namespace proto {
const ::google::protobuf::EnumDescriptor* CoreMLSettings_EnabledDevices_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto);
  return file_level_enum_descriptors_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[0];
}
bool CoreMLSettings_EnabledDevices_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr CoreMLSettings_EnabledDevices CoreMLSettings::DEVICES_ALL;
constexpr CoreMLSettings_EnabledDevices CoreMLSettings::DEVICES_WITH_NEURAL_ENGINE;
constexpr CoreMLSettings_EnabledDevices CoreMLSettings::EnabledDevices_MIN;
constexpr CoreMLSettings_EnabledDevices CoreMLSettings::EnabledDevices_MAX;
constexpr int CoreMLSettings::EnabledDevices_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* EdgeTpuDeviceSpec_PlatformType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto);
  return file_level_enum_descriptors_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[1];
}
bool EdgeTpuDeviceSpec_PlatformType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr EdgeTpuDeviceSpec_PlatformType EdgeTpuDeviceSpec::MMIO;
constexpr EdgeTpuDeviceSpec_PlatformType EdgeTpuDeviceSpec::REFERENCE;
constexpr EdgeTpuDeviceSpec_PlatformType EdgeTpuDeviceSpec::SIMULATOR;
constexpr EdgeTpuDeviceSpec_PlatformType EdgeTpuDeviceSpec::REMOTE_SIMULATOR;
constexpr EdgeTpuDeviceSpec_PlatformType EdgeTpuDeviceSpec::PlatformType_MIN;
constexpr EdgeTpuDeviceSpec_PlatformType EdgeTpuDeviceSpec::PlatformType_MAX;
constexpr int EdgeTpuDeviceSpec::PlatformType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* EdgeTpuSettings_FloatTruncationType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto);
  return file_level_enum_descriptors_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[2];
}
bool EdgeTpuSettings_FloatTruncationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr EdgeTpuSettings_FloatTruncationType EdgeTpuSettings::UNSPECIFIED;
constexpr EdgeTpuSettings_FloatTruncationType EdgeTpuSettings::NO_TRUNCATION;
constexpr EdgeTpuSettings_FloatTruncationType EdgeTpuSettings::BFLOAT16;
constexpr EdgeTpuSettings_FloatTruncationType EdgeTpuSettings::HALF;
constexpr EdgeTpuSettings_FloatTruncationType EdgeTpuSettings::FloatTruncationType_MIN;
constexpr EdgeTpuSettings_FloatTruncationType EdgeTpuSettings::FloatTruncationType_MAX;
constexpr int EdgeTpuSettings::FloatTruncationType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* EdgeTpuSettings_QosClass_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto);
  return file_level_enum_descriptors_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[3];
}
bool EdgeTpuSettings_QosClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr EdgeTpuSettings_QosClass EdgeTpuSettings::QOS_UNDEFINED;
constexpr EdgeTpuSettings_QosClass EdgeTpuSettings::BEST_EFFORT;
constexpr EdgeTpuSettings_QosClass EdgeTpuSettings::REALTIME;
constexpr EdgeTpuSettings_QosClass EdgeTpuSettings::QosClass_MIN;
constexpr EdgeTpuSettings_QosClass EdgeTpuSettings::QosClass_MAX;
constexpr int EdgeTpuSettings::QosClass_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* GoogleEdgeTpuSettings_Priority_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto);
  return file_level_enum_descriptors_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[4];
}
bool GoogleEdgeTpuSettings_Priority_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr GoogleEdgeTpuSettings_Priority GoogleEdgeTpuSettings::PRIORITY_UNDEFINED;
constexpr GoogleEdgeTpuSettings_Priority GoogleEdgeTpuSettings::PRIORITY_LOW;
constexpr GoogleEdgeTpuSettings_Priority GoogleEdgeTpuSettings::PRIORITY_MEDIUM;
constexpr GoogleEdgeTpuSettings_Priority GoogleEdgeTpuSettings::PRIORITY_HIGH;
constexpr GoogleEdgeTpuSettings_Priority GoogleEdgeTpuSettings::Priority_MIN;
constexpr GoogleEdgeTpuSettings_Priority GoogleEdgeTpuSettings::Priority_MAX;
constexpr int GoogleEdgeTpuSettings::Priority_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* GoogleEdgeTpuSettings_TriState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto);
  return file_level_enum_descriptors_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[5];
}
bool GoogleEdgeTpuSettings_TriState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr GoogleEdgeTpuSettings_TriState GoogleEdgeTpuSettings::TRISTATE_UNDEFINED;
constexpr GoogleEdgeTpuSettings_TriState GoogleEdgeTpuSettings::TRISTATE_FALSE;
constexpr GoogleEdgeTpuSettings_TriState GoogleEdgeTpuSettings::TRISTATE_TRUE;
constexpr GoogleEdgeTpuSettings_TriState GoogleEdgeTpuSettings::TriState_MIN;
constexpr GoogleEdgeTpuSettings_TriState GoogleEdgeTpuSettings::TriState_MAX;
constexpr int GoogleEdgeTpuSettings::TriState_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* CoralSettings_Performance_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto);
  return file_level_enum_descriptors_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[6];
}
bool CoralSettings_Performance_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr CoralSettings_Performance CoralSettings::UNDEFINED;
constexpr CoralSettings_Performance CoralSettings::MAXIMUM;
constexpr CoralSettings_Performance CoralSettings::HIGH;
constexpr CoralSettings_Performance CoralSettings::MEDIUM;
constexpr CoralSettings_Performance CoralSettings::LOW;
constexpr CoralSettings_Performance CoralSettings::Performance_MIN;
constexpr CoralSettings_Performance CoralSettings::Performance_MAX;
constexpr int CoralSettings::Performance_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* ExecutionPreference_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto);
  return file_level_enum_descriptors_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[7];
}
bool ExecutionPreference_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
const ::google::protobuf::EnumDescriptor* Delegate_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto);
  return file_level_enum_descriptors_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[8];
}
bool Delegate_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}
const ::google::protobuf::EnumDescriptor* NNAPIExecutionPreference_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto);
  return file_level_enum_descriptors_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[9];
}
bool NNAPIExecutionPreference_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
const ::google::protobuf::EnumDescriptor* NNAPIExecutionPriority_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto);
  return file_level_enum_descriptors_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[10];
}
bool NNAPIExecutionPriority_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
const ::google::protobuf::EnumDescriptor* GPUBackend_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto);
  return file_level_enum_descriptors_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[11];
}
bool GPUBackend_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
const ::google::protobuf::EnumDescriptor* GPUInferencePriority_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto);
  return file_level_enum_descriptors_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[12];
}
bool GPUInferencePriority_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
const ::google::protobuf::EnumDescriptor* GPUInferenceUsage_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto);
  return file_level_enum_descriptors_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[13];
}
bool GPUInferenceUsage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
const ::google::protobuf::EnumDescriptor* XNNPackFlags_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto);
  return file_level_enum_descriptors_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[14];
}
bool XNNPackFlags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}
const ::google::protobuf::EnumDescriptor* EdgeTpuPowerState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto);
  return file_level_enum_descriptors_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[15];
}
bool EdgeTpuPowerState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}
const ::google::protobuf::EnumDescriptor* BenchmarkEventType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto);
  return file_level_enum_descriptors_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[16];
}
bool BenchmarkEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}
const ::google::protobuf::EnumDescriptor* BenchmarkStage_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto);
  return file_level_enum_descriptors_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[17];
}
bool BenchmarkStage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class ComputeSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<ComputeSettings>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ComputeSettings, _impl_._has_bits_);
  static void set_has_preference(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::tflite::proto::TFLiteSettings& tflite_settings(const ComputeSettings* msg);
  static void set_has_tflite_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_model_namespace_for_statistics(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_model_identifier_for_statistics(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tflite::proto::MinibenchmarkSettings& settings_to_test_locally(const ComputeSettings* msg);
  static void set_has_settings_to_test_locally(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::tflite::proto::TFLiteSettings& ComputeSettings::_Internal::tflite_settings(const ComputeSettings* msg) {
  return *msg->_impl_.tflite_settings_;
}
const ::tflite::proto::MinibenchmarkSettings& ComputeSettings::_Internal::settings_to_test_locally(const ComputeSettings* msg) {
  return *msg->_impl_.settings_to_test_locally_;
}
ComputeSettings::ComputeSettings(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.proto.ComputeSettings)
}
ComputeSettings::ComputeSettings(const ComputeSettings& from) : ::google::protobuf::Message() {
  ComputeSettings* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.model_namespace_for_statistics_){},
      decltype(_impl_.model_identifier_for_statistics_){},
      decltype(_impl_.tflite_settings_){nullptr},
      decltype(_impl_.settings_to_test_locally_){nullptr},
      decltype(_impl_.preference_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.model_namespace_for_statistics_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.model_namespace_for_statistics_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.model_namespace_for_statistics_.Set(from._internal_model_namespace_for_statistics(), _this->GetArenaForAllocation());
  }
  _impl_.model_identifier_for_statistics_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.model_identifier_for_statistics_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.model_identifier_for_statistics_.Set(from._internal_model_identifier_for_statistics(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.tflite_settings_ = new ::tflite::proto::TFLiteSettings(*from._impl_.tflite_settings_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.settings_to_test_locally_ = new ::tflite::proto::MinibenchmarkSettings(*from._impl_.settings_to_test_locally_);
  }
  _this->_impl_.preference_ = from._impl_.preference_;

  // @@protoc_insertion_point(copy_constructor:tflite.proto.ComputeSettings)
}
inline void ComputeSettings::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.model_namespace_for_statistics_){},
      decltype(_impl_.model_identifier_for_statistics_){},
      decltype(_impl_.tflite_settings_){nullptr},
      decltype(_impl_.settings_to_test_locally_){nullptr},
      decltype(_impl_.preference_){0},
  };
  _impl_.model_namespace_for_statistics_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.model_namespace_for_statistics_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_identifier_for_statistics_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.model_identifier_for_statistics_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
ComputeSettings::~ComputeSettings() {
  // @@protoc_insertion_point(destructor:tflite.proto.ComputeSettings)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ComputeSettings::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_namespace_for_statistics_.Destroy();
  _impl_.model_identifier_for_statistics_.Destroy();
  if (this != internal_default_instance()) delete _impl_.tflite_settings_;
  if (this != internal_default_instance()) delete _impl_.settings_to_test_locally_;
}
void ComputeSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ComputeSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.proto.ComputeSettings)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.model_namespace_for_statistics_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.model_identifier_for_statistics_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.tflite_settings_ != nullptr);
      _impl_.tflite_settings_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.settings_to_test_locally_ != nullptr);
      _impl_.settings_to_test_locally_->Clear();
    }
  }
  _impl_.preference_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ComputeSettings::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 3, 98, 2> ComputeSettings::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ComputeSettings, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ComputeSettings_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .tflite.proto.ExecutionPreference preference = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 4, 3, PROTOBUF_FIELD_OFFSET(ComputeSettings, _impl_.preference_)}},
    // optional .tflite.proto.TFLiteSettings tflite_settings = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 2, 1, PROTOBUF_FIELD_OFFSET(ComputeSettings, _impl_.tflite_settings_)}},
    // optional string model_namespace_for_statistics = 3;
    {::_pbi::TcParser::FastSS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(ComputeSettings, _impl_.model_namespace_for_statistics_)}},
    // optional string model_identifier_for_statistics = 4;
    {::_pbi::TcParser::FastSS1,
     {34, 1, 0, PROTOBUF_FIELD_OFFSET(ComputeSettings, _impl_.model_identifier_for_statistics_)}},
    // optional .tflite.proto.MinibenchmarkSettings settings_to_test_locally = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 3, 2, PROTOBUF_FIELD_OFFSET(ComputeSettings, _impl_.settings_to_test_locally_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .tflite.proto.ExecutionPreference preference = 1;
    {PROTOBUF_FIELD_OFFSET(ComputeSettings, _impl_.preference_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional .tflite.proto.TFLiteSettings tflite_settings = 2;
    {PROTOBUF_FIELD_OFFSET(ComputeSettings, _impl_.tflite_settings_), _Internal::kHasBitsOffset + 2, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional string model_namespace_for_statistics = 3;
    {PROTOBUF_FIELD_OFFSET(ComputeSettings, _impl_.model_namespace_for_statistics_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string model_identifier_for_statistics = 4;
    {PROTOBUF_FIELD_OFFSET(ComputeSettings, _impl_.model_identifier_for_statistics_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional .tflite.proto.MinibenchmarkSettings settings_to_test_locally = 5;
    {PROTOBUF_FIELD_OFFSET(ComputeSettings, _impl_.settings_to_test_locally_), _Internal::kHasBitsOffset + 3, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {0, 4},
    {::_pbi::TcParser::GetTable<::tflite::proto::TFLiteSettings>()},
    {::_pbi::TcParser::GetTable<::tflite::proto::MinibenchmarkSettings>()},
  }}, {{
    "\34\0\0\36\37\0\0\0"
    "tflite.proto.ComputeSettings"
    "model_namespace_for_statistics"
    "model_identifier_for_statistics"
  }},
};

::uint8_t* ComputeSettings::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.proto.ComputeSettings)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .tflite.proto.ExecutionPreference preference = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_preference(), target);
  }

  // optional .tflite.proto.TFLiteSettings tflite_settings = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tflite_settings(this),
        _Internal::tflite_settings(this).GetCachedSize(), target, stream);
  }

  // optional string model_namespace_for_statistics = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_model_namespace_for_statistics();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "tflite.proto.ComputeSettings.model_namespace_for_statistics");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional string model_identifier_for_statistics = 4;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_model_identifier_for_statistics();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "tflite.proto.ComputeSettings.model_identifier_for_statistics");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional .tflite.proto.MinibenchmarkSettings settings_to_test_locally = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::settings_to_test_locally(this),
        _Internal::settings_to_test_locally(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.proto.ComputeSettings)
  return target;
}

::size_t ComputeSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.proto.ComputeSettings)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string model_namespace_for_statistics = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_model_namespace_for_statistics());
    }

    // optional string model_identifier_for_statistics = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_model_identifier_for_statistics());
    }

    // optional .tflite.proto.TFLiteSettings tflite_settings = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.tflite_settings_);
    }

    // optional .tflite.proto.MinibenchmarkSettings settings_to_test_locally = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.settings_to_test_locally_);
    }

    // optional .tflite.proto.ExecutionPreference preference = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_preference());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ComputeSettings::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ComputeSettings::MergeImpl
};
const ::google::protobuf::Message::ClassData*ComputeSettings::GetClassData() const { return &_class_data_; }


void ComputeSettings::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ComputeSettings*>(&to_msg);
  auto& from = static_cast<const ComputeSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.proto.ComputeSettings)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_model_namespace_for_statistics(from._internal_model_namespace_for_statistics());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_model_identifier_for_statistics(from._internal_model_identifier_for_statistics());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_tflite_settings()->::tflite::proto::TFLiteSettings::MergeFrom(
          from._internal_tflite_settings());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_settings_to_test_locally()->::tflite::proto::MinibenchmarkSettings::MergeFrom(
          from._internal_settings_to_test_locally());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.preference_ = from._impl_.preference_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ComputeSettings::CopyFrom(const ComputeSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.proto.ComputeSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ComputeSettings::IsInitialized() const {
  return true;
}

void ComputeSettings::InternalSwap(ComputeSettings* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.model_namespace_for_statistics_, lhs_arena,
                                       &other->_impl_.model_namespace_for_statistics_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.model_identifier_for_statistics_, lhs_arena,
                                       &other->_impl_.model_identifier_for_statistics_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComputeSettings, _impl_.preference_)
      + sizeof(ComputeSettings::_impl_.preference_)
      - PROTOBUF_FIELD_OFFSET(ComputeSettings, _impl_.tflite_settings_)>(
          reinterpret_cast<char*>(&_impl_.tflite_settings_),
          reinterpret_cast<char*>(&other->_impl_.tflite_settings_));
}

::google::protobuf::Metadata ComputeSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_getter, &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_once,
      file_level_metadata_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[0]);
}
// ===================================================================

class NNAPISettings::_Internal {
 public:
  using HasBits = decltype(std::declval<NNAPISettings>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(NNAPISettings, _impl_._has_bits_);
  static void set_has_accelerator_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cache_directory(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_model_token(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_execution_preference(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_no_of_nnapi_instances_to_cache(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::tflite::proto::FallbackSettings& fallback_settings(const NNAPISettings* msg);
  static void set_has_fallback_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_allow_nnapi_cpu_on_android_10_plus(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_execution_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_allow_dynamic_dimensions(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_allow_fp16_precision_for_fp32(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_use_burst_computation(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_support_library_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::tflite::proto::FallbackSettings& NNAPISettings::_Internal::fallback_settings(const NNAPISettings* msg) {
  return *msg->_impl_.fallback_settings_;
}
NNAPISettings::NNAPISettings(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.proto.NNAPISettings)
}
NNAPISettings::NNAPISettings(const NNAPISettings& from) : ::google::protobuf::Message() {
  NNAPISettings* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.accelerator_name_){},
      decltype(_impl_.cache_directory_){},
      decltype(_impl_.model_token_){},
      decltype(_impl_.fallback_settings_){nullptr},
      decltype(_impl_.execution_preference_){},
      decltype(_impl_.no_of_nnapi_instances_to_cache_){},
      decltype(_impl_.execution_priority_){},
      decltype(_impl_.allow_nnapi_cpu_on_android_10_plus_){},
      decltype(_impl_.allow_dynamic_dimensions_){},
      decltype(_impl_.allow_fp16_precision_for_fp32_){},
      decltype(_impl_.use_burst_computation_){},
      decltype(_impl_.support_library_handle_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.accelerator_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.accelerator_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.accelerator_name_.Set(from._internal_accelerator_name(), _this->GetArenaForAllocation());
  }
  _impl_.cache_directory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cache_directory_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.cache_directory_.Set(from._internal_cache_directory(), _this->GetArenaForAllocation());
  }
  _impl_.model_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.model_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.model_token_.Set(from._internal_model_token(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.fallback_settings_ = new ::tflite::proto::FallbackSettings(*from._impl_.fallback_settings_);
  }
  ::memcpy(&_impl_.execution_preference_, &from._impl_.execution_preference_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.support_library_handle_) -
    reinterpret_cast<char*>(&_impl_.execution_preference_)) + sizeof(_impl_.support_library_handle_));

  // @@protoc_insertion_point(copy_constructor:tflite.proto.NNAPISettings)
}
inline void NNAPISettings::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.accelerator_name_){},
      decltype(_impl_.cache_directory_){},
      decltype(_impl_.model_token_){},
      decltype(_impl_.fallback_settings_){nullptr},
      decltype(_impl_.execution_preference_){0},
      decltype(_impl_.no_of_nnapi_instances_to_cache_){0},
      decltype(_impl_.execution_priority_){0},
      decltype(_impl_.allow_nnapi_cpu_on_android_10_plus_){false},
      decltype(_impl_.allow_dynamic_dimensions_){false},
      decltype(_impl_.allow_fp16_precision_for_fp32_){false},
      decltype(_impl_.use_burst_computation_){false},
      decltype(_impl_.support_library_handle_){::int64_t{0}},
  };
  _impl_.accelerator_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.accelerator_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cache_directory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cache_directory_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.model_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
NNAPISettings::~NNAPISettings() {
  // @@protoc_insertion_point(destructor:tflite.proto.NNAPISettings)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NNAPISettings::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accelerator_name_.Destroy();
  _impl_.cache_directory_.Destroy();
  _impl_.model_token_.Destroy();
  if (this != internal_default_instance()) delete _impl_.fallback_settings_;
}
void NNAPISettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void NNAPISettings::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.proto.NNAPISettings)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.accelerator_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.cache_directory_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.model_token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.fallback_settings_ != nullptr);
      _impl_.fallback_settings_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.execution_preference_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.allow_nnapi_cpu_on_android_10_plus_) -
        reinterpret_cast<char*>(&_impl_.execution_preference_)) + sizeof(_impl_.allow_nnapi_cpu_on_android_10_plus_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.allow_dynamic_dimensions_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.support_library_handle_) -
        reinterpret_cast<char*>(&_impl_.allow_dynamic_dimensions_)) + sizeof(_impl_.support_library_handle_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* NNAPISettings::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 3, 85, 2> NNAPISettings::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(NNAPISettings, _impl_._has_bits_),
    0, // no _extensions_
    12, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294963200,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_NNAPISettings_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string accelerator_name = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(NNAPISettings, _impl_.accelerator_name_)}},
    // optional string cache_directory = 2 [deprecated = true];
    {::_pbi::TcParser::FastSS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(NNAPISettings, _impl_.cache_directory_)}},
    // optional string model_token = 3 [deprecated = true];
    {::_pbi::TcParser::FastSS1,
     {26, 2, 0, PROTOBUF_FIELD_OFFSET(NNAPISettings, _impl_.model_token_)}},
    // optional .tflite.proto.NNAPIExecutionPreference execution_preference = 4;
    {::_pbi::TcParser::FastEr0S1,
     {32, 4, 3, PROTOBUF_FIELD_OFFSET(NNAPISettings, _impl_.execution_preference_)}},
    // optional int32 no_of_nnapi_instances_to_cache = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NNAPISettings, _impl_.no_of_nnapi_instances_to_cache_), 5>(),
     {40, 5, 0, PROTOBUF_FIELD_OFFSET(NNAPISettings, _impl_.no_of_nnapi_instances_to_cache_)}},
    // optional .tflite.proto.FallbackSettings fallback_settings = 6 [deprecated = true];
    {::_pbi::TcParser::FastMtS1,
     {50, 3, 1, PROTOBUF_FIELD_OFFSET(NNAPISettings, _impl_.fallback_settings_)}},
    // optional bool allow_nnapi_cpu_on_android_10_plus = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(NNAPISettings, _impl_.allow_nnapi_cpu_on_android_10_plus_), 7>(),
     {56, 7, 0, PROTOBUF_FIELD_OFFSET(NNAPISettings, _impl_.allow_nnapi_cpu_on_android_10_plus_)}},
    // optional .tflite.proto.NNAPIExecutionPriority execution_priority = 8;
    {::_pbi::TcParser::FastEr0S1,
     {64, 6, 3, PROTOBUF_FIELD_OFFSET(NNAPISettings, _impl_.execution_priority_)}},
    // optional bool allow_dynamic_dimensions = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(NNAPISettings, _impl_.allow_dynamic_dimensions_), 8>(),
     {72, 8, 0, PROTOBUF_FIELD_OFFSET(NNAPISettings, _impl_.allow_dynamic_dimensions_)}},
    // optional bool allow_fp16_precision_for_fp32 = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(NNAPISettings, _impl_.allow_fp16_precision_for_fp32_), 9>(),
     {80, 9, 0, PROTOBUF_FIELD_OFFSET(NNAPISettings, _impl_.allow_fp16_precision_for_fp32_)}},
    // optional bool use_burst_computation = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(NNAPISettings, _impl_.use_burst_computation_), 10>(),
     {88, 10, 0, PROTOBUF_FIELD_OFFSET(NNAPISettings, _impl_.use_burst_computation_)}},
    // optional int64 support_library_handle = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(NNAPISettings, _impl_.support_library_handle_), 11>(),
     {96, 11, 0, PROTOBUF_FIELD_OFFSET(NNAPISettings, _impl_.support_library_handle_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string accelerator_name = 1;
    {PROTOBUF_FIELD_OFFSET(NNAPISettings, _impl_.accelerator_name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string cache_directory = 2 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(NNAPISettings, _impl_.cache_directory_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string model_token = 3 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(NNAPISettings, _impl_.model_token_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional .tflite.proto.NNAPIExecutionPreference execution_preference = 4;
    {PROTOBUF_FIELD_OFFSET(NNAPISettings, _impl_.execution_preference_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional int32 no_of_nnapi_instances_to_cache = 5;
    {PROTOBUF_FIELD_OFFSET(NNAPISettings, _impl_.no_of_nnapi_instances_to_cache_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional .tflite.proto.FallbackSettings fallback_settings = 6 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(NNAPISettings, _impl_.fallback_settings_), _Internal::kHasBitsOffset + 3, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bool allow_nnapi_cpu_on_android_10_plus = 7;
    {PROTOBUF_FIELD_OFFSET(NNAPISettings, _impl_.allow_nnapi_cpu_on_android_10_plus_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional .tflite.proto.NNAPIExecutionPriority execution_priority = 8;
    {PROTOBUF_FIELD_OFFSET(NNAPISettings, _impl_.execution_priority_), _Internal::kHasBitsOffset + 6, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional bool allow_dynamic_dimensions = 9;
    {PROTOBUF_FIELD_OFFSET(NNAPISettings, _impl_.allow_dynamic_dimensions_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool allow_fp16_precision_for_fp32 = 10;
    {PROTOBUF_FIELD_OFFSET(NNAPISettings, _impl_.allow_fp16_precision_for_fp32_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool use_burst_computation = 11;
    {PROTOBUF_FIELD_OFFSET(NNAPISettings, _impl_.use_burst_computation_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional int64 support_library_handle = 12;
    {PROTOBUF_FIELD_OFFSET(NNAPISettings, _impl_.support_library_handle_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
  }}, {{
    {0, 4},
    {::_pbi::TcParser::GetTable<::tflite::proto::FallbackSettings>()},
    {0, 4},
  }}, {{
    "\32\20\17\13\0\0\0\0\0\0\0\0\0\0\0\0"
    "tflite.proto.NNAPISettings"
    "accelerator_name"
    "cache_directory"
    "model_token"
  }},
};

::uint8_t* NNAPISettings::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.proto.NNAPISettings)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string accelerator_name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_accelerator_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "tflite.proto.NNAPISettings.accelerator_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string cache_directory = 2 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_cache_directory();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "tflite.proto.NNAPISettings.cache_directory");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string model_token = 3 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_model_token();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "tflite.proto.NNAPISettings.model_token");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional .tflite.proto.NNAPIExecutionPreference execution_preference = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_execution_preference(), target);
  }

  // optional int32 no_of_nnapi_instances_to_cache = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_no_of_nnapi_instances_to_cache(), target);
  }

  // optional .tflite.proto.FallbackSettings fallback_settings = 6 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::fallback_settings(this),
        _Internal::fallback_settings(this).GetCachedSize(), target, stream);
  }

  // optional bool allow_nnapi_cpu_on_android_10_plus = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_allow_nnapi_cpu_on_android_10_plus(), target);
  }

  // optional .tflite.proto.NNAPIExecutionPriority execution_priority = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        8, this->_internal_execution_priority(), target);
  }

  // optional bool allow_dynamic_dimensions = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        9, this->_internal_allow_dynamic_dimensions(), target);
  }

  // optional bool allow_fp16_precision_for_fp32 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        10, this->_internal_allow_fp16_precision_for_fp32(), target);
  }

  // optional bool use_burst_computation = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        11, this->_internal_use_burst_computation(), target);
  }

  // optional int64 support_library_handle = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<12>(
            stream, this->_internal_support_library_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.proto.NNAPISettings)
  return target;
}

::size_t NNAPISettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.proto.NNAPISettings)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string accelerator_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_accelerator_name());
    }

    // optional string cache_directory = 2 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_cache_directory());
    }

    // optional string model_token = 3 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_model_token());
    }

    // optional .tflite.proto.FallbackSettings fallback_settings = 6 [deprecated = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.fallback_settings_);
    }

    // optional .tflite.proto.NNAPIExecutionPreference execution_preference = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_execution_preference());
    }

    // optional int32 no_of_nnapi_instances_to_cache = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_no_of_nnapi_instances_to_cache());
    }

    // optional .tflite.proto.NNAPIExecutionPriority execution_priority = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_execution_priority());
    }

    // optional bool allow_nnapi_cpu_on_android_10_plus = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional bool allow_dynamic_dimensions = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2;
    }

    // optional bool allow_fp16_precision_for_fp32 = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2;
    }

    // optional bool use_burst_computation = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2;
    }

    // optional int64 support_library_handle = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_support_library_handle());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData NNAPISettings::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    NNAPISettings::MergeImpl
};
const ::google::protobuf::Message::ClassData*NNAPISettings::GetClassData() const { return &_class_data_; }


void NNAPISettings::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<NNAPISettings*>(&to_msg);
  auto& from = static_cast<const NNAPISettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.proto.NNAPISettings)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_accelerator_name(from._internal_accelerator_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_cache_directory(from._internal_cache_directory());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_model_token(from._internal_model_token());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_fallback_settings()->::tflite::proto::FallbackSettings::MergeFrom(
          from._internal_fallback_settings());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.execution_preference_ = from._impl_.execution_preference_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.no_of_nnapi_instances_to_cache_ = from._impl_.no_of_nnapi_instances_to_cache_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.execution_priority_ = from._impl_.execution_priority_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.allow_nnapi_cpu_on_android_10_plus_ = from._impl_.allow_nnapi_cpu_on_android_10_plus_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.allow_dynamic_dimensions_ = from._impl_.allow_dynamic_dimensions_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.allow_fp16_precision_for_fp32_ = from._impl_.allow_fp16_precision_for_fp32_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.use_burst_computation_ = from._impl_.use_burst_computation_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.support_library_handle_ = from._impl_.support_library_handle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NNAPISettings::CopyFrom(const NNAPISettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.proto.NNAPISettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool NNAPISettings::IsInitialized() const {
  return true;
}

void NNAPISettings::InternalSwap(NNAPISettings* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.accelerator_name_, lhs_arena,
                                       &other->_impl_.accelerator_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cache_directory_, lhs_arena,
                                       &other->_impl_.cache_directory_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.model_token_, lhs_arena,
                                       &other->_impl_.model_token_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NNAPISettings, _impl_.support_library_handle_)
      + sizeof(NNAPISettings::_impl_.support_library_handle_)
      - PROTOBUF_FIELD_OFFSET(NNAPISettings, _impl_.fallback_settings_)>(
          reinterpret_cast<char*>(&_impl_.fallback_settings_),
          reinterpret_cast<char*>(&other->_impl_.fallback_settings_));
}

::google::protobuf::Metadata NNAPISettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_getter, &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_once,
      file_level_metadata_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[1]);
}
// ===================================================================

class GPUSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<GPUSettings>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GPUSettings, _impl_._has_bits_);
  static void set_has_is_precision_loss_allowed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enable_quantized_inference(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_force_backend(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_inference_priority1(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_inference_priority2(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_inference_priority3(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_inference_preference(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_cache_directory(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_model_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GPUSettings::GPUSettings(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.proto.GPUSettings)
}
GPUSettings::GPUSettings(const GPUSettings& from) : ::google::protobuf::Message() {
  GPUSettings* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.cache_directory_){},
      decltype(_impl_.model_token_){},
      decltype(_impl_.is_precision_loss_allowed_){},
      decltype(_impl_.force_backend_){},
      decltype(_impl_.inference_priority1_){},
      decltype(_impl_.inference_priority2_){},
      decltype(_impl_.inference_priority3_){},
      decltype(_impl_.inference_preference_){},
      decltype(_impl_.enable_quantized_inference_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.cache_directory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cache_directory_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.cache_directory_.Set(from._internal_cache_directory(), _this->GetArenaForAllocation());
  }
  _impl_.model_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.model_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.model_token_.Set(from._internal_model_token(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.is_precision_loss_allowed_, &from._impl_.is_precision_loss_allowed_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.enable_quantized_inference_) -
    reinterpret_cast<char*>(&_impl_.is_precision_loss_allowed_)) + sizeof(_impl_.enable_quantized_inference_));

  // @@protoc_insertion_point(copy_constructor:tflite.proto.GPUSettings)
}
inline void GPUSettings::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.cache_directory_){},
      decltype(_impl_.model_token_){},
      decltype(_impl_.is_precision_loss_allowed_){false},
      decltype(_impl_.force_backend_){0},
      decltype(_impl_.inference_priority1_){0},
      decltype(_impl_.inference_priority2_){0},
      decltype(_impl_.inference_priority3_){0},
      decltype(_impl_.inference_preference_){0},
      decltype(_impl_.enable_quantized_inference_){true},
  };
  _impl_.cache_directory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cache_directory_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.model_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
GPUSettings::~GPUSettings() {
  // @@protoc_insertion_point(destructor:tflite.proto.GPUSettings)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GPUSettings::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cache_directory_.Destroy();
  _impl_.model_token_.Destroy();
}
void GPUSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void GPUSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.proto.GPUSettings)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.cache_directory_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.model_token_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.is_precision_loss_allowed_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.inference_preference_) -
        reinterpret_cast<char*>(&_impl_.is_precision_loss_allowed_)) + sizeof(_impl_.inference_preference_));
  }
  _impl_.enable_quantized_inference_ = true;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GPUSettings::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 5, 67, 2> GPUSettings::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GPUSettings, _impl_._has_bits_),
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GPUSettings_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional bool is_precision_loss_allowed = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(GPUSettings, _impl_.is_precision_loss_allowed_), 2>(),
     {8, 2, 0, PROTOBUF_FIELD_OFFSET(GPUSettings, _impl_.is_precision_loss_allowed_)}},
    // optional bool enable_quantized_inference = 2 [default = true];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(GPUSettings, _impl_.enable_quantized_inference_), 8>(),
     {16, 8, 0, PROTOBUF_FIELD_OFFSET(GPUSettings, _impl_.enable_quantized_inference_)}},
    // optional .tflite.proto.GPUBackend force_backend = 3;
    {::_pbi::TcParser::FastEr0S1,
     {24, 3, 2, PROTOBUF_FIELD_OFFSET(GPUSettings, _impl_.force_backend_)}},
    // optional .tflite.proto.GPUInferencePriority inference_priority1 = 4 [default = GPU_PRIORITY_AUTO];
    {::_pbi::TcParser::FastEr0S1,
     {32, 4, 3, PROTOBUF_FIELD_OFFSET(GPUSettings, _impl_.inference_priority1_)}},
    // optional .tflite.proto.GPUInferencePriority inference_priority2 = 5 [default = GPU_PRIORITY_AUTO];
    {::_pbi::TcParser::FastEr0S1,
     {40, 5, 3, PROTOBUF_FIELD_OFFSET(GPUSettings, _impl_.inference_priority2_)}},
    // optional .tflite.proto.GPUInferencePriority inference_priority3 = 6 [default = GPU_PRIORITY_AUTO];
    {::_pbi::TcParser::FastEr0S1,
     {48, 6, 3, PROTOBUF_FIELD_OFFSET(GPUSettings, _impl_.inference_priority3_)}},
    // optional .tflite.proto.GPUInferenceUsage inference_preference = 7;
    {::_pbi::TcParser::FastEr0S1,
     {56, 7, 1, PROTOBUF_FIELD_OFFSET(GPUSettings, _impl_.inference_preference_)}},
    // optional string cache_directory = 8;
    {::_pbi::TcParser::FastSS1,
     {66, 0, 0, PROTOBUF_FIELD_OFFSET(GPUSettings, _impl_.cache_directory_)}},
    // optional string model_token = 9;
    {::_pbi::TcParser::FastSS1,
     {74, 1, 0, PROTOBUF_FIELD_OFFSET(GPUSettings, _impl_.model_token_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bool is_precision_loss_allowed = 1;
    {PROTOBUF_FIELD_OFFSET(GPUSettings, _impl_.is_precision_loss_allowed_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool enable_quantized_inference = 2 [default = true];
    {PROTOBUF_FIELD_OFFSET(GPUSettings, _impl_.enable_quantized_inference_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional .tflite.proto.GPUBackend force_backend = 3;
    {PROTOBUF_FIELD_OFFSET(GPUSettings, _impl_.force_backend_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional .tflite.proto.GPUInferencePriority inference_priority1 = 4 [default = GPU_PRIORITY_AUTO];
    {PROTOBUF_FIELD_OFFSET(GPUSettings, _impl_.inference_priority1_), _Internal::kHasBitsOffset + 4, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional .tflite.proto.GPUInferencePriority inference_priority2 = 5 [default = GPU_PRIORITY_AUTO];
    {PROTOBUF_FIELD_OFFSET(GPUSettings, _impl_.inference_priority2_), _Internal::kHasBitsOffset + 5, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional .tflite.proto.GPUInferencePriority inference_priority3 = 6 [default = GPU_PRIORITY_AUTO];
    {PROTOBUF_FIELD_OFFSET(GPUSettings, _impl_.inference_priority3_), _Internal::kHasBitsOffset + 6, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional .tflite.proto.GPUInferenceUsage inference_preference = 7;
    {PROTOBUF_FIELD_OFFSET(GPUSettings, _impl_.inference_preference_), _Internal::kHasBitsOffset + 7, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional string cache_directory = 8;
    {PROTOBUF_FIELD_OFFSET(GPUSettings, _impl_.cache_directory_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string model_token = 9;
    {PROTOBUF_FIELD_OFFSET(GPUSettings, _impl_.model_token_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }}, {{
    {0, 3},
    {0, 4},
    {0, 4},
    {0, 4},
    {0, 2},
  }}, {{
    "\30\0\0\0\0\0\0\0\17\13\0\0\0\0\0\0"
    "tflite.proto.GPUSettings"
    "cache_directory"
    "model_token"
  }},
};

::uint8_t* GPUSettings::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.proto.GPUSettings)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool is_precision_loss_allowed = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_is_precision_loss_allowed(), target);
  }

  // optional bool enable_quantized_inference = 2 [default = true];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_enable_quantized_inference(), target);
  }

  // optional .tflite.proto.GPUBackend force_backend = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_force_backend(), target);
  }

  // optional .tflite.proto.GPUInferencePriority inference_priority1 = 4 [default = GPU_PRIORITY_AUTO];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_inference_priority1(), target);
  }

  // optional .tflite.proto.GPUInferencePriority inference_priority2 = 5 [default = GPU_PRIORITY_AUTO];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_inference_priority2(), target);
  }

  // optional .tflite.proto.GPUInferencePriority inference_priority3 = 6 [default = GPU_PRIORITY_AUTO];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_inference_priority3(), target);
  }

  // optional .tflite.proto.GPUInferenceUsage inference_preference = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_inference_preference(), target);
  }

  // optional string cache_directory = 8;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_cache_directory();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "tflite.proto.GPUSettings.cache_directory");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // optional string model_token = 9;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_model_token();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "tflite.proto.GPUSettings.model_token");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.proto.GPUSettings)
  return target;
}

::size_t GPUSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.proto.GPUSettings)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string cache_directory = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_cache_directory());
    }

    // optional string model_token = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_model_token());
    }

    // optional bool is_precision_loss_allowed = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2;
    }

    // optional .tflite.proto.GPUBackend force_backend = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_force_backend());
    }

    // optional .tflite.proto.GPUInferencePriority inference_priority1 = 4 [default = GPU_PRIORITY_AUTO];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_inference_priority1());
    }

    // optional .tflite.proto.GPUInferencePriority inference_priority2 = 5 [default = GPU_PRIORITY_AUTO];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_inference_priority2());
    }

    // optional .tflite.proto.GPUInferencePriority inference_priority3 = 6 [default = GPU_PRIORITY_AUTO];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_inference_priority3());
    }

    // optional .tflite.proto.GPUInferenceUsage inference_preference = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_inference_preference());
    }

  }
  // optional bool enable_quantized_inference = 2 [default = true];
  if (cached_has_bits & 0x00000100u) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GPUSettings::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    GPUSettings::MergeImpl
};
const ::google::protobuf::Message::ClassData*GPUSettings::GetClassData() const { return &_class_data_; }


void GPUSettings::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GPUSettings*>(&to_msg);
  auto& from = static_cast<const GPUSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.proto.GPUSettings)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_cache_directory(from._internal_cache_directory());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_model_token(from._internal_model_token());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.is_precision_loss_allowed_ = from._impl_.is_precision_loss_allowed_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.force_backend_ = from._impl_.force_backend_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.inference_priority1_ = from._impl_.inference_priority1_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.inference_priority2_ = from._impl_.inference_priority2_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.inference_priority3_ = from._impl_.inference_priority3_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.inference_preference_ = from._impl_.inference_preference_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_enable_quantized_inference(from._internal_enable_quantized_inference());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GPUSettings::CopyFrom(const GPUSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.proto.GPUSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GPUSettings::IsInitialized() const {
  return true;
}

void GPUSettings::InternalSwap(GPUSettings* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cache_directory_, lhs_arena,
                                       &other->_impl_.cache_directory_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.model_token_, lhs_arena,
                                       &other->_impl_.model_token_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GPUSettings, _impl_.enable_quantized_inference_)
      + sizeof(GPUSettings::_impl_.enable_quantized_inference_)
      - PROTOBUF_FIELD_OFFSET(GPUSettings, _impl_.is_precision_loss_allowed_)>(
          reinterpret_cast<char*>(&_impl_.is_precision_loss_allowed_),
          reinterpret_cast<char*>(&other->_impl_.is_precision_loss_allowed_));
}

::google::protobuf::Metadata GPUSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_getter, &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_once,
      file_level_metadata_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[2]);
}
// ===================================================================

class HexagonSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<HexagonSettings>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HexagonSettings, _impl_._has_bits_);
  static void set_has_debug_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_powersave_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_print_graph_profile(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_print_graph_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

HexagonSettings::HexagonSettings(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.proto.HexagonSettings)
}
HexagonSettings::HexagonSettings(const HexagonSettings& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tflite.proto.HexagonSettings)
}
inline void HexagonSettings::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.debug_level_){0},
      decltype(_impl_.powersave_level_){0},
      decltype(_impl_.print_graph_profile_){false},
      decltype(_impl_.print_graph_debug_){false},
  };
}
HexagonSettings::~HexagonSettings() {
  // @@protoc_insertion_point(destructor:tflite.proto.HexagonSettings)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void HexagonSettings::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void HexagonSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void HexagonSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.proto.HexagonSettings)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.debug_level_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.print_graph_debug_) -
        reinterpret_cast<char*>(&_impl_.debug_level_)) + sizeof(_impl_.print_graph_debug_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* HexagonSettings::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> HexagonSettings::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(HexagonSettings, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_HexagonSettings_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional bool print_graph_debug = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(HexagonSettings, _impl_.print_graph_debug_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(HexagonSettings, _impl_.print_graph_debug_)}},
    // optional int32 debug_level = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(HexagonSettings, _impl_.debug_level_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(HexagonSettings, _impl_.debug_level_)}},
    // optional int32 powersave_level = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(HexagonSettings, _impl_.powersave_level_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(HexagonSettings, _impl_.powersave_level_)}},
    // optional bool print_graph_profile = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(HexagonSettings, _impl_.print_graph_profile_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(HexagonSettings, _impl_.print_graph_profile_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 debug_level = 1;
    {PROTOBUF_FIELD_OFFSET(HexagonSettings, _impl_.debug_level_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 powersave_level = 2;
    {PROTOBUF_FIELD_OFFSET(HexagonSettings, _impl_.powersave_level_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional bool print_graph_profile = 3;
    {PROTOBUF_FIELD_OFFSET(HexagonSettings, _impl_.print_graph_profile_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool print_graph_debug = 4;
    {PROTOBUF_FIELD_OFFSET(HexagonSettings, _impl_.print_graph_debug_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* HexagonSettings::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.proto.HexagonSettings)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 debug_level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_debug_level(), target);
  }

  // optional int32 powersave_level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_powersave_level(), target);
  }

  // optional bool print_graph_profile = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_print_graph_profile(), target);
  }

  // optional bool print_graph_debug = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_print_graph_debug(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.proto.HexagonSettings)
  return target;
}

::size_t HexagonSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.proto.HexagonSettings)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 debug_level = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_debug_level());
    }

    // optional int32 powersave_level = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_powersave_level());
    }

    // optional bool print_graph_profile = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2;
    }

    // optional bool print_graph_debug = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData HexagonSettings::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    HexagonSettings::MergeImpl
};
const ::google::protobuf::Message::ClassData*HexagonSettings::GetClassData() const { return &_class_data_; }


void HexagonSettings::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<HexagonSettings*>(&to_msg);
  auto& from = static_cast<const HexagonSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.proto.HexagonSettings)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.debug_level_ = from._impl_.debug_level_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.powersave_level_ = from._impl_.powersave_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.print_graph_profile_ = from._impl_.print_graph_profile_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.print_graph_debug_ = from._impl_.print_graph_debug_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HexagonSettings::CopyFrom(const HexagonSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.proto.HexagonSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool HexagonSettings::IsInitialized() const {
  return true;
}

void HexagonSettings::InternalSwap(HexagonSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HexagonSettings, _impl_.print_graph_debug_)
      + sizeof(HexagonSettings::_impl_.print_graph_debug_)
      - PROTOBUF_FIELD_OFFSET(HexagonSettings, _impl_.debug_level_)>(
          reinterpret_cast<char*>(&_impl_.debug_level_),
          reinterpret_cast<char*>(&other->_impl_.debug_level_));
}

::google::protobuf::Metadata HexagonSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_getter, &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_once,
      file_level_metadata_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[3]);
}
// ===================================================================

class XNNPackSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<XNNPackSettings>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(XNNPackSettings, _impl_._has_bits_);
  static void set_has_num_threads(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

XNNPackSettings::XNNPackSettings(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.proto.XNNPackSettings)
}
XNNPackSettings::XNNPackSettings(const XNNPackSettings& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tflite.proto.XNNPackSettings)
}
inline void XNNPackSettings::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.num_threads_){0},
      decltype(_impl_.flags_){0},
  };
}
XNNPackSettings::~XNNPackSettings() {
  // @@protoc_insertion_point(destructor:tflite.proto.XNNPackSettings)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void XNNPackSettings::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void XNNPackSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void XNNPackSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.proto.XNNPackSettings)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.num_threads_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.flags_) -
        reinterpret_cast<char*>(&_impl_.num_threads_)) + sizeof(_impl_.flags_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* XNNPackSettings::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> XNNPackSettings::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(XNNPackSettings, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_XNNPackSettings_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional .tflite.proto.XNNPackFlags flags = 2 [default = TFLITE_XNNPACK_DELEGATE_NO_FLAGS];
    {::_pbi::TcParser::FastEr0S1,
     {16, 1, 4, PROTOBUF_FIELD_OFFSET(XNNPackSettings, _impl_.flags_)}},
    // optional int32 num_threads = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(XNNPackSettings, _impl_.num_threads_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(XNNPackSettings, _impl_.num_threads_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 num_threads = 1;
    {PROTOBUF_FIELD_OFFSET(XNNPackSettings, _impl_.num_threads_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional .tflite.proto.XNNPackFlags flags = 2 [default = TFLITE_XNNPACK_DELEGATE_NO_FLAGS];
    {PROTOBUF_FIELD_OFFSET(XNNPackSettings, _impl_.flags_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
  }}, {{
    {0, 5},
  }}, {{
  }},
};

::uint8_t* XNNPackSettings::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.proto.XNNPackSettings)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 num_threads = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_num_threads(), target);
  }

  // optional .tflite.proto.XNNPackFlags flags = 2 [default = TFLITE_XNNPACK_DELEGATE_NO_FLAGS];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.proto.XNNPackSettings)
  return target;
}

::size_t XNNPackSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.proto.XNNPackSettings)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 num_threads = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_num_threads());
    }

    // optional .tflite.proto.XNNPackFlags flags = 2 [default = TFLITE_XNNPACK_DELEGATE_NO_FLAGS];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_flags());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData XNNPackSettings::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    XNNPackSettings::MergeImpl
};
const ::google::protobuf::Message::ClassData*XNNPackSettings::GetClassData() const { return &_class_data_; }


void XNNPackSettings::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<XNNPackSettings*>(&to_msg);
  auto& from = static_cast<const XNNPackSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.proto.XNNPackSettings)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.num_threads_ = from._impl_.num_threads_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void XNNPackSettings::CopyFrom(const XNNPackSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.proto.XNNPackSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool XNNPackSettings::IsInitialized() const {
  return true;
}

void XNNPackSettings::InternalSwap(XNNPackSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(XNNPackSettings, _impl_.flags_)
      + sizeof(XNNPackSettings::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(XNNPackSettings, _impl_.num_threads_)>(
          reinterpret_cast<char*>(&_impl_.num_threads_),
          reinterpret_cast<char*>(&other->_impl_.num_threads_));
}

::google::protobuf::Metadata XNNPackSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_getter, &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_once,
      file_level_metadata_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[4]);
}
// ===================================================================

class CoreMLSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<CoreMLSettings>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CoreMLSettings, _impl_._has_bits_);
  static void set_has_enabled_devices(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_coreml_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_delegated_partitions(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_min_nodes_per_partition(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CoreMLSettings::CoreMLSettings(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.proto.CoreMLSettings)
}
CoreMLSettings::CoreMLSettings(const CoreMLSettings& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tflite.proto.CoreMLSettings)
}
inline void CoreMLSettings::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.enabled_devices_){0},
      decltype(_impl_.coreml_version_){0},
      decltype(_impl_.max_delegated_partitions_){0},
      decltype(_impl_.min_nodes_per_partition_){2},
  };
}
CoreMLSettings::~CoreMLSettings() {
  // @@protoc_insertion_point(destructor:tflite.proto.CoreMLSettings)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CoreMLSettings::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void CoreMLSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CoreMLSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.proto.CoreMLSettings)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.enabled_devices_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.max_delegated_partitions_) -
        reinterpret_cast<char*>(&_impl_.enabled_devices_)) + sizeof(_impl_.max_delegated_partitions_));
    _impl_.min_nodes_per_partition_ = 2;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CoreMLSettings::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 0, 2> CoreMLSettings::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CoreMLSettings, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CoreMLSettings_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional int32 min_nodes_per_partition = 4 [default = 2];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CoreMLSettings, _impl_.min_nodes_per_partition_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(CoreMLSettings, _impl_.min_nodes_per_partition_)}},
    // optional .tflite.proto.CoreMLSettings.EnabledDevices enabled_devices = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 0, 1, PROTOBUF_FIELD_OFFSET(CoreMLSettings, _impl_.enabled_devices_)}},
    // optional int32 coreml_version = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CoreMLSettings, _impl_.coreml_version_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(CoreMLSettings, _impl_.coreml_version_)}},
    // optional int32 max_delegated_partitions = 3 [default = 0];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CoreMLSettings, _impl_.max_delegated_partitions_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(CoreMLSettings, _impl_.max_delegated_partitions_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .tflite.proto.CoreMLSettings.EnabledDevices enabled_devices = 1;
    {PROTOBUF_FIELD_OFFSET(CoreMLSettings, _impl_.enabled_devices_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional int32 coreml_version = 2;
    {PROTOBUF_FIELD_OFFSET(CoreMLSettings, _impl_.coreml_version_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 max_delegated_partitions = 3 [default = 0];
    {PROTOBUF_FIELD_OFFSET(CoreMLSettings, _impl_.max_delegated_partitions_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 min_nodes_per_partition = 4 [default = 2];
    {PROTOBUF_FIELD_OFFSET(CoreMLSettings, _impl_.min_nodes_per_partition_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }}, {{
    {0, 2},
  }}, {{
  }},
};

::uint8_t* CoreMLSettings::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.proto.CoreMLSettings)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .tflite.proto.CoreMLSettings.EnabledDevices enabled_devices = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_enabled_devices(), target);
  }

  // optional int32 coreml_version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_coreml_version(), target);
  }

  // optional int32 max_delegated_partitions = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_max_delegated_partitions(), target);
  }

  // optional int32 min_nodes_per_partition = 4 [default = 2];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_min_nodes_per_partition(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.proto.CoreMLSettings)
  return target;
}

::size_t CoreMLSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.proto.CoreMLSettings)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .tflite.proto.CoreMLSettings.EnabledDevices enabled_devices = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_enabled_devices());
    }

    // optional int32 coreml_version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_coreml_version());
    }

    // optional int32 max_delegated_partitions = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_max_delegated_partitions());
    }

    // optional int32 min_nodes_per_partition = 4 [default = 2];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_min_nodes_per_partition());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CoreMLSettings::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CoreMLSettings::MergeImpl
};
const ::google::protobuf::Message::ClassData*CoreMLSettings::GetClassData() const { return &_class_data_; }


void CoreMLSettings::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CoreMLSettings*>(&to_msg);
  auto& from = static_cast<const CoreMLSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.proto.CoreMLSettings)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.enabled_devices_ = from._impl_.enabled_devices_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.coreml_version_ = from._impl_.coreml_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.max_delegated_partitions_ = from._impl_.max_delegated_partitions_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.min_nodes_per_partition_ = from._impl_.min_nodes_per_partition_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CoreMLSettings::CopyFrom(const CoreMLSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.proto.CoreMLSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CoreMLSettings::IsInitialized() const {
  return true;
}

void CoreMLSettings::InternalSwap(CoreMLSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CoreMLSettings, _impl_.min_nodes_per_partition_)
      + sizeof(CoreMLSettings::_impl_.min_nodes_per_partition_)
      - PROTOBUF_FIELD_OFFSET(CoreMLSettings, _impl_.enabled_devices_)>(
          reinterpret_cast<char*>(&_impl_.enabled_devices_),
          reinterpret_cast<char*>(&other->_impl_.enabled_devices_));
}

::google::protobuf::Metadata CoreMLSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_getter, &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_once,
      file_level_metadata_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[5]);
}
// ===================================================================

class StableDelegateLoaderSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<StableDelegateLoaderSettings>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StableDelegateLoaderSettings, _impl_._has_bits_);
  static void set_has_delegate_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StableDelegateLoaderSettings::StableDelegateLoaderSettings(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.proto.StableDelegateLoaderSettings)
}
StableDelegateLoaderSettings::StableDelegateLoaderSettings(const StableDelegateLoaderSettings& from) : ::google::protobuf::Message() {
  StableDelegateLoaderSettings* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.delegate_path_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.delegate_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.delegate_path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.delegate_path_.Set(from._internal_delegate_path(), _this->GetArenaForAllocation());
  }

  // @@protoc_insertion_point(copy_constructor:tflite.proto.StableDelegateLoaderSettings)
}
inline void StableDelegateLoaderSettings::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.delegate_path_){},
  };
  _impl_.delegate_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.delegate_path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
StableDelegateLoaderSettings::~StableDelegateLoaderSettings() {
  // @@protoc_insertion_point(destructor:tflite.proto.StableDelegateLoaderSettings)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void StableDelegateLoaderSettings::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.delegate_path_.Destroy();
}
void StableDelegateLoaderSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void StableDelegateLoaderSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.proto.StableDelegateLoaderSettings)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.delegate_path_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* StableDelegateLoaderSettings::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 63, 2> StableDelegateLoaderSettings::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StableDelegateLoaderSettings, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_StableDelegateLoaderSettings_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional string delegate_path = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(StableDelegateLoaderSettings, _impl_.delegate_path_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string delegate_path = 1;
    {PROTOBUF_FIELD_OFFSET(StableDelegateLoaderSettings, _impl_.delegate_path_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\51\15\0\0\0\0\0\0"
    "tflite.proto.StableDelegateLoaderSettings"
    "delegate_path"
  }},
};

::uint8_t* StableDelegateLoaderSettings::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.proto.StableDelegateLoaderSettings)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string delegate_path = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_delegate_path();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "tflite.proto.StableDelegateLoaderSettings.delegate_path");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.proto.StableDelegateLoaderSettings)
  return target;
}

::size_t StableDelegateLoaderSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.proto.StableDelegateLoaderSettings)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string delegate_path = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_delegate_path());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData StableDelegateLoaderSettings::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    StableDelegateLoaderSettings::MergeImpl
};
const ::google::protobuf::Message::ClassData*StableDelegateLoaderSettings::GetClassData() const { return &_class_data_; }


void StableDelegateLoaderSettings::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<StableDelegateLoaderSettings*>(&to_msg);
  auto& from = static_cast<const StableDelegateLoaderSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.proto.StableDelegateLoaderSettings)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_delegate_path(from._internal_delegate_path());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StableDelegateLoaderSettings::CopyFrom(const StableDelegateLoaderSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.proto.StableDelegateLoaderSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool StableDelegateLoaderSettings::IsInitialized() const {
  return true;
}

void StableDelegateLoaderSettings::InternalSwap(StableDelegateLoaderSettings* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.delegate_path_, lhs_arena,
                                       &other->_impl_.delegate_path_, rhs_arena);
}

::google::protobuf::Metadata StableDelegateLoaderSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_getter, &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_once,
      file_level_metadata_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[6]);
}
// ===================================================================

class CompilationCachingSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<CompilationCachingSettings>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CompilationCachingSettings, _impl_._has_bits_);
  static void set_has_cache_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_model_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CompilationCachingSettings::CompilationCachingSettings(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.proto.CompilationCachingSettings)
}
CompilationCachingSettings::CompilationCachingSettings(const CompilationCachingSettings& from) : ::google::protobuf::Message() {
  CompilationCachingSettings* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.cache_dir_){},
      decltype(_impl_.model_token_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.cache_dir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cache_dir_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.cache_dir_.Set(from._internal_cache_dir(), _this->GetArenaForAllocation());
  }
  _impl_.model_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.model_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.model_token_.Set(from._internal_model_token(), _this->GetArenaForAllocation());
  }

  // @@protoc_insertion_point(copy_constructor:tflite.proto.CompilationCachingSettings)
}
inline void CompilationCachingSettings::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.cache_dir_){},
      decltype(_impl_.model_token_){},
  };
  _impl_.cache_dir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cache_dir_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.model_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
CompilationCachingSettings::~CompilationCachingSettings() {
  // @@protoc_insertion_point(destructor:tflite.proto.CompilationCachingSettings)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CompilationCachingSettings::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cache_dir_.Destroy();
  _impl_.model_token_.Destroy();
}
void CompilationCachingSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CompilationCachingSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.proto.CompilationCachingSettings)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.cache_dir_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.model_token_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CompilationCachingSettings::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 68, 2> CompilationCachingSettings::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CompilationCachingSettings, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CompilationCachingSettings_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional string model_token = 2;
    {::_pbi::TcParser::FastSS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(CompilationCachingSettings, _impl_.model_token_)}},
    // optional string cache_dir = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CompilationCachingSettings, _impl_.cache_dir_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string cache_dir = 1;
    {PROTOBUF_FIELD_OFFSET(CompilationCachingSettings, _impl_.cache_dir_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string model_token = 2;
    {PROTOBUF_FIELD_OFFSET(CompilationCachingSettings, _impl_.model_token_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\47\11\13\0\0\0\0\0"
    "tflite.proto.CompilationCachingSettings"
    "cache_dir"
    "model_token"
  }},
};

::uint8_t* CompilationCachingSettings::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.proto.CompilationCachingSettings)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string cache_dir = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_cache_dir();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "tflite.proto.CompilationCachingSettings.cache_dir");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string model_token = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_model_token();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "tflite.proto.CompilationCachingSettings.model_token");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.proto.CompilationCachingSettings)
  return target;
}

::size_t CompilationCachingSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.proto.CompilationCachingSettings)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string cache_dir = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_cache_dir());
    }

    // optional string model_token = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_model_token());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CompilationCachingSettings::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CompilationCachingSettings::MergeImpl
};
const ::google::protobuf::Message::ClassData*CompilationCachingSettings::GetClassData() const { return &_class_data_; }


void CompilationCachingSettings::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CompilationCachingSettings*>(&to_msg);
  auto& from = static_cast<const CompilationCachingSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.proto.CompilationCachingSettings)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_cache_dir(from._internal_cache_dir());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_model_token(from._internal_model_token());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CompilationCachingSettings::CopyFrom(const CompilationCachingSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.proto.CompilationCachingSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CompilationCachingSettings::IsInitialized() const {
  return true;
}

void CompilationCachingSettings::InternalSwap(CompilationCachingSettings* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cache_dir_, lhs_arena,
                                       &other->_impl_.cache_dir_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.model_token_, lhs_arena,
                                       &other->_impl_.model_token_, rhs_arena);
}

::google::protobuf::Metadata CompilationCachingSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_getter, &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_once,
      file_level_metadata_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[7]);
}
// ===================================================================

class EdgeTpuDeviceSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<EdgeTpuDeviceSpec>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EdgeTpuDeviceSpec, _impl_._has_bits_);
  static void set_has_platform_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_chips(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chip_family(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

EdgeTpuDeviceSpec::EdgeTpuDeviceSpec(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.proto.EdgeTpuDeviceSpec)
}
EdgeTpuDeviceSpec::EdgeTpuDeviceSpec(const EdgeTpuDeviceSpec& from) : ::google::protobuf::Message() {
  EdgeTpuDeviceSpec* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.device_paths_){from._impl_.device_paths_},
      decltype(_impl_.platform_type_){},
      decltype(_impl_.num_chips_){},
      decltype(_impl_.chip_family_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  ::memcpy(&_impl_.platform_type_, &from._impl_.platform_type_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.chip_family_) -
    reinterpret_cast<char*>(&_impl_.platform_type_)) + sizeof(_impl_.chip_family_));

  // @@protoc_insertion_point(copy_constructor:tflite.proto.EdgeTpuDeviceSpec)
}
inline void EdgeTpuDeviceSpec::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.device_paths_){arena},
      decltype(_impl_.platform_type_){0},
      decltype(_impl_.num_chips_){0},
      decltype(_impl_.chip_family_){0},
  };
}
EdgeTpuDeviceSpec::~EdgeTpuDeviceSpec() {
  // @@protoc_insertion_point(destructor:tflite.proto.EdgeTpuDeviceSpec)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EdgeTpuDeviceSpec::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_device_paths()->~RepeatedPtrField();
}
void EdgeTpuDeviceSpec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void EdgeTpuDeviceSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.proto.EdgeTpuDeviceSpec)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_device_paths()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.platform_type_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.chip_family_) -
        reinterpret_cast<char*>(&_impl_.platform_type_)) + sizeof(_impl_.chip_family_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EdgeTpuDeviceSpec::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 51, 2> EdgeTpuDeviceSpec::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EdgeTpuDeviceSpec, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_EdgeTpuDeviceSpec_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional int32 chip_family = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EdgeTpuDeviceSpec, _impl_.chip_family_), 2>(),
     {32, 2, 0, PROTOBUF_FIELD_OFFSET(EdgeTpuDeviceSpec, _impl_.chip_family_)}},
    // optional .tflite.proto.EdgeTpuDeviceSpec.PlatformType platform_type = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 0, 3, PROTOBUF_FIELD_OFFSET(EdgeTpuDeviceSpec, _impl_.platform_type_)}},
    // optional int32 num_chips = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EdgeTpuDeviceSpec, _impl_.num_chips_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(EdgeTpuDeviceSpec, _impl_.num_chips_)}},
    // repeated string device_paths = 3;
    {::_pbi::TcParser::FastSR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(EdgeTpuDeviceSpec, _impl_.device_paths_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .tflite.proto.EdgeTpuDeviceSpec.PlatformType platform_type = 1;
    {PROTOBUF_FIELD_OFFSET(EdgeTpuDeviceSpec, _impl_.platform_type_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional int32 num_chips = 2;
    {PROTOBUF_FIELD_OFFSET(EdgeTpuDeviceSpec, _impl_.num_chips_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // repeated string device_paths = 3;
    {PROTOBUF_FIELD_OFFSET(EdgeTpuDeviceSpec, _impl_.device_paths_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kRawString | ::_fl::kRepSString)},
    // optional int32 chip_family = 4;
    {PROTOBUF_FIELD_OFFSET(EdgeTpuDeviceSpec, _impl_.chip_family_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }}, {{
    {0, 4},
  }}, {{
    "\36\0\0\14\0\0\0\0"
    "tflite.proto.EdgeTpuDeviceSpec"
    "device_paths"
  }},
};

::uint8_t* EdgeTpuDeviceSpec::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.proto.EdgeTpuDeviceSpec)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .tflite.proto.EdgeTpuDeviceSpec.PlatformType platform_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_platform_type(), target);
  }

  // optional int32 num_chips = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_num_chips(), target);
  }

  // repeated string device_paths = 3;
  for (int i = 0, n = this->_internal_device_paths_size(); i < n; ++i) {
    const auto& s = this->_internal_device_paths().Get(i);
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "tflite.proto.EdgeTpuDeviceSpec.device_paths");
    target = stream->WriteString(3, s, target);
  }

  // optional int32 chip_family = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_chip_family(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.proto.EdgeTpuDeviceSpec)
  return target;
}

::size_t EdgeTpuDeviceSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.proto.EdgeTpuDeviceSpec)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string device_paths = 3;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_device_paths().size());
  for (int i = 0, n = _internal_device_paths().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_device_paths().Get(i));
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .tflite.proto.EdgeTpuDeviceSpec.PlatformType platform_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_platform_type());
    }

    // optional int32 num_chips = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_num_chips());
    }

    // optional int32 chip_family = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_chip_family());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EdgeTpuDeviceSpec::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    EdgeTpuDeviceSpec::MergeImpl
};
const ::google::protobuf::Message::ClassData*EdgeTpuDeviceSpec::GetClassData() const { return &_class_data_; }


void EdgeTpuDeviceSpec::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EdgeTpuDeviceSpec*>(&to_msg);
  auto& from = static_cast<const EdgeTpuDeviceSpec&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.proto.EdgeTpuDeviceSpec)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_device_paths()->MergeFrom(from._internal_device_paths());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.platform_type_ = from._impl_.platform_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.num_chips_ = from._impl_.num_chips_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.chip_family_ = from._impl_.chip_family_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EdgeTpuDeviceSpec::CopyFrom(const EdgeTpuDeviceSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.proto.EdgeTpuDeviceSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EdgeTpuDeviceSpec::IsInitialized() const {
  return true;
}

void EdgeTpuDeviceSpec::InternalSwap(EdgeTpuDeviceSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.device_paths_.InternalSwap(&other->_impl_.device_paths_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EdgeTpuDeviceSpec, _impl_.chip_family_)
      + sizeof(EdgeTpuDeviceSpec::_impl_.chip_family_)
      - PROTOBUF_FIELD_OFFSET(EdgeTpuDeviceSpec, _impl_.platform_type_)>(
          reinterpret_cast<char*>(&_impl_.platform_type_),
          reinterpret_cast<char*>(&other->_impl_.platform_type_));
}

::google::protobuf::Metadata EdgeTpuDeviceSpec::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_getter, &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_once,
      file_level_metadata_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[8]);
}
// ===================================================================

class EdgeTpuInactivePowerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<EdgeTpuInactivePowerConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EdgeTpuInactivePowerConfig, _impl_._has_bits_);
  static void set_has_inactive_power_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_inactive_timeout_us(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EdgeTpuInactivePowerConfig::EdgeTpuInactivePowerConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.proto.EdgeTpuInactivePowerConfig)
}
EdgeTpuInactivePowerConfig::EdgeTpuInactivePowerConfig(const EdgeTpuInactivePowerConfig& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tflite.proto.EdgeTpuInactivePowerConfig)
}
inline void EdgeTpuInactivePowerConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.inactive_timeout_us_){::int64_t{0}},
      decltype(_impl_.inactive_power_state_){0},
  };
}
EdgeTpuInactivePowerConfig::~EdgeTpuInactivePowerConfig() {
  // @@protoc_insertion_point(destructor:tflite.proto.EdgeTpuInactivePowerConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EdgeTpuInactivePowerConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void EdgeTpuInactivePowerConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void EdgeTpuInactivePowerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.proto.EdgeTpuInactivePowerConfig)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.inactive_timeout_us_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.inactive_power_state_) -
        reinterpret_cast<char*>(&_impl_.inactive_timeout_us_)) + sizeof(_impl_.inactive_power_state_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EdgeTpuInactivePowerConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> EdgeTpuInactivePowerConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EdgeTpuInactivePowerConfig, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_EdgeTpuInactivePowerConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional int64 inactive_timeout_us = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(EdgeTpuInactivePowerConfig, _impl_.inactive_timeout_us_), 0>(),
     {16, 0, 0, PROTOBUF_FIELD_OFFSET(EdgeTpuInactivePowerConfig, _impl_.inactive_timeout_us_)}},
    // optional .tflite.proto.EdgeTpuPowerState inactive_power_state = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 1, 7, PROTOBUF_FIELD_OFFSET(EdgeTpuInactivePowerConfig, _impl_.inactive_power_state_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .tflite.proto.EdgeTpuPowerState inactive_power_state = 1;
    {PROTOBUF_FIELD_OFFSET(EdgeTpuInactivePowerConfig, _impl_.inactive_power_state_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional int64 inactive_timeout_us = 2;
    {PROTOBUF_FIELD_OFFSET(EdgeTpuInactivePowerConfig, _impl_.inactive_timeout_us_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
  }}, {{
    {0, 8},
  }}, {{
  }},
};

::uint8_t* EdgeTpuInactivePowerConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.proto.EdgeTpuInactivePowerConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .tflite.proto.EdgeTpuPowerState inactive_power_state = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_inactive_power_state(), target);
  }

  // optional int64 inactive_timeout_us = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_inactive_timeout_us(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.proto.EdgeTpuInactivePowerConfig)
  return target;
}

::size_t EdgeTpuInactivePowerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.proto.EdgeTpuInactivePowerConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 inactive_timeout_us = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_inactive_timeout_us());
    }

    // optional .tflite.proto.EdgeTpuPowerState inactive_power_state = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_inactive_power_state());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EdgeTpuInactivePowerConfig::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    EdgeTpuInactivePowerConfig::MergeImpl
};
const ::google::protobuf::Message::ClassData*EdgeTpuInactivePowerConfig::GetClassData() const { return &_class_data_; }


void EdgeTpuInactivePowerConfig::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EdgeTpuInactivePowerConfig*>(&to_msg);
  auto& from = static_cast<const EdgeTpuInactivePowerConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.proto.EdgeTpuInactivePowerConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.inactive_timeout_us_ = from._impl_.inactive_timeout_us_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.inactive_power_state_ = from._impl_.inactive_power_state_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EdgeTpuInactivePowerConfig::CopyFrom(const EdgeTpuInactivePowerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.proto.EdgeTpuInactivePowerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EdgeTpuInactivePowerConfig::IsInitialized() const {
  return true;
}

void EdgeTpuInactivePowerConfig::InternalSwap(EdgeTpuInactivePowerConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EdgeTpuInactivePowerConfig, _impl_.inactive_power_state_)
      + sizeof(EdgeTpuInactivePowerConfig::_impl_.inactive_power_state_)
      - PROTOBUF_FIELD_OFFSET(EdgeTpuInactivePowerConfig, _impl_.inactive_timeout_us_)>(
          reinterpret_cast<char*>(&_impl_.inactive_timeout_us_),
          reinterpret_cast<char*>(&other->_impl_.inactive_timeout_us_));
}

::google::protobuf::Metadata EdgeTpuInactivePowerConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_getter, &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_once,
      file_level_metadata_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[9]);
}
// ===================================================================

class EdgeTpuSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<EdgeTpuSettings>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EdgeTpuSettings, _impl_._has_bits_);
  static void set_has_inference_power_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_inference_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::tflite::proto::EdgeTpuDeviceSpec& edgetpu_device_spec(const EdgeTpuSettings* msg);
  static void set_has_edgetpu_device_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_model_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_float_truncation_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_qos_class(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_public_model_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::tflite::proto::EdgeTpuDeviceSpec& EdgeTpuSettings::_Internal::edgetpu_device_spec(const EdgeTpuSettings* msg) {
  return *msg->_impl_.edgetpu_device_spec_;
}
EdgeTpuSettings::EdgeTpuSettings(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.proto.EdgeTpuSettings)
}
EdgeTpuSettings::EdgeTpuSettings(const EdgeTpuSettings& from) : ::google::protobuf::Message() {
  EdgeTpuSettings* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.inactive_power_configs_){from._impl_.inactive_power_configs_},
      decltype(_impl_.hardware_cluster_ids_){from._impl_.hardware_cluster_ids_},
      /* _impl_._hardware_cluster_ids_cached_byte_size_ = */ {0},
      decltype(_impl_.model_token_){},
      decltype(_impl_.public_model_id_){},
      decltype(_impl_.edgetpu_device_spec_){nullptr},
      decltype(_impl_.inference_power_state_){},
      decltype(_impl_.float_truncation_type_){},
      decltype(_impl_.qos_class_){},
      decltype(_impl_.inference_priority_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.model_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.model_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.model_token_.Set(from._internal_model_token(), _this->GetArenaForAllocation());
  }
  _impl_.public_model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.public_model_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.public_model_id_.Set(from._internal_public_model_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.edgetpu_device_spec_ = new ::tflite::proto::EdgeTpuDeviceSpec(*from._impl_.edgetpu_device_spec_);
  }
  ::memcpy(&_impl_.inference_power_state_, &from._impl_.inference_power_state_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.inference_priority_) -
    reinterpret_cast<char*>(&_impl_.inference_power_state_)) + sizeof(_impl_.inference_priority_));

  // @@protoc_insertion_point(copy_constructor:tflite.proto.EdgeTpuSettings)
}
inline void EdgeTpuSettings::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.inactive_power_configs_){arena},
      decltype(_impl_.hardware_cluster_ids_){arena},
      /* _impl_._hardware_cluster_ids_cached_byte_size_ = */ {0},
      decltype(_impl_.model_token_){},
      decltype(_impl_.public_model_id_){},
      decltype(_impl_.edgetpu_device_spec_){nullptr},
      decltype(_impl_.inference_power_state_){0},
      decltype(_impl_.float_truncation_type_){0},
      decltype(_impl_.qos_class_){0},
      decltype(_impl_.inference_priority_){-1},
  };
  _impl_.model_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.model_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.public_model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.public_model_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
EdgeTpuSettings::~EdgeTpuSettings() {
  // @@protoc_insertion_point(destructor:tflite.proto.EdgeTpuSettings)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EdgeTpuSettings::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.inactive_power_configs_.~RepeatedPtrField();
  _impl_.hardware_cluster_ids_.~RepeatedField();
  _impl_.model_token_.Destroy();
  _impl_.public_model_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.edgetpu_device_spec_;
}
void EdgeTpuSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void EdgeTpuSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.proto.EdgeTpuSettings)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_inactive_power_configs()->Clear();
  _internal_mutable_hardware_cluster_ids()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.model_token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.public_model_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.edgetpu_device_spec_ != nullptr);
      _impl_.edgetpu_device_spec_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&_impl_.inference_power_state_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.qos_class_) -
        reinterpret_cast<char*>(&_impl_.inference_power_state_)) + sizeof(_impl_.qos_class_));
    _impl_.inference_priority_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EdgeTpuSettings::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 5, 71, 2> EdgeTpuSettings::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EdgeTpuSettings, _impl_._has_bits_),
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_EdgeTpuSettings_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .tflite.proto.EdgeTpuPowerState inference_power_state = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 3, 7, PROTOBUF_FIELD_OFFSET(EdgeTpuSettings, _impl_.inference_power_state_)}},
    // repeated .tflite.proto.EdgeTpuInactivePowerConfig inactive_power_configs = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(EdgeTpuSettings, _impl_.inactive_power_configs_)}},
    // optional int32 inference_priority = 3 [default = -1];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EdgeTpuSettings, _impl_.inference_priority_), 6>(),
     {24, 6, 0, PROTOBUF_FIELD_OFFSET(EdgeTpuSettings, _impl_.inference_priority_)}},
    // optional .tflite.proto.EdgeTpuDeviceSpec edgetpu_device_spec = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 2, PROTOBUF_FIELD_OFFSET(EdgeTpuSettings, _impl_.edgetpu_device_spec_)}},
    // optional string model_token = 5;
    {::_pbi::TcParser::FastSS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(EdgeTpuSettings, _impl_.model_token_)}},
    // optional .tflite.proto.EdgeTpuSettings.FloatTruncationType float_truncation_type = 6;
    {::_pbi::TcParser::FastEr0S1,
     {48, 4, 3, PROTOBUF_FIELD_OFFSET(EdgeTpuSettings, _impl_.float_truncation_type_)}},
    // optional .tflite.proto.EdgeTpuSettings.QosClass qos_class = 7 [default = QOS_UNDEFINED];
    {::_pbi::TcParser::FastEr0S1,
     {56, 5, 2, PROTOBUF_FIELD_OFFSET(EdgeTpuSettings, _impl_.qos_class_)}},
    // repeated int32 hardware_cluster_ids = 8 [packed = true];
    {::_pbi::TcParser::FastV32P1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(EdgeTpuSettings, _impl_.hardware_cluster_ids_)}},
    // optional string public_model_id = 9;
    {::_pbi::TcParser::FastSS1,
     {74, 1, 0, PROTOBUF_FIELD_OFFSET(EdgeTpuSettings, _impl_.public_model_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .tflite.proto.EdgeTpuPowerState inference_power_state = 1;
    {PROTOBUF_FIELD_OFFSET(EdgeTpuSettings, _impl_.inference_power_state_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // repeated .tflite.proto.EdgeTpuInactivePowerConfig inactive_power_configs = 2;
    {PROTOBUF_FIELD_OFFSET(EdgeTpuSettings, _impl_.inactive_power_configs_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional int32 inference_priority = 3 [default = -1];
    {PROTOBUF_FIELD_OFFSET(EdgeTpuSettings, _impl_.inference_priority_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional .tflite.proto.EdgeTpuDeviceSpec edgetpu_device_spec = 4;
    {PROTOBUF_FIELD_OFFSET(EdgeTpuSettings, _impl_.edgetpu_device_spec_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional string model_token = 5;
    {PROTOBUF_FIELD_OFFSET(EdgeTpuSettings, _impl_.model_token_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional .tflite.proto.EdgeTpuSettings.FloatTruncationType float_truncation_type = 6;
    {PROTOBUF_FIELD_OFFSET(EdgeTpuSettings, _impl_.float_truncation_type_), _Internal::kHasBitsOffset + 4, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional .tflite.proto.EdgeTpuSettings.QosClass qos_class = 7 [default = QOS_UNDEFINED];
    {PROTOBUF_FIELD_OFFSET(EdgeTpuSettings, _impl_.qos_class_), _Internal::kHasBitsOffset + 5, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // repeated int32 hardware_cluster_ids = 8 [packed = true];
    {PROTOBUF_FIELD_OFFSET(EdgeTpuSettings, _impl_.hardware_cluster_ids_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // optional string public_model_id = 9;
    {PROTOBUF_FIELD_OFFSET(EdgeTpuSettings, _impl_.public_model_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }}, {{
    {0, 8},
    {::_pbi::TcParser::GetTable<::tflite::proto::EdgeTpuInactivePowerConfig>()},
    {::_pbi::TcParser::GetTable<::tflite::proto::EdgeTpuDeviceSpec>()},
    {0, 4},
    {0, 3},
  }}, {{
    "\34\0\0\0\0\13\0\0\0\17\0\0\0\0\0\0"
    "tflite.proto.EdgeTpuSettings"
    "model_token"
    "public_model_id"
  }},
};

::uint8_t* EdgeTpuSettings::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.proto.EdgeTpuSettings)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .tflite.proto.EdgeTpuPowerState inference_power_state = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_inference_power_state(), target);
  }

  // repeated .tflite.proto.EdgeTpuInactivePowerConfig inactive_power_configs = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_inactive_power_configs_size()); i < n; i++) {
    const auto& repfield = this->_internal_inactive_power_configs().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 inference_priority = 3 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_inference_priority(), target);
  }

  // optional .tflite.proto.EdgeTpuDeviceSpec edgetpu_device_spec = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::edgetpu_device_spec(this),
        _Internal::edgetpu_device_spec(this).GetCachedSize(), target, stream);
  }

  // optional string model_token = 5;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_model_token();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "tflite.proto.EdgeTpuSettings.model_token");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional .tflite.proto.EdgeTpuSettings.FloatTruncationType float_truncation_type = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_float_truncation_type(), target);
  }

  // optional .tflite.proto.EdgeTpuSettings.QosClass qos_class = 7 [default = QOS_UNDEFINED];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_qos_class(), target);
  }

  // repeated int32 hardware_cluster_ids = 8 [packed = true];
  {
    int byte_size = _impl_._hardware_cluster_ids_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(8, _internal_hardware_cluster_ids(),
                                                 byte_size, target);
    }
  }

  // optional string public_model_id = 9;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_public_model_id();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "tflite.proto.EdgeTpuSettings.public_model_id");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.proto.EdgeTpuSettings)
  return target;
}

::size_t EdgeTpuSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.proto.EdgeTpuSettings)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tflite.proto.EdgeTpuInactivePowerConfig inactive_power_configs = 2;
  total_size += 1UL * this->_internal_inactive_power_configs_size();
  for (const auto& msg : this->_internal_inactive_power_configs()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated int32 hardware_cluster_ids = 8 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_hardware_cluster_ids())
    ;
    _impl_._hardware_cluster_ids_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string model_token = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_model_token());
    }

    // optional string public_model_id = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_public_model_id());
    }

    // optional .tflite.proto.EdgeTpuDeviceSpec edgetpu_device_spec = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.edgetpu_device_spec_);
    }

    // optional .tflite.proto.EdgeTpuPowerState inference_power_state = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_inference_power_state());
    }

    // optional .tflite.proto.EdgeTpuSettings.FloatTruncationType float_truncation_type = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_float_truncation_type());
    }

    // optional .tflite.proto.EdgeTpuSettings.QosClass qos_class = 7 [default = QOS_UNDEFINED];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_qos_class());
    }

    // optional int32 inference_priority = 3 [default = -1];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_inference_priority());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EdgeTpuSettings::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    EdgeTpuSettings::MergeImpl
};
const ::google::protobuf::Message::ClassData*EdgeTpuSettings::GetClassData() const { return &_class_data_; }


void EdgeTpuSettings::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EdgeTpuSettings*>(&to_msg);
  auto& from = static_cast<const EdgeTpuSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.proto.EdgeTpuSettings)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_inactive_power_configs()->MergeFrom(from._internal_inactive_power_configs());
  _this->_internal_mutable_hardware_cluster_ids()->MergeFrom(from._internal_hardware_cluster_ids());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_model_token(from._internal_model_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_public_model_id(from._internal_public_model_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_edgetpu_device_spec()->::tflite::proto::EdgeTpuDeviceSpec::MergeFrom(
          from._internal_edgetpu_device_spec());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.inference_power_state_ = from._impl_.inference_power_state_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.float_truncation_type_ = from._impl_.float_truncation_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.qos_class_ = from._impl_.qos_class_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.inference_priority_ = from._impl_.inference_priority_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EdgeTpuSettings::CopyFrom(const EdgeTpuSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.proto.EdgeTpuSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EdgeTpuSettings::IsInitialized() const {
  return true;
}

void EdgeTpuSettings::InternalSwap(EdgeTpuSettings* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.inactive_power_configs_.InternalSwap(&other->_impl_.inactive_power_configs_);
  _impl_.hardware_cluster_ids_.InternalSwap(&other->_impl_.hardware_cluster_ids_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.model_token_, lhs_arena,
                                       &other->_impl_.model_token_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.public_model_id_, lhs_arena,
                                       &other->_impl_.public_model_id_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EdgeTpuSettings, _impl_.inference_priority_)
      + sizeof(EdgeTpuSettings::_impl_.inference_priority_)
      - PROTOBUF_FIELD_OFFSET(EdgeTpuSettings, _impl_.edgetpu_device_spec_)>(
          reinterpret_cast<char*>(&_impl_.edgetpu_device_spec_),
          reinterpret_cast<char*>(&other->_impl_.edgetpu_device_spec_));
}

::google::protobuf::Metadata EdgeTpuSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_getter, &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_once,
      file_level_metadata_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[10]);
}
// ===================================================================

class GoogleEdgeTpuSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<GoogleEdgeTpuSettings>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GoogleEdgeTpuSettings, _impl_._has_bits_);
  static void set_has_log_verbosity(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_enable_tracing(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_extension_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_model_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_use_async_api(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_delegate_should_manage_cache_for_inputs(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_delegate_should_manage_cache_for_outputs(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_prefer_cache_coherency_for_inputs(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_prefer_cache_coherency_for_outputs(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

GoogleEdgeTpuSettings::GoogleEdgeTpuSettings(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.proto.GoogleEdgeTpuSettings)
}
GoogleEdgeTpuSettings::GoogleEdgeTpuSettings(const GoogleEdgeTpuSettings& from) : ::google::protobuf::Message() {
  GoogleEdgeTpuSettings* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.extension_data_){},
      decltype(_impl_.model_identifier_){},
      decltype(_impl_.priority_){},
      decltype(_impl_.enable_tracing_){},
      decltype(_impl_.use_async_api_){},
      decltype(_impl_.prefer_cache_coherency_for_inputs_){},
      decltype(_impl_.prefer_cache_coherency_for_outputs_){},
      decltype(_impl_.log_verbosity_){},
      decltype(_impl_.delegate_should_manage_cache_for_inputs_){},
      decltype(_impl_.delegate_should_manage_cache_for_outputs_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.extension_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.extension_data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.extension_data_.Set(from._internal_extension_data(), _this->GetArenaForAllocation());
  }
  _impl_.model_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.model_identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.model_identifier_.Set(from._internal_model_identifier(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.priority_, &from._impl_.priority_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.delegate_should_manage_cache_for_outputs_) -
    reinterpret_cast<char*>(&_impl_.priority_)) + sizeof(_impl_.delegate_should_manage_cache_for_outputs_));

  // @@protoc_insertion_point(copy_constructor:tflite.proto.GoogleEdgeTpuSettings)
}
inline void GoogleEdgeTpuSettings::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.extension_data_){},
      decltype(_impl_.model_identifier_){},
      decltype(_impl_.priority_){0},
      decltype(_impl_.enable_tracing_){false},
      decltype(_impl_.use_async_api_){false},
      decltype(_impl_.prefer_cache_coherency_for_inputs_){0},
      decltype(_impl_.prefer_cache_coherency_for_outputs_){0},
      decltype(_impl_.log_verbosity_){-1},
      decltype(_impl_.delegate_should_manage_cache_for_inputs_){true},
      decltype(_impl_.delegate_should_manage_cache_for_outputs_){true},
  };
  _impl_.extension_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.extension_data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.model_identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
GoogleEdgeTpuSettings::~GoogleEdgeTpuSettings() {
  // @@protoc_insertion_point(destructor:tflite.proto.GoogleEdgeTpuSettings)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GoogleEdgeTpuSettings::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.extension_data_.Destroy();
  _impl_.model_identifier_.Destroy();
}
void GoogleEdgeTpuSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void GoogleEdgeTpuSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.proto.GoogleEdgeTpuSettings)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.extension_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.model_identifier_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.priority_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.prefer_cache_coherency_for_outputs_) -
        reinterpret_cast<char*>(&_impl_.priority_)) + sizeof(_impl_.prefer_cache_coherency_for_outputs_));
    _impl_.log_verbosity_ = -1;
  }
  if (cached_has_bits & 0x00000300u) {
    _impl_.delegate_should_manage_cache_for_inputs_ = true;
    _impl_.delegate_should_manage_cache_for_outputs_ = true;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GoogleEdgeTpuSettings::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 3, 67, 2> GoogleEdgeTpuSettings::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GoogleEdgeTpuSettings, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GoogleEdgeTpuSettings_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional int32 log_verbosity = 1 [default = -1];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GoogleEdgeTpuSettings, _impl_.log_verbosity_), 7>(),
     {8, 7, 0, PROTOBUF_FIELD_OFFSET(GoogleEdgeTpuSettings, _impl_.log_verbosity_)}},
    // optional bool enable_tracing = 2 [default = false];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(GoogleEdgeTpuSettings, _impl_.enable_tracing_), 3>(),
     {16, 3, 0, PROTOBUF_FIELD_OFFSET(GoogleEdgeTpuSettings, _impl_.enable_tracing_)}},
    // optional .tflite.proto.GoogleEdgeTpuSettings.Priority priority = 3;
    {::_pbi::TcParser::FastEr0S1,
     {24, 2, 3, PROTOBUF_FIELD_OFFSET(GoogleEdgeTpuSettings, _impl_.priority_)}},
    // optional bytes extension_data = 4;
    {::_pbi::TcParser::FastBS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(GoogleEdgeTpuSettings, _impl_.extension_data_)}},
    // optional string model_identifier = 5 [default = ""];
    {::_pbi::TcParser::FastSS1,
     {42, 1, 0, PROTOBUF_FIELD_OFFSET(GoogleEdgeTpuSettings, _impl_.model_identifier_)}},
    // optional bool use_async_api = 6 [default = false];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(GoogleEdgeTpuSettings, _impl_.use_async_api_), 4>(),
     {48, 4, 0, PROTOBUF_FIELD_OFFSET(GoogleEdgeTpuSettings, _impl_.use_async_api_)}},
    // optional bool delegate_should_manage_cache_for_inputs = 7 [default = true];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(GoogleEdgeTpuSettings, _impl_.delegate_should_manage_cache_for_inputs_), 8>(),
     {56, 8, 0, PROTOBUF_FIELD_OFFSET(GoogleEdgeTpuSettings, _impl_.delegate_should_manage_cache_for_inputs_)}},
    // optional bool delegate_should_manage_cache_for_outputs = 8 [default = true];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(GoogleEdgeTpuSettings, _impl_.delegate_should_manage_cache_for_outputs_), 9>(),
     {64, 9, 0, PROTOBUF_FIELD_OFFSET(GoogleEdgeTpuSettings, _impl_.delegate_should_manage_cache_for_outputs_)}},
    // optional .tflite.proto.GoogleEdgeTpuSettings.TriState prefer_cache_coherency_for_inputs = 9;
    {::_pbi::TcParser::FastEr0S1,
     {72, 5, 2, PROTOBUF_FIELD_OFFSET(GoogleEdgeTpuSettings, _impl_.prefer_cache_coherency_for_inputs_)}},
    // optional .tflite.proto.GoogleEdgeTpuSettings.TriState prefer_cache_coherency_for_outputs = 10;
    {::_pbi::TcParser::FastEr0S1,
     {80, 6, 2, PROTOBUF_FIELD_OFFSET(GoogleEdgeTpuSettings, _impl_.prefer_cache_coherency_for_outputs_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 log_verbosity = 1 [default = -1];
    {PROTOBUF_FIELD_OFFSET(GoogleEdgeTpuSettings, _impl_.log_verbosity_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional bool enable_tracing = 2 [default = false];
    {PROTOBUF_FIELD_OFFSET(GoogleEdgeTpuSettings, _impl_.enable_tracing_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional .tflite.proto.GoogleEdgeTpuSettings.Priority priority = 3;
    {PROTOBUF_FIELD_OFFSET(GoogleEdgeTpuSettings, _impl_.priority_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional bytes extension_data = 4;
    {PROTOBUF_FIELD_OFFSET(GoogleEdgeTpuSettings, _impl_.extension_data_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional string model_identifier = 5 [default = ""];
    {PROTOBUF_FIELD_OFFSET(GoogleEdgeTpuSettings, _impl_.model_identifier_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional bool use_async_api = 6 [default = false];
    {PROTOBUF_FIELD_OFFSET(GoogleEdgeTpuSettings, _impl_.use_async_api_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool delegate_should_manage_cache_for_inputs = 7 [default = true];
    {PROTOBUF_FIELD_OFFSET(GoogleEdgeTpuSettings, _impl_.delegate_should_manage_cache_for_inputs_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool delegate_should_manage_cache_for_outputs = 8 [default = true];
    {PROTOBUF_FIELD_OFFSET(GoogleEdgeTpuSettings, _impl_.delegate_should_manage_cache_for_outputs_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional .tflite.proto.GoogleEdgeTpuSettings.TriState prefer_cache_coherency_for_inputs = 9;
    {PROTOBUF_FIELD_OFFSET(GoogleEdgeTpuSettings, _impl_.prefer_cache_coherency_for_inputs_), _Internal::kHasBitsOffset + 5, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional .tflite.proto.GoogleEdgeTpuSettings.TriState prefer_cache_coherency_for_outputs = 10;
    {PROTOBUF_FIELD_OFFSET(GoogleEdgeTpuSettings, _impl_.prefer_cache_coherency_for_outputs_), _Internal::kHasBitsOffset + 6, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
  }}, {{
    {0, 4},
    {0, 3},
    {0, 3},
  }}, {{
    "\42\0\0\0\0\20\0\0\0\0\0\0\0\0\0\0"
    "tflite.proto.GoogleEdgeTpuSettings"
    "model_identifier"
  }},
};

::uint8_t* GoogleEdgeTpuSettings::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.proto.GoogleEdgeTpuSettings)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 log_verbosity = 1 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_log_verbosity(), target);
  }

  // optional bool enable_tracing = 2 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_enable_tracing(), target);
  }

  // optional .tflite.proto.GoogleEdgeTpuSettings.Priority priority = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_priority(), target);
  }

  // optional bytes extension_data = 4;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_extension_data();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  // optional string model_identifier = 5 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_model_identifier();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "tflite.proto.GoogleEdgeTpuSettings.model_identifier");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional bool use_async_api = 6 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_use_async_api(), target);
  }

  // optional bool delegate_should_manage_cache_for_inputs = 7 [default = true];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_delegate_should_manage_cache_for_inputs(), target);
  }

  // optional bool delegate_should_manage_cache_for_outputs = 8 [default = true];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_delegate_should_manage_cache_for_outputs(), target);
  }

  // optional .tflite.proto.GoogleEdgeTpuSettings.TriState prefer_cache_coherency_for_inputs = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        9, this->_internal_prefer_cache_coherency_for_inputs(), target);
  }

  // optional .tflite.proto.GoogleEdgeTpuSettings.TriState prefer_cache_coherency_for_outputs = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        10, this->_internal_prefer_cache_coherency_for_outputs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.proto.GoogleEdgeTpuSettings)
  return target;
}

::size_t GoogleEdgeTpuSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.proto.GoogleEdgeTpuSettings)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes extension_data = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_extension_data());
    }

    // optional string model_identifier = 5 [default = ""];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_model_identifier());
    }

    // optional .tflite.proto.GoogleEdgeTpuSettings.Priority priority = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_priority());
    }

    // optional bool enable_tracing = 2 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2;
    }

    // optional bool use_async_api = 6 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }

    // optional .tflite.proto.GoogleEdgeTpuSettings.TriState prefer_cache_coherency_for_inputs = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_prefer_cache_coherency_for_inputs());
    }

    // optional .tflite.proto.GoogleEdgeTpuSettings.TriState prefer_cache_coherency_for_outputs = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_prefer_cache_coherency_for_outputs());
    }

    // optional int32 log_verbosity = 1 [default = -1];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_log_verbosity());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool delegate_should_manage_cache_for_inputs = 7 [default = true];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2;
    }

    // optional bool delegate_should_manage_cache_for_outputs = 8 [default = true];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GoogleEdgeTpuSettings::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    GoogleEdgeTpuSettings::MergeImpl
};
const ::google::protobuf::Message::ClassData*GoogleEdgeTpuSettings::GetClassData() const { return &_class_data_; }


void GoogleEdgeTpuSettings::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GoogleEdgeTpuSettings*>(&to_msg);
  auto& from = static_cast<const GoogleEdgeTpuSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.proto.GoogleEdgeTpuSettings)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_extension_data(from._internal_extension_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_model_identifier(from._internal_model_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.priority_ = from._impl_.priority_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.enable_tracing_ = from._impl_.enable_tracing_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.use_async_api_ = from._impl_.use_async_api_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.prefer_cache_coherency_for_inputs_ = from._impl_.prefer_cache_coherency_for_inputs_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.prefer_cache_coherency_for_outputs_ = from._impl_.prefer_cache_coherency_for_outputs_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.log_verbosity_ = from._impl_.log_verbosity_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.delegate_should_manage_cache_for_inputs_ = from._impl_.delegate_should_manage_cache_for_inputs_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.delegate_should_manage_cache_for_outputs_ = from._impl_.delegate_should_manage_cache_for_outputs_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GoogleEdgeTpuSettings::CopyFrom(const GoogleEdgeTpuSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.proto.GoogleEdgeTpuSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GoogleEdgeTpuSettings::IsInitialized() const {
  return true;
}

void GoogleEdgeTpuSettings::InternalSwap(GoogleEdgeTpuSettings* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.extension_data_, lhs_arena,
                                       &other->_impl_.extension_data_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.model_identifier_, lhs_arena,
                                       &other->_impl_.model_identifier_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GoogleEdgeTpuSettings, _impl_.delegate_should_manage_cache_for_outputs_)
      + sizeof(GoogleEdgeTpuSettings::_impl_.delegate_should_manage_cache_for_outputs_)
      - PROTOBUF_FIELD_OFFSET(GoogleEdgeTpuSettings, _impl_.priority_)>(
          reinterpret_cast<char*>(&_impl_.priority_),
          reinterpret_cast<char*>(&other->_impl_.priority_));
}

::google::protobuf::Metadata GoogleEdgeTpuSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_getter, &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_once,
      file_level_metadata_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[11]);
}
// ===================================================================

class CoralSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<CoralSettings>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CoralSettings, _impl_._has_bits_);
  static void set_has_device(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_performance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_usb_always_dfu(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_usb_max_bulk_in_queue_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CoralSettings::CoralSettings(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.proto.CoralSettings)
}
CoralSettings::CoralSettings(const CoralSettings& from) : ::google::protobuf::Message() {
  CoralSettings* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.device_){},
      decltype(_impl_.usb_always_dfu_){},
      decltype(_impl_.usb_max_bulk_in_queue_length_){},
      decltype(_impl_.performance_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.device_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.device_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.device_.Set(from._internal_device(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.usb_always_dfu_, &from._impl_.usb_always_dfu_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.performance_) -
    reinterpret_cast<char*>(&_impl_.usb_always_dfu_)) + sizeof(_impl_.performance_));

  // @@protoc_insertion_point(copy_constructor:tflite.proto.CoralSettings)
}
inline void CoralSettings::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.device_){},
      decltype(_impl_.usb_always_dfu_){false},
      decltype(_impl_.usb_max_bulk_in_queue_length_){0},
      decltype(_impl_.performance_){1},
  };
  _impl_.device_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.device_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
CoralSettings::~CoralSettings() {
  // @@protoc_insertion_point(destructor:tflite.proto.CoralSettings)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CoralSettings::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.device_.Destroy();
}
void CoralSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CoralSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.proto.CoralSettings)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.device_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.usb_always_dfu_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.usb_max_bulk_in_queue_length_) -
        reinterpret_cast<char*>(&_impl_.usb_always_dfu_)) + sizeof(_impl_.usb_max_bulk_in_queue_length_));
    _impl_.performance_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CoralSettings::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 41, 2> CoralSettings::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CoralSettings, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CoralSettings_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional int32 usb_max_bulk_in_queue_length = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CoralSettings, _impl_.usb_max_bulk_in_queue_length_), 2>(),
     {32, 2, 0, PROTOBUF_FIELD_OFFSET(CoralSettings, _impl_.usb_max_bulk_in_queue_length_)}},
    // optional string device = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CoralSettings, _impl_.device_)}},
    // optional .tflite.proto.CoralSettings.Performance performance = 2 [default = MAXIMUM];
    {::_pbi::TcParser::FastEr0S1,
     {16, 3, 4, PROTOBUF_FIELD_OFFSET(CoralSettings, _impl_.performance_)}},
    // optional bool usb_always_dfu = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CoralSettings, _impl_.usb_always_dfu_), 1>(),
     {24, 1, 0, PROTOBUF_FIELD_OFFSET(CoralSettings, _impl_.usb_always_dfu_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string device = 1;
    {PROTOBUF_FIELD_OFFSET(CoralSettings, _impl_.device_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional .tflite.proto.CoralSettings.Performance performance = 2 [default = MAXIMUM];
    {PROTOBUF_FIELD_OFFSET(CoralSettings, _impl_.performance_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional bool usb_always_dfu = 3;
    {PROTOBUF_FIELD_OFFSET(CoralSettings, _impl_.usb_always_dfu_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional int32 usb_max_bulk_in_queue_length = 4;
    {PROTOBUF_FIELD_OFFSET(CoralSettings, _impl_.usb_max_bulk_in_queue_length_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }}, {{
    {0, 5},
  }}, {{
    "\32\6\0\0\0\0\0\0"
    "tflite.proto.CoralSettings"
    "device"
  }},
};

::uint8_t* CoralSettings::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.proto.CoralSettings)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string device = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_device();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "tflite.proto.CoralSettings.device");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional .tflite.proto.CoralSettings.Performance performance = 2 [default = MAXIMUM];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_performance(), target);
  }

  // optional bool usb_always_dfu = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_usb_always_dfu(), target);
  }

  // optional int32 usb_max_bulk_in_queue_length = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_usb_max_bulk_in_queue_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.proto.CoralSettings)
  return target;
}

::size_t CoralSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.proto.CoralSettings)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string device = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_device());
    }

    // optional bool usb_always_dfu = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

    // optional int32 usb_max_bulk_in_queue_length = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_usb_max_bulk_in_queue_length());
    }

    // optional .tflite.proto.CoralSettings.Performance performance = 2 [default = MAXIMUM];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_performance());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CoralSettings::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CoralSettings::MergeImpl
};
const ::google::protobuf::Message::ClassData*CoralSettings::GetClassData() const { return &_class_data_; }


void CoralSettings::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CoralSettings*>(&to_msg);
  auto& from = static_cast<const CoralSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.proto.CoralSettings)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_device(from._internal_device());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.usb_always_dfu_ = from._impl_.usb_always_dfu_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.usb_max_bulk_in_queue_length_ = from._impl_.usb_max_bulk_in_queue_length_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.performance_ = from._impl_.performance_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CoralSettings::CopyFrom(const CoralSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.proto.CoralSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CoralSettings::IsInitialized() const {
  return true;
}

void CoralSettings::InternalSwap(CoralSettings* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.device_, lhs_arena,
                                       &other->_impl_.device_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CoralSettings, _impl_.performance_)
      + sizeof(CoralSettings::_impl_.performance_)
      - PROTOBUF_FIELD_OFFSET(CoralSettings, _impl_.usb_always_dfu_)>(
          reinterpret_cast<char*>(&_impl_.usb_always_dfu_),
          reinterpret_cast<char*>(&other->_impl_.usb_always_dfu_));
}

::google::protobuf::Metadata CoralSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_getter, &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_once,
      file_level_metadata_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[12]);
}
// ===================================================================

class CPUSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<CPUSettings>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CPUSettings, _impl_._has_bits_);
  static void set_has_num_threads(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPUSettings::CPUSettings(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.proto.CPUSettings)
}
CPUSettings::CPUSettings(const CPUSettings& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tflite.proto.CPUSettings)
}
inline void CPUSettings::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.num_threads_){-1},
  };
}
CPUSettings::~CPUSettings() {
  // @@protoc_insertion_point(destructor:tflite.proto.CPUSettings)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CPUSettings::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void CPUSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CPUSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.proto.CPUSettings)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.num_threads_ = -1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CPUSettings::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> CPUSettings::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CPUSettings, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CPUSettings_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional int32 num_threads = 1 [default = -1];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CPUSettings, _impl_.num_threads_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(CPUSettings, _impl_.num_threads_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 num_threads = 1 [default = -1];
    {PROTOBUF_FIELD_OFFSET(CPUSettings, _impl_.num_threads_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CPUSettings::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.proto.CPUSettings)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 num_threads = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_num_threads(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.proto.CPUSettings)
  return target;
}

::size_t CPUSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.proto.CPUSettings)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 num_threads = 1 [default = -1];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_num_threads());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CPUSettings::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CPUSettings::MergeImpl
};
const ::google::protobuf::Message::ClassData*CPUSettings::GetClassData() const { return &_class_data_; }


void CPUSettings::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CPUSettings*>(&to_msg);
  auto& from = static_cast<const CPUSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.proto.CPUSettings)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_num_threads(from._internal_num_threads());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CPUSettings::CopyFrom(const CPUSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.proto.CPUSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CPUSettings::IsInitialized() const {
  return true;
}

void CPUSettings::InternalSwap(CPUSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
        swap(_impl_.num_threads_, other->_impl_.num_threads_);
}

::google::protobuf::Metadata CPUSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_getter, &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_once,
      file_level_metadata_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[13]);
}
// ===================================================================

class TFLiteSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<TFLiteSettings>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TFLiteSettings, _impl_._has_bits_);
  static void set_has_delegate(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::tflite::proto::NNAPISettings& nnapi_settings(const TFLiteSettings* msg);
  static void set_has_nnapi_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tflite::proto::GPUSettings& gpu_settings(const TFLiteSettings* msg);
  static void set_has_gpu_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tflite::proto::HexagonSettings& hexagon_settings(const TFLiteSettings* msg);
  static void set_has_hexagon_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::tflite::proto::XNNPackSettings& xnnpack_settings(const TFLiteSettings* msg);
  static void set_has_xnnpack_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::tflite::proto::CoreMLSettings& coreml_settings(const TFLiteSettings* msg);
  static void set_has_coreml_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::tflite::proto::CPUSettings& cpu_settings(const TFLiteSettings* msg);
  static void set_has_cpu_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_max_delegated_partitions(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::tflite::proto::EdgeTpuSettings& edgetpu_settings(const TFLiteSettings* msg);
  static void set_has_edgetpu_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::tflite::proto::CoralSettings& coral_settings(const TFLiteSettings* msg);
  static void set_has_coral_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::tflite::proto::FallbackSettings& fallback_settings(const TFLiteSettings* msg);
  static void set_has_fallback_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_disable_default_delegates(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::tflite::proto::StableDelegateLoaderSettings& stable_delegate_loader_settings(const TFLiteSettings* msg);
  static void set_has_stable_delegate_loader_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::tflite::proto::GoogleEdgeTpuSettings& google_edgetpu_settings(const TFLiteSettings* msg);
  static void set_has_google_edgetpu_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::tflite::proto::CompilationCachingSettings& compilation_caching_settings(const TFLiteSettings* msg);
  static void set_has_compilation_caching_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::tflite::proto::NNAPISettings& TFLiteSettings::_Internal::nnapi_settings(const TFLiteSettings* msg) {
  return *msg->_impl_.nnapi_settings_;
}
const ::tflite::proto::GPUSettings& TFLiteSettings::_Internal::gpu_settings(const TFLiteSettings* msg) {
  return *msg->_impl_.gpu_settings_;
}
const ::tflite::proto::HexagonSettings& TFLiteSettings::_Internal::hexagon_settings(const TFLiteSettings* msg) {
  return *msg->_impl_.hexagon_settings_;
}
const ::tflite::proto::XNNPackSettings& TFLiteSettings::_Internal::xnnpack_settings(const TFLiteSettings* msg) {
  return *msg->_impl_.xnnpack_settings_;
}
const ::tflite::proto::CoreMLSettings& TFLiteSettings::_Internal::coreml_settings(const TFLiteSettings* msg) {
  return *msg->_impl_.coreml_settings_;
}
const ::tflite::proto::CPUSettings& TFLiteSettings::_Internal::cpu_settings(const TFLiteSettings* msg) {
  return *msg->_impl_.cpu_settings_;
}
const ::tflite::proto::EdgeTpuSettings& TFLiteSettings::_Internal::edgetpu_settings(const TFLiteSettings* msg) {
  return *msg->_impl_.edgetpu_settings_;
}
const ::tflite::proto::CoralSettings& TFLiteSettings::_Internal::coral_settings(const TFLiteSettings* msg) {
  return *msg->_impl_.coral_settings_;
}
const ::tflite::proto::FallbackSettings& TFLiteSettings::_Internal::fallback_settings(const TFLiteSettings* msg) {
  return *msg->_impl_.fallback_settings_;
}
const ::tflite::proto::StableDelegateLoaderSettings& TFLiteSettings::_Internal::stable_delegate_loader_settings(const TFLiteSettings* msg) {
  return *msg->_impl_.stable_delegate_loader_settings_;
}
const ::tflite::proto::GoogleEdgeTpuSettings& TFLiteSettings::_Internal::google_edgetpu_settings(const TFLiteSettings* msg) {
  return *msg->_impl_.google_edgetpu_settings_;
}
const ::tflite::proto::CompilationCachingSettings& TFLiteSettings::_Internal::compilation_caching_settings(const TFLiteSettings* msg) {
  return *msg->_impl_.compilation_caching_settings_;
}
TFLiteSettings::TFLiteSettings(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.proto.TFLiteSettings)
}
TFLiteSettings::TFLiteSettings(const TFLiteSettings& from) : ::google::protobuf::Message() {
  TFLiteSettings* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.nnapi_settings_){nullptr},
      decltype(_impl_.gpu_settings_){nullptr},
      decltype(_impl_.hexagon_settings_){nullptr},
      decltype(_impl_.xnnpack_settings_){nullptr},
      decltype(_impl_.cpu_settings_){nullptr},
      decltype(_impl_.edgetpu_settings_){nullptr},
      decltype(_impl_.fallback_settings_){nullptr},
      decltype(_impl_.coral_settings_){nullptr},
      decltype(_impl_.coreml_settings_){nullptr},
      decltype(_impl_.stable_delegate_loader_settings_){nullptr},
      decltype(_impl_.google_edgetpu_settings_){nullptr},
      decltype(_impl_.compilation_caching_settings_){nullptr},
      decltype(_impl_.delegate_){},
      decltype(_impl_.max_delegated_partitions_){},
      decltype(_impl_.disable_default_delegates_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.nnapi_settings_ = new ::tflite::proto::NNAPISettings(*from._impl_.nnapi_settings_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.gpu_settings_ = new ::tflite::proto::GPUSettings(*from._impl_.gpu_settings_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.hexagon_settings_ = new ::tflite::proto::HexagonSettings(*from._impl_.hexagon_settings_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.xnnpack_settings_ = new ::tflite::proto::XNNPackSettings(*from._impl_.xnnpack_settings_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.cpu_settings_ = new ::tflite::proto::CPUSettings(*from._impl_.cpu_settings_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000020u) != 0) {
    _this->_impl_.edgetpu_settings_ = new ::tflite::proto::EdgeTpuSettings(*from._impl_.edgetpu_settings_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000040u) != 0) {
    _this->_impl_.fallback_settings_ = new ::tflite::proto::FallbackSettings(*from._impl_.fallback_settings_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000080u) != 0) {
    _this->_impl_.coral_settings_ = new ::tflite::proto::CoralSettings(*from._impl_.coral_settings_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000100u) != 0) {
    _this->_impl_.coreml_settings_ = new ::tflite::proto::CoreMLSettings(*from._impl_.coreml_settings_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000200u) != 0) {
    _this->_impl_.stable_delegate_loader_settings_ = new ::tflite::proto::StableDelegateLoaderSettings(*from._impl_.stable_delegate_loader_settings_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000400u) != 0) {
    _this->_impl_.google_edgetpu_settings_ = new ::tflite::proto::GoogleEdgeTpuSettings(*from._impl_.google_edgetpu_settings_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000800u) != 0) {
    _this->_impl_.compilation_caching_settings_ = new ::tflite::proto::CompilationCachingSettings(*from._impl_.compilation_caching_settings_);
  }
  ::memcpy(&_impl_.delegate_, &from._impl_.delegate_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.disable_default_delegates_) -
    reinterpret_cast<char*>(&_impl_.delegate_)) + sizeof(_impl_.disable_default_delegates_));

  // @@protoc_insertion_point(copy_constructor:tflite.proto.TFLiteSettings)
}
inline void TFLiteSettings::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.nnapi_settings_){nullptr},
      decltype(_impl_.gpu_settings_){nullptr},
      decltype(_impl_.hexagon_settings_){nullptr},
      decltype(_impl_.xnnpack_settings_){nullptr},
      decltype(_impl_.cpu_settings_){nullptr},
      decltype(_impl_.edgetpu_settings_){nullptr},
      decltype(_impl_.fallback_settings_){nullptr},
      decltype(_impl_.coral_settings_){nullptr},
      decltype(_impl_.coreml_settings_){nullptr},
      decltype(_impl_.stable_delegate_loader_settings_){nullptr},
      decltype(_impl_.google_edgetpu_settings_){nullptr},
      decltype(_impl_.compilation_caching_settings_){nullptr},
      decltype(_impl_.delegate_){0},
      decltype(_impl_.max_delegated_partitions_){0},
      decltype(_impl_.disable_default_delegates_){false},
  };
}
TFLiteSettings::~TFLiteSettings() {
  // @@protoc_insertion_point(destructor:tflite.proto.TFLiteSettings)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TFLiteSettings::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.nnapi_settings_;
  if (this != internal_default_instance()) delete _impl_.gpu_settings_;
  if (this != internal_default_instance()) delete _impl_.hexagon_settings_;
  if (this != internal_default_instance()) delete _impl_.xnnpack_settings_;
  if (this != internal_default_instance()) delete _impl_.cpu_settings_;
  if (this != internal_default_instance()) delete _impl_.edgetpu_settings_;
  if (this != internal_default_instance()) delete _impl_.fallback_settings_;
  if (this != internal_default_instance()) delete _impl_.coral_settings_;
  if (this != internal_default_instance()) delete _impl_.coreml_settings_;
  if (this != internal_default_instance()) delete _impl_.stable_delegate_loader_settings_;
  if (this != internal_default_instance()) delete _impl_.google_edgetpu_settings_;
  if (this != internal_default_instance()) delete _impl_.compilation_caching_settings_;
}
void TFLiteSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TFLiteSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.proto.TFLiteSettings)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.nnapi_settings_ != nullptr);
      _impl_.nnapi_settings_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.gpu_settings_ != nullptr);
      _impl_.gpu_settings_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.hexagon_settings_ != nullptr);
      _impl_.hexagon_settings_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.xnnpack_settings_ != nullptr);
      _impl_.xnnpack_settings_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.cpu_settings_ != nullptr);
      _impl_.cpu_settings_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.edgetpu_settings_ != nullptr);
      _impl_.edgetpu_settings_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.fallback_settings_ != nullptr);
      _impl_.fallback_settings_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.coral_settings_ != nullptr);
      _impl_.coral_settings_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(_impl_.coreml_settings_ != nullptr);
      _impl_.coreml_settings_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(_impl_.stable_delegate_loader_settings_ != nullptr);
      _impl_.stable_delegate_loader_settings_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(_impl_.google_edgetpu_settings_ != nullptr);
      _impl_.google_edgetpu_settings_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(_impl_.compilation_caching_settings_ != nullptr);
      _impl_.compilation_caching_settings_->Clear();
    }
  }
  if (cached_has_bits & 0x00007000u) {
    ::memset(&_impl_.delegate_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.disable_default_delegates_) -
        reinterpret_cast<char*>(&_impl_.delegate_)) + sizeof(_impl_.disable_default_delegates_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TFLiteSettings::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 15, 13, 0, 2> TFLiteSettings::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TFLiteSettings, _impl_._has_bits_),
    0, // no _extensions_
    15, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294934528,  // skipmap
    offsetof(decltype(_table_), field_entries),
    15,  // num_field_entries
    13,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TFLiteSettings_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .tflite.proto.Delegate delegate = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 12, 7, PROTOBUF_FIELD_OFFSET(TFLiteSettings, _impl_.delegate_)}},
    // optional .tflite.proto.NNAPISettings nnapi_settings = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 1, PROTOBUF_FIELD_OFFSET(TFLiteSettings, _impl_.nnapi_settings_)}},
    // optional .tflite.proto.GPUSettings gpu_settings = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 2, PROTOBUF_FIELD_OFFSET(TFLiteSettings, _impl_.gpu_settings_)}},
    // optional .tflite.proto.HexagonSettings hexagon_settings = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 3, PROTOBUF_FIELD_OFFSET(TFLiteSettings, _impl_.hexagon_settings_)}},
    // optional .tflite.proto.XNNPackSettings xnnpack_settings = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 3, 4, PROTOBUF_FIELD_OFFSET(TFLiteSettings, _impl_.xnnpack_settings_)}},
    // optional .tflite.proto.CPUSettings cpu_settings = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 4, 5, PROTOBUF_FIELD_OFFSET(TFLiteSettings, _impl_.cpu_settings_)}},
    // optional int32 max_delegated_partitions = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TFLiteSettings, _impl_.max_delegated_partitions_), 13>(),
     {56, 13, 0, PROTOBUF_FIELD_OFFSET(TFLiteSettings, _impl_.max_delegated_partitions_)}},
    // optional .tflite.proto.EdgeTpuSettings edgetpu_settings = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 5, 6, PROTOBUF_FIELD_OFFSET(TFLiteSettings, _impl_.edgetpu_settings_)}},
    // optional .tflite.proto.FallbackSettings fallback_settings = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 6, 7, PROTOBUF_FIELD_OFFSET(TFLiteSettings, _impl_.fallback_settings_)}},
    // optional .tflite.proto.CoralSettings coral_settings = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 7, 8, PROTOBUF_FIELD_OFFSET(TFLiteSettings, _impl_.coral_settings_)}},
    // optional .tflite.proto.CoreMLSettings coreml_settings = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 8, 9, PROTOBUF_FIELD_OFFSET(TFLiteSettings, _impl_.coreml_settings_)}},
    // optional bool disable_default_delegates = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TFLiteSettings, _impl_.disable_default_delegates_), 14>(),
     {96, 14, 0, PROTOBUF_FIELD_OFFSET(TFLiteSettings, _impl_.disable_default_delegates_)}},
    // optional .tflite.proto.StableDelegateLoaderSettings stable_delegate_loader_settings = 13;
    {::_pbi::TcParser::FastMtS1,
     {106, 9, 10, PROTOBUF_FIELD_OFFSET(TFLiteSettings, _impl_.stable_delegate_loader_settings_)}},
    // optional .tflite.proto.GoogleEdgeTpuSettings google_edgetpu_settings = 14;
    {::_pbi::TcParser::FastMtS1,
     {114, 10, 11, PROTOBUF_FIELD_OFFSET(TFLiteSettings, _impl_.google_edgetpu_settings_)}},
    // optional .tflite.proto.CompilationCachingSettings compilation_caching_settings = 15;
    {::_pbi::TcParser::FastMtS1,
     {122, 11, 12, PROTOBUF_FIELD_OFFSET(TFLiteSettings, _impl_.compilation_caching_settings_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .tflite.proto.Delegate delegate = 1;
    {PROTOBUF_FIELD_OFFSET(TFLiteSettings, _impl_.delegate_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional .tflite.proto.NNAPISettings nnapi_settings = 2;
    {PROTOBUF_FIELD_OFFSET(TFLiteSettings, _impl_.nnapi_settings_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .tflite.proto.GPUSettings gpu_settings = 3;
    {PROTOBUF_FIELD_OFFSET(TFLiteSettings, _impl_.gpu_settings_), _Internal::kHasBitsOffset + 1, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .tflite.proto.HexagonSettings hexagon_settings = 4;
    {PROTOBUF_FIELD_OFFSET(TFLiteSettings, _impl_.hexagon_settings_), _Internal::kHasBitsOffset + 2, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .tflite.proto.XNNPackSettings xnnpack_settings = 5;
    {PROTOBUF_FIELD_OFFSET(TFLiteSettings, _impl_.xnnpack_settings_), _Internal::kHasBitsOffset + 3, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .tflite.proto.CPUSettings cpu_settings = 6;
    {PROTOBUF_FIELD_OFFSET(TFLiteSettings, _impl_.cpu_settings_), _Internal::kHasBitsOffset + 4, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional int32 max_delegated_partitions = 7;
    {PROTOBUF_FIELD_OFFSET(TFLiteSettings, _impl_.max_delegated_partitions_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional .tflite.proto.EdgeTpuSettings edgetpu_settings = 8;
    {PROTOBUF_FIELD_OFFSET(TFLiteSettings, _impl_.edgetpu_settings_), _Internal::kHasBitsOffset + 5, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .tflite.proto.FallbackSettings fallback_settings = 9;
    {PROTOBUF_FIELD_OFFSET(TFLiteSettings, _impl_.fallback_settings_), _Internal::kHasBitsOffset + 6, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .tflite.proto.CoralSettings coral_settings = 10;
    {PROTOBUF_FIELD_OFFSET(TFLiteSettings, _impl_.coral_settings_), _Internal::kHasBitsOffset + 7, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .tflite.proto.CoreMLSettings coreml_settings = 11;
    {PROTOBUF_FIELD_OFFSET(TFLiteSettings, _impl_.coreml_settings_), _Internal::kHasBitsOffset + 8, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bool disable_default_delegates = 12;
    {PROTOBUF_FIELD_OFFSET(TFLiteSettings, _impl_.disable_default_delegates_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional .tflite.proto.StableDelegateLoaderSettings stable_delegate_loader_settings = 13;
    {PROTOBUF_FIELD_OFFSET(TFLiteSettings, _impl_.stable_delegate_loader_settings_), _Internal::kHasBitsOffset + 9, 10,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .tflite.proto.GoogleEdgeTpuSettings google_edgetpu_settings = 14;
    {PROTOBUF_FIELD_OFFSET(TFLiteSettings, _impl_.google_edgetpu_settings_), _Internal::kHasBitsOffset + 10, 11,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .tflite.proto.CompilationCachingSettings compilation_caching_settings = 15;
    {PROTOBUF_FIELD_OFFSET(TFLiteSettings, _impl_.compilation_caching_settings_), _Internal::kHasBitsOffset + 11, 12,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {0, 8},
    {::_pbi::TcParser::GetTable<::tflite::proto::NNAPISettings>()},
    {::_pbi::TcParser::GetTable<::tflite::proto::GPUSettings>()},
    {::_pbi::TcParser::GetTable<::tflite::proto::HexagonSettings>()},
    {::_pbi::TcParser::GetTable<::tflite::proto::XNNPackSettings>()},
    {::_pbi::TcParser::GetTable<::tflite::proto::CPUSettings>()},
    {::_pbi::TcParser::GetTable<::tflite::proto::EdgeTpuSettings>()},
    {::_pbi::TcParser::GetTable<::tflite::proto::FallbackSettings>()},
    {::_pbi::TcParser::GetTable<::tflite::proto::CoralSettings>()},
    {::_pbi::TcParser::GetTable<::tflite::proto::CoreMLSettings>()},
    {::_pbi::TcParser::GetTable<::tflite::proto::StableDelegateLoaderSettings>()},
    {::_pbi::TcParser::GetTable<::tflite::proto::GoogleEdgeTpuSettings>()},
    {::_pbi::TcParser::GetTable<::tflite::proto::CompilationCachingSettings>()},
  }}, {{
  }},
};

::uint8_t* TFLiteSettings::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.proto.TFLiteSettings)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .tflite.proto.Delegate delegate = 1;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_delegate(), target);
  }

  // optional .tflite.proto.NNAPISettings nnapi_settings = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::nnapi_settings(this),
        _Internal::nnapi_settings(this).GetCachedSize(), target, stream);
  }

  // optional .tflite.proto.GPUSettings gpu_settings = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::gpu_settings(this),
        _Internal::gpu_settings(this).GetCachedSize(), target, stream);
  }

  // optional .tflite.proto.HexagonSettings hexagon_settings = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::hexagon_settings(this),
        _Internal::hexagon_settings(this).GetCachedSize(), target, stream);
  }

  // optional .tflite.proto.XNNPackSettings xnnpack_settings = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::xnnpack_settings(this),
        _Internal::xnnpack_settings(this).GetCachedSize(), target, stream);
  }

  // optional .tflite.proto.CPUSettings cpu_settings = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::cpu_settings(this),
        _Internal::cpu_settings(this).GetCachedSize(), target, stream);
  }

  // optional int32 max_delegated_partitions = 7;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_max_delegated_partitions(), target);
  }

  // optional .tflite.proto.EdgeTpuSettings edgetpu_settings = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::edgetpu_settings(this),
        _Internal::edgetpu_settings(this).GetCachedSize(), target, stream);
  }

  // optional .tflite.proto.FallbackSettings fallback_settings = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::fallback_settings(this),
        _Internal::fallback_settings(this).GetCachedSize(), target, stream);
  }

  // optional .tflite.proto.CoralSettings coral_settings = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::coral_settings(this),
        _Internal::coral_settings(this).GetCachedSize(), target, stream);
  }

  // optional .tflite.proto.CoreMLSettings coreml_settings = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::coreml_settings(this),
        _Internal::coreml_settings(this).GetCachedSize(), target, stream);
  }

  // optional bool disable_default_delegates = 12;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        12, this->_internal_disable_default_delegates(), target);
  }

  // optional .tflite.proto.StableDelegateLoaderSettings stable_delegate_loader_settings = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::stable_delegate_loader_settings(this),
        _Internal::stable_delegate_loader_settings(this).GetCachedSize(), target, stream);
  }

  // optional .tflite.proto.GoogleEdgeTpuSettings google_edgetpu_settings = 14;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::google_edgetpu_settings(this),
        _Internal::google_edgetpu_settings(this).GetCachedSize(), target, stream);
  }

  // optional .tflite.proto.CompilationCachingSettings compilation_caching_settings = 15;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::compilation_caching_settings(this),
        _Internal::compilation_caching_settings(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.proto.TFLiteSettings)
  return target;
}

::size_t TFLiteSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.proto.TFLiteSettings)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .tflite.proto.NNAPISettings nnapi_settings = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.nnapi_settings_);
    }

    // optional .tflite.proto.GPUSettings gpu_settings = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.gpu_settings_);
    }

    // optional .tflite.proto.HexagonSettings hexagon_settings = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.hexagon_settings_);
    }

    // optional .tflite.proto.XNNPackSettings xnnpack_settings = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.xnnpack_settings_);
    }

    // optional .tflite.proto.CPUSettings cpu_settings = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.cpu_settings_);
    }

    // optional .tflite.proto.EdgeTpuSettings edgetpu_settings = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.edgetpu_settings_);
    }

    // optional .tflite.proto.FallbackSettings fallback_settings = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.fallback_settings_);
    }

    // optional .tflite.proto.CoralSettings coral_settings = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.coral_settings_);
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional .tflite.proto.CoreMLSettings coreml_settings = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.coreml_settings_);
    }

    // optional .tflite.proto.StableDelegateLoaderSettings stable_delegate_loader_settings = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.stable_delegate_loader_settings_);
    }

    // optional .tflite.proto.GoogleEdgeTpuSettings google_edgetpu_settings = 14;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.google_edgetpu_settings_);
    }

    // optional .tflite.proto.CompilationCachingSettings compilation_caching_settings = 15;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.compilation_caching_settings_);
    }

    // optional .tflite.proto.Delegate delegate = 1;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_delegate());
    }

    // optional int32 max_delegated_partitions = 7;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_max_delegated_partitions());
    }

    // optional bool disable_default_delegates = 12;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TFLiteSettings::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TFLiteSettings::MergeImpl
};
const ::google::protobuf::Message::ClassData*TFLiteSettings::GetClassData() const { return &_class_data_; }


void TFLiteSettings::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TFLiteSettings*>(&to_msg);
  auto& from = static_cast<const TFLiteSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.proto.TFLiteSettings)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_nnapi_settings()->::tflite::proto::NNAPISettings::MergeFrom(
          from._internal_nnapi_settings());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_gpu_settings()->::tflite::proto::GPUSettings::MergeFrom(
          from._internal_gpu_settings());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_hexagon_settings()->::tflite::proto::HexagonSettings::MergeFrom(
          from._internal_hexagon_settings());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_xnnpack_settings()->::tflite::proto::XNNPackSettings::MergeFrom(
          from._internal_xnnpack_settings());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_cpu_settings()->::tflite::proto::CPUSettings::MergeFrom(
          from._internal_cpu_settings());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_edgetpu_settings()->::tflite::proto::EdgeTpuSettings::MergeFrom(
          from._internal_edgetpu_settings());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_fallback_settings()->::tflite::proto::FallbackSettings::MergeFrom(
          from._internal_fallback_settings());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_coral_settings()->::tflite::proto::CoralSettings::MergeFrom(
          from._internal_coral_settings());
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_coreml_settings()->::tflite::proto::CoreMLSettings::MergeFrom(
          from._internal_coreml_settings());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_stable_delegate_loader_settings()->::tflite::proto::StableDelegateLoaderSettings::MergeFrom(
          from._internal_stable_delegate_loader_settings());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_google_edgetpu_settings()->::tflite::proto::GoogleEdgeTpuSettings::MergeFrom(
          from._internal_google_edgetpu_settings());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_compilation_caching_settings()->::tflite::proto::CompilationCachingSettings::MergeFrom(
          from._internal_compilation_caching_settings());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.delegate_ = from._impl_.delegate_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.max_delegated_partitions_ = from._impl_.max_delegated_partitions_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.disable_default_delegates_ = from._impl_.disable_default_delegates_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TFLiteSettings::CopyFrom(const TFLiteSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.proto.TFLiteSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TFLiteSettings::IsInitialized() const {
  return true;
}

void TFLiteSettings::InternalSwap(TFLiteSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TFLiteSettings, _impl_.disable_default_delegates_)
      + sizeof(TFLiteSettings::_impl_.disable_default_delegates_)
      - PROTOBUF_FIELD_OFFSET(TFLiteSettings, _impl_.nnapi_settings_)>(
          reinterpret_cast<char*>(&_impl_.nnapi_settings_),
          reinterpret_cast<char*>(&other->_impl_.nnapi_settings_));
}

::google::protobuf::Metadata TFLiteSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_getter, &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_once,
      file_level_metadata_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[14]);
}
// ===================================================================

class FallbackSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<FallbackSettings>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FallbackSettings, _impl_._has_bits_);
  static void set_has_allow_automatic_fallback_on_compilation_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_allow_automatic_fallback_on_execution_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FallbackSettings::FallbackSettings(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.proto.FallbackSettings)
}
FallbackSettings::FallbackSettings(const FallbackSettings& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tflite.proto.FallbackSettings)
}
inline void FallbackSettings::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.allow_automatic_fallback_on_compilation_error_){false},
      decltype(_impl_.allow_automatic_fallback_on_execution_error_){false},
  };
}
FallbackSettings::~FallbackSettings() {
  // @@protoc_insertion_point(destructor:tflite.proto.FallbackSettings)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FallbackSettings::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void FallbackSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void FallbackSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.proto.FallbackSettings)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.allow_automatic_fallback_on_compilation_error_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.allow_automatic_fallback_on_execution_error_) -
      reinterpret_cast<char*>(&_impl_.allow_automatic_fallback_on_compilation_error_)) + sizeof(_impl_.allow_automatic_fallback_on_execution_error_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FallbackSettings::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> FallbackSettings::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FallbackSettings, _impl_._has_bits_),
    0, // no _extensions_
    8, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967103,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_FallbackSettings_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional bool allow_automatic_fallback_on_execution_error = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(FallbackSettings, _impl_.allow_automatic_fallback_on_execution_error_), 1>(),
     {64, 1, 0, PROTOBUF_FIELD_OFFSET(FallbackSettings, _impl_.allow_automatic_fallback_on_execution_error_)}},
    // optional bool allow_automatic_fallback_on_compilation_error = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(FallbackSettings, _impl_.allow_automatic_fallback_on_compilation_error_), 0>(),
     {56, 0, 0, PROTOBUF_FIELD_OFFSET(FallbackSettings, _impl_.allow_automatic_fallback_on_compilation_error_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bool allow_automatic_fallback_on_compilation_error = 7;
    {PROTOBUF_FIELD_OFFSET(FallbackSettings, _impl_.allow_automatic_fallback_on_compilation_error_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool allow_automatic_fallback_on_execution_error = 8;
    {PROTOBUF_FIELD_OFFSET(FallbackSettings, _impl_.allow_automatic_fallback_on_execution_error_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* FallbackSettings::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.proto.FallbackSettings)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool allow_automatic_fallback_on_compilation_error = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_allow_automatic_fallback_on_compilation_error(), target);
  }

  // optional bool allow_automatic_fallback_on_execution_error = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_allow_automatic_fallback_on_execution_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.proto.FallbackSettings)
  return target;
}

::size_t FallbackSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.proto.FallbackSettings)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool allow_automatic_fallback_on_compilation_error = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2;
    }

    // optional bool allow_automatic_fallback_on_execution_error = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FallbackSettings::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    FallbackSettings::MergeImpl
};
const ::google::protobuf::Message::ClassData*FallbackSettings::GetClassData() const { return &_class_data_; }


void FallbackSettings::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FallbackSettings*>(&to_msg);
  auto& from = static_cast<const FallbackSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.proto.FallbackSettings)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.allow_automatic_fallback_on_compilation_error_ = from._impl_.allow_automatic_fallback_on_compilation_error_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.allow_automatic_fallback_on_execution_error_ = from._impl_.allow_automatic_fallback_on_execution_error_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FallbackSettings::CopyFrom(const FallbackSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.proto.FallbackSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FallbackSettings::IsInitialized() const {
  return true;
}

void FallbackSettings::InternalSwap(FallbackSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FallbackSettings, _impl_.allow_automatic_fallback_on_execution_error_)
      + sizeof(FallbackSettings::_impl_.allow_automatic_fallback_on_execution_error_)
      - PROTOBUF_FIELD_OFFSET(FallbackSettings, _impl_.allow_automatic_fallback_on_compilation_error_)>(
          reinterpret_cast<char*>(&_impl_.allow_automatic_fallback_on_compilation_error_),
          reinterpret_cast<char*>(&other->_impl_.allow_automatic_fallback_on_compilation_error_));
}

::google::protobuf::Metadata FallbackSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_getter, &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_once,
      file_level_metadata_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[15]);
}
// ===================================================================

class BenchmarkMetric::_Internal {
 public:
  using HasBits = decltype(std::declval<BenchmarkMetric>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BenchmarkMetric, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BenchmarkMetric::BenchmarkMetric(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.proto.BenchmarkMetric)
}
BenchmarkMetric::BenchmarkMetric(const BenchmarkMetric& from) : ::google::protobuf::Message() {
  BenchmarkMetric* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.values_){from._impl_.values_},
      decltype(_impl_.name_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }

  // @@protoc_insertion_point(copy_constructor:tflite.proto.BenchmarkMetric)
}
inline void BenchmarkMetric::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.values_){arena},
      decltype(_impl_.name_){},
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
BenchmarkMetric::~BenchmarkMetric() {
  // @@protoc_insertion_point(destructor:tflite.proto.BenchmarkMetric)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BenchmarkMetric::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedField();
  _impl_.name_.Destroy();
}
void BenchmarkMetric::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void BenchmarkMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.proto.BenchmarkMetric)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_values()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* BenchmarkMetric::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 41, 2> BenchmarkMetric::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BenchmarkMetric, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_BenchmarkMetric_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated float values = 2 [packed = true];
    {::_pbi::TcParser::FastF32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(BenchmarkMetric, _impl_.values_)}},
    // optional string name = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(BenchmarkMetric, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string name = 1;
    {PROTOBUF_FIELD_OFFSET(BenchmarkMetric, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // repeated float values = 2 [packed = true];
    {PROTOBUF_FIELD_OFFSET(BenchmarkMetric, _impl_.values_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
    "\34\4\0\0\0\0\0\0"
    "tflite.proto.BenchmarkMetric"
    "name"
  }},
};

::uint8_t* BenchmarkMetric::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.proto.BenchmarkMetric)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "tflite.proto.BenchmarkMetric.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated float values = 2 [packed = true];
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.proto.BenchmarkMetric)
  return target;
}

::size_t BenchmarkMetric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.proto.BenchmarkMetric)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 2 [packed = true];
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_values_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // optional string name = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData BenchmarkMetric::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    BenchmarkMetric::MergeImpl
};
const ::google::protobuf::Message::ClassData*BenchmarkMetric::GetClassData() const { return &_class_data_; }


void BenchmarkMetric::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<BenchmarkMetric*>(&to_msg);
  auto& from = static_cast<const BenchmarkMetric&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.proto.BenchmarkMetric)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_values()->MergeFrom(from._internal_values());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BenchmarkMetric::CopyFrom(const BenchmarkMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.proto.BenchmarkMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BenchmarkMetric::IsInitialized() const {
  return true;
}

void BenchmarkMetric::InternalSwap(BenchmarkMetric* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
}

::google::protobuf::Metadata BenchmarkMetric::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_getter, &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_once,
      file_level_metadata_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[16]);
}
// ===================================================================

class BenchmarkResult_InferenceOutput::_Internal {
 public:
  using HasBits = decltype(std::declval<BenchmarkResult_InferenceOutput>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BenchmarkResult_InferenceOutput, _impl_._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BenchmarkResult_InferenceOutput::BenchmarkResult_InferenceOutput(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.proto.BenchmarkResult.InferenceOutput)
}
BenchmarkResult_InferenceOutput::BenchmarkResult_InferenceOutput(const BenchmarkResult_InferenceOutput& from) : ::google::protobuf::Message() {
  BenchmarkResult_InferenceOutput* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.value_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.value_.Set(from._internal_value(), _this->GetArenaForAllocation());
  }

  // @@protoc_insertion_point(copy_constructor:tflite.proto.BenchmarkResult.InferenceOutput)
}
inline void BenchmarkResult_InferenceOutput::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.value_){},
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
BenchmarkResult_InferenceOutput::~BenchmarkResult_InferenceOutput() {
  // @@protoc_insertion_point(destructor:tflite.proto.BenchmarkResult.InferenceOutput)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BenchmarkResult_InferenceOutput::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
}
void BenchmarkResult_InferenceOutput::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void BenchmarkResult_InferenceOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.proto.BenchmarkResult.InferenceOutput)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.value_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* BenchmarkResult_InferenceOutput::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> BenchmarkResult_InferenceOutput::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BenchmarkResult_InferenceOutput, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_BenchmarkResult_InferenceOutput_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional bytes value = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(BenchmarkResult_InferenceOutput, _impl_.value_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bytes value = 1;
    {PROTOBUF_FIELD_OFFSET(BenchmarkResult_InferenceOutput, _impl_.value_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* BenchmarkResult_InferenceOutput::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.proto.BenchmarkResult.InferenceOutput)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes value = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_value();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.proto.BenchmarkResult.InferenceOutput)
  return target;
}

::size_t BenchmarkResult_InferenceOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.proto.BenchmarkResult.InferenceOutput)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes value = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData BenchmarkResult_InferenceOutput::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    BenchmarkResult_InferenceOutput::MergeImpl
};
const ::google::protobuf::Message::ClassData*BenchmarkResult_InferenceOutput::GetClassData() const { return &_class_data_; }


void BenchmarkResult_InferenceOutput::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<BenchmarkResult_InferenceOutput*>(&to_msg);
  auto& from = static_cast<const BenchmarkResult_InferenceOutput&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.proto.BenchmarkResult.InferenceOutput)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BenchmarkResult_InferenceOutput::CopyFrom(const BenchmarkResult_InferenceOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.proto.BenchmarkResult.InferenceOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BenchmarkResult_InferenceOutput::IsInitialized() const {
  return true;
}

void BenchmarkResult_InferenceOutput::InternalSwap(BenchmarkResult_InferenceOutput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.value_, lhs_arena,
                                       &other->_impl_.value_, rhs_arena);
}

::google::protobuf::Metadata BenchmarkResult_InferenceOutput::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_getter, &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_once,
      file_level_metadata_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[17]);
}
// ===================================================================

class BenchmarkResult::_Internal {
 public:
  using HasBits = decltype(std::declval<BenchmarkResult>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BenchmarkResult, _impl_._has_bits_);
  static void set_has_max_memory_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ok(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BenchmarkResult::BenchmarkResult(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.proto.BenchmarkResult)
}
BenchmarkResult::BenchmarkResult(const BenchmarkResult& from) : ::google::protobuf::Message() {
  BenchmarkResult* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.initialization_time_us_){from._impl_.initialization_time_us_},
      /* _impl_._initialization_time_us_cached_byte_size_ = */ {0},
      decltype(_impl_.inference_time_us_){from._impl_.inference_time_us_},
      /* _impl_._inference_time_us_cached_byte_size_ = */ {0},
      decltype(_impl_.metrics_){from._impl_.metrics_},
      decltype(_impl_.actual_output_){from._impl_.actual_output_},
      decltype(_impl_.max_memory_kb_){},
      decltype(_impl_.ok_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  ::memcpy(&_impl_.max_memory_kb_, &from._impl_.max_memory_kb_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.ok_) -
    reinterpret_cast<char*>(&_impl_.max_memory_kb_)) + sizeof(_impl_.ok_));

  // @@protoc_insertion_point(copy_constructor:tflite.proto.BenchmarkResult)
}
inline void BenchmarkResult::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.initialization_time_us_){arena},
      /* _impl_._initialization_time_us_cached_byte_size_ = */ {0},
      decltype(_impl_.inference_time_us_){arena},
      /* _impl_._inference_time_us_cached_byte_size_ = */ {0},
      decltype(_impl_.metrics_){arena},
      decltype(_impl_.actual_output_){arena},
      decltype(_impl_.max_memory_kb_){0},
      decltype(_impl_.ok_){false},
  };
}
BenchmarkResult::~BenchmarkResult() {
  // @@protoc_insertion_point(destructor:tflite.proto.BenchmarkResult)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BenchmarkResult::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.initialization_time_us_.~RepeatedField();
  _impl_.inference_time_us_.~RepeatedField();
  _impl_.metrics_.~RepeatedPtrField();
  _impl_.actual_output_.~RepeatedPtrField();
}
void BenchmarkResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void BenchmarkResult::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.proto.BenchmarkResult)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_initialization_time_us()->Clear();
  _internal_mutable_inference_time_us()->Clear();
  _internal_mutable_metrics()->Clear();
  _internal_mutable_actual_output()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.max_memory_kb_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.ok_) -
        reinterpret_cast<char*>(&_impl_.max_memory_kb_)) + sizeof(_impl_.ok_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* BenchmarkResult::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 2, 0, 2> BenchmarkResult::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BenchmarkResult, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_BenchmarkResult_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated int64 initialization_time_us = 1 [packed = true];
    {::_pbi::TcParser::FastV64P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(BenchmarkResult, _impl_.initialization_time_us_)}},
    // repeated int64 inference_time_us = 2 [packed = true];
    {::_pbi::TcParser::FastV64P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(BenchmarkResult, _impl_.inference_time_us_)}},
    // optional int32 max_memory_kb = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BenchmarkResult, _impl_.max_memory_kb_), 0>(),
     {24, 0, 0, PROTOBUF_FIELD_OFFSET(BenchmarkResult, _impl_.max_memory_kb_)}},
    // optional bool ok = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(BenchmarkResult, _impl_.ok_), 1>(),
     {32, 1, 0, PROTOBUF_FIELD_OFFSET(BenchmarkResult, _impl_.ok_)}},
    // repeated .tflite.proto.BenchmarkMetric metrics = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(BenchmarkResult, _impl_.metrics_)}},
    // repeated .tflite.proto.BenchmarkResult.InferenceOutput actual_output = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 1, PROTOBUF_FIELD_OFFSET(BenchmarkResult, _impl_.actual_output_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated int64 initialization_time_us = 1 [packed = true];
    {PROTOBUF_FIELD_OFFSET(BenchmarkResult, _impl_.initialization_time_us_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt64)},
    // repeated int64 inference_time_us = 2 [packed = true];
    {PROTOBUF_FIELD_OFFSET(BenchmarkResult, _impl_.inference_time_us_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt64)},
    // optional int32 max_memory_kb = 3;
    {PROTOBUF_FIELD_OFFSET(BenchmarkResult, _impl_.max_memory_kb_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional bool ok = 4;
    {PROTOBUF_FIELD_OFFSET(BenchmarkResult, _impl_.ok_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // repeated .tflite.proto.BenchmarkMetric metrics = 5;
    {PROTOBUF_FIELD_OFFSET(BenchmarkResult, _impl_.metrics_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .tflite.proto.BenchmarkResult.InferenceOutput actual_output = 6;
    {PROTOBUF_FIELD_OFFSET(BenchmarkResult, _impl_.actual_output_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tflite::proto::BenchmarkMetric>()},
    {::_pbi::TcParser::GetTable<::tflite::proto::BenchmarkResult_InferenceOutput>()},
  }}, {{
  }},
};

::uint8_t* BenchmarkResult::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.proto.BenchmarkResult)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated int64 initialization_time_us = 1 [packed = true];
  {
    int byte_size = _impl_._initialization_time_us_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(1, _internal_initialization_time_us(),
                                                 byte_size, target);
    }
  }

  // repeated int64 inference_time_us = 2 [packed = true];
  {
    int byte_size = _impl_._inference_time_us_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(2, _internal_inference_time_us(),
                                                 byte_size, target);
    }
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 max_memory_kb = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_max_memory_kb(), target);
  }

  // optional bool ok = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_ok(), target);
  }

  // repeated .tflite.proto.BenchmarkMetric metrics = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metrics_size()); i < n; i++) {
    const auto& repfield = this->_internal_metrics().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .tflite.proto.BenchmarkResult.InferenceOutput actual_output = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_actual_output_size()); i < n; i++) {
    const auto& repfield = this->_internal_actual_output().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.proto.BenchmarkResult)
  return target;
}

::size_t BenchmarkResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.proto.BenchmarkResult)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 initialization_time_us = 1 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
        this->_internal_initialization_time_us())
    ;
    _impl_._initialization_time_us_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated int64 inference_time_us = 2 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
        this->_internal_inference_time_us())
    ;
    _impl_._inference_time_us_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated .tflite.proto.BenchmarkMetric metrics = 5;
  total_size += 1UL * this->_internal_metrics_size();
  for (const auto& msg : this->_internal_metrics()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .tflite.proto.BenchmarkResult.InferenceOutput actual_output = 6;
  total_size += 1UL * this->_internal_actual_output_size();
  for (const auto& msg : this->_internal_actual_output()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 max_memory_kb = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_max_memory_kb());
    }

    // optional bool ok = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData BenchmarkResult::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    BenchmarkResult::MergeImpl
};
const ::google::protobuf::Message::ClassData*BenchmarkResult::GetClassData() const { return &_class_data_; }


void BenchmarkResult::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<BenchmarkResult*>(&to_msg);
  auto& from = static_cast<const BenchmarkResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.proto.BenchmarkResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_initialization_time_us()->MergeFrom(from._internal_initialization_time_us());
  _this->_internal_mutable_inference_time_us()->MergeFrom(from._internal_inference_time_us());
  _this->_internal_mutable_metrics()->MergeFrom(from._internal_metrics());
  _this->_internal_mutable_actual_output()->MergeFrom(from._internal_actual_output());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.max_memory_kb_ = from._impl_.max_memory_kb_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ok_ = from._impl_.ok_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BenchmarkResult::CopyFrom(const BenchmarkResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.proto.BenchmarkResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BenchmarkResult::IsInitialized() const {
  return true;
}

void BenchmarkResult::InternalSwap(BenchmarkResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.initialization_time_us_.InternalSwap(&other->_impl_.initialization_time_us_);
  _impl_.inference_time_us_.InternalSwap(&other->_impl_.inference_time_us_);
  _impl_.metrics_.InternalSwap(&other->_impl_.metrics_);
  _impl_.actual_output_.InternalSwap(&other->_impl_.actual_output_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BenchmarkResult, _impl_.ok_)
      + sizeof(BenchmarkResult::_impl_.ok_)
      - PROTOBUF_FIELD_OFFSET(BenchmarkResult, _impl_.max_memory_kb_)>(
          reinterpret_cast<char*>(&_impl_.max_memory_kb_),
          reinterpret_cast<char*>(&other->_impl_.max_memory_kb_));
}

::google::protobuf::Metadata BenchmarkResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_getter, &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_once,
      file_level_metadata_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[18]);
}
// ===================================================================

class ErrorCode::_Internal {
 public:
  using HasBits = decltype(std::declval<ErrorCode>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ErrorCode, _impl_._has_bits_);
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tflite_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_underlying_api_error(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ErrorCode::ErrorCode(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.proto.ErrorCode)
}
ErrorCode::ErrorCode(const ErrorCode& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tflite.proto.ErrorCode)
}
inline void ErrorCode::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.source_){0},
      decltype(_impl_.tflite_error_){0},
      decltype(_impl_.underlying_api_error_){::int64_t{0}},
  };
}
ErrorCode::~ErrorCode() {
  // @@protoc_insertion_point(destructor:tflite.proto.ErrorCode)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ErrorCode::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void ErrorCode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ErrorCode::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.proto.ErrorCode)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.source_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.underlying_api_error_) -
        reinterpret_cast<char*>(&_impl_.source_)) + sizeof(_impl_.underlying_api_error_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ErrorCode::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> ErrorCode::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ErrorCode, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ErrorCode_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .tflite.proto.Delegate source = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 0, 7, PROTOBUF_FIELD_OFFSET(ErrorCode, _impl_.source_)}},
    // optional int32 tflite_error = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ErrorCode, _impl_.tflite_error_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(ErrorCode, _impl_.tflite_error_)}},
    // optional int64 underlying_api_error = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ErrorCode, _impl_.underlying_api_error_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(ErrorCode, _impl_.underlying_api_error_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .tflite.proto.Delegate source = 1;
    {PROTOBUF_FIELD_OFFSET(ErrorCode, _impl_.source_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional int32 tflite_error = 2;
    {PROTOBUF_FIELD_OFFSET(ErrorCode, _impl_.tflite_error_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int64 underlying_api_error = 3;
    {PROTOBUF_FIELD_OFFSET(ErrorCode, _impl_.underlying_api_error_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
  }}, {{
    {0, 8},
  }}, {{
  }},
};

::uint8_t* ErrorCode::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.proto.ErrorCode)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .tflite.proto.Delegate source = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_source(), target);
  }

  // optional int32 tflite_error = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_tflite_error(), target);
  }

  // optional int64 underlying_api_error = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<3>(
            stream, this->_internal_underlying_api_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.proto.ErrorCode)
  return target;
}

::size_t ErrorCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.proto.ErrorCode)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .tflite.proto.Delegate source = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_source());
    }

    // optional int32 tflite_error = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_tflite_error());
    }

    // optional int64 underlying_api_error = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_underlying_api_error());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ErrorCode::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ErrorCode::MergeImpl
};
const ::google::protobuf::Message::ClassData*ErrorCode::GetClassData() const { return &_class_data_; }


void ErrorCode::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ErrorCode*>(&to_msg);
  auto& from = static_cast<const ErrorCode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.proto.ErrorCode)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.source_ = from._impl_.source_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tflite_error_ = from._impl_.tflite_error_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.underlying_api_error_ = from._impl_.underlying_api_error_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ErrorCode::CopyFrom(const ErrorCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.proto.ErrorCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ErrorCode::IsInitialized() const {
  return true;
}

void ErrorCode::InternalSwap(ErrorCode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ErrorCode, _impl_.underlying_api_error_)
      + sizeof(ErrorCode::_impl_.underlying_api_error_)
      - PROTOBUF_FIELD_OFFSET(ErrorCode, _impl_.source_)>(
          reinterpret_cast<char*>(&_impl_.source_),
          reinterpret_cast<char*>(&other->_impl_.source_));
}

::google::protobuf::Metadata ErrorCode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_getter, &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_once,
      file_level_metadata_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[19]);
}
// ===================================================================

class BenchmarkError::_Internal {
 public:
  using HasBits = decltype(std::declval<BenchmarkError>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BenchmarkError, _impl_._has_bits_);
  static void set_has_stage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_exit_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_signal(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mini_benchmark_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

BenchmarkError::BenchmarkError(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.proto.BenchmarkError)
}
BenchmarkError::BenchmarkError(const BenchmarkError& from) : ::google::protobuf::Message() {
  BenchmarkError* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.error_code_){from._impl_.error_code_},
      decltype(_impl_.stage_){},
      decltype(_impl_.exit_code_){},
      decltype(_impl_.signal_){},
      decltype(_impl_.mini_benchmark_error_code_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  ::memcpy(&_impl_.stage_, &from._impl_.stage_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.mini_benchmark_error_code_) -
    reinterpret_cast<char*>(&_impl_.stage_)) + sizeof(_impl_.mini_benchmark_error_code_));

  // @@protoc_insertion_point(copy_constructor:tflite.proto.BenchmarkError)
}
inline void BenchmarkError::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.error_code_){arena},
      decltype(_impl_.stage_){0},
      decltype(_impl_.exit_code_){0},
      decltype(_impl_.signal_){0},
      decltype(_impl_.mini_benchmark_error_code_){0},
  };
}
BenchmarkError::~BenchmarkError() {
  // @@protoc_insertion_point(destructor:tflite.proto.BenchmarkError)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BenchmarkError::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_code_.~RepeatedPtrField();
}
void BenchmarkError::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void BenchmarkError::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.proto.BenchmarkError)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_error_code()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.stage_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.mini_benchmark_error_code_) -
        reinterpret_cast<char*>(&_impl_.stage_)) + sizeof(_impl_.mini_benchmark_error_code_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* BenchmarkError::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 2, 0, 2> BenchmarkError::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BenchmarkError, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_BenchmarkError_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .tflite.proto.BenchmarkStage stage = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 0, 2, PROTOBUF_FIELD_OFFSET(BenchmarkError, _impl_.stage_)}},
    // optional int32 exit_code = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BenchmarkError, _impl_.exit_code_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(BenchmarkError, _impl_.exit_code_)}},
    // optional int32 signal = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BenchmarkError, _impl_.signal_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(BenchmarkError, _impl_.signal_)}},
    // repeated .tflite.proto.ErrorCode error_code = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 1, PROTOBUF_FIELD_OFFSET(BenchmarkError, _impl_.error_code_)}},
    // optional int32 mini_benchmark_error_code = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BenchmarkError, _impl_.mini_benchmark_error_code_), 3>(),
     {40, 3, 0, PROTOBUF_FIELD_OFFSET(BenchmarkError, _impl_.mini_benchmark_error_code_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .tflite.proto.BenchmarkStage stage = 1;
    {PROTOBUF_FIELD_OFFSET(BenchmarkError, _impl_.stage_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional int32 exit_code = 2;
    {PROTOBUF_FIELD_OFFSET(BenchmarkError, _impl_.exit_code_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 signal = 3;
    {PROTOBUF_FIELD_OFFSET(BenchmarkError, _impl_.signal_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // repeated .tflite.proto.ErrorCode error_code = 4;
    {PROTOBUF_FIELD_OFFSET(BenchmarkError, _impl_.error_code_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional int32 mini_benchmark_error_code = 5;
    {PROTOBUF_FIELD_OFFSET(BenchmarkError, _impl_.mini_benchmark_error_code_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }}, {{
    {0, 3},
    {::_pbi::TcParser::GetTable<::tflite::proto::ErrorCode>()},
  }}, {{
  }},
};

::uint8_t* BenchmarkError::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.proto.BenchmarkError)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .tflite.proto.BenchmarkStage stage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_stage(), target);
  }

  // optional int32 exit_code = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_exit_code(), target);
  }

  // optional int32 signal = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_signal(), target);
  }

  // repeated .tflite.proto.ErrorCode error_code = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_error_code_size()); i < n; i++) {
    const auto& repfield = this->_internal_error_code().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 mini_benchmark_error_code = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_mini_benchmark_error_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.proto.BenchmarkError)
  return target;
}

::size_t BenchmarkError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.proto.BenchmarkError)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tflite.proto.ErrorCode error_code = 4;
  total_size += 1UL * this->_internal_error_code_size();
  for (const auto& msg : this->_internal_error_code()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .tflite.proto.BenchmarkStage stage = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_stage());
    }

    // optional int32 exit_code = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_exit_code());
    }

    // optional int32 signal = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_signal());
    }

    // optional int32 mini_benchmark_error_code = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_mini_benchmark_error_code());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData BenchmarkError::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    BenchmarkError::MergeImpl
};
const ::google::protobuf::Message::ClassData*BenchmarkError::GetClassData() const { return &_class_data_; }


void BenchmarkError::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<BenchmarkError*>(&to_msg);
  auto& from = static_cast<const BenchmarkError&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.proto.BenchmarkError)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_error_code()->MergeFrom(from._internal_error_code());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.stage_ = from._impl_.stage_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.exit_code_ = from._impl_.exit_code_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.signal_ = from._impl_.signal_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.mini_benchmark_error_code_ = from._impl_.mini_benchmark_error_code_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BenchmarkError::CopyFrom(const BenchmarkError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.proto.BenchmarkError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BenchmarkError::IsInitialized() const {
  return true;
}

void BenchmarkError::InternalSwap(BenchmarkError* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.error_code_.InternalSwap(&other->_impl_.error_code_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BenchmarkError, _impl_.mini_benchmark_error_code_)
      + sizeof(BenchmarkError::_impl_.mini_benchmark_error_code_)
      - PROTOBUF_FIELD_OFFSET(BenchmarkError, _impl_.stage_)>(
          reinterpret_cast<char*>(&_impl_.stage_),
          reinterpret_cast<char*>(&other->_impl_.stage_));
}

::google::protobuf::Metadata BenchmarkError::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_getter, &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_once,
      file_level_metadata_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[20]);
}
// ===================================================================

class BenchmarkEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BenchmarkEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BenchmarkEvent, _impl_._has_bits_);
  static const ::tflite::proto::TFLiteSettings& tflite_settings(const BenchmarkEvent* msg);
  static void set_has_tflite_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::tflite::proto::BenchmarkResult& result(const BenchmarkEvent* msg);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tflite::proto::BenchmarkError& error(const BenchmarkEvent* msg);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_boottime_us(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_wallclock_us(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::tflite::proto::TFLiteSettings& BenchmarkEvent::_Internal::tflite_settings(const BenchmarkEvent* msg) {
  return *msg->_impl_.tflite_settings_;
}
const ::tflite::proto::BenchmarkResult& BenchmarkEvent::_Internal::result(const BenchmarkEvent* msg) {
  return *msg->_impl_.result_;
}
const ::tflite::proto::BenchmarkError& BenchmarkEvent::_Internal::error(const BenchmarkEvent* msg) {
  return *msg->_impl_.error_;
}
BenchmarkEvent::BenchmarkEvent(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.proto.BenchmarkEvent)
}
BenchmarkEvent::BenchmarkEvent(const BenchmarkEvent& from) : ::google::protobuf::Message() {
  BenchmarkEvent* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.tflite_settings_){nullptr},
      decltype(_impl_.result_){nullptr},
      decltype(_impl_.error_){nullptr},
      decltype(_impl_.boottime_us_){},
      decltype(_impl_.wallclock_us_){},
      decltype(_impl_.event_type_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.tflite_settings_ = new ::tflite::proto::TFLiteSettings(*from._impl_.tflite_settings_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.result_ = new ::tflite::proto::BenchmarkResult(*from._impl_.result_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.error_ = new ::tflite::proto::BenchmarkError(*from._impl_.error_);
  }
  ::memcpy(&_impl_.boottime_us_, &from._impl_.boottime_us_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.event_type_) -
    reinterpret_cast<char*>(&_impl_.boottime_us_)) + sizeof(_impl_.event_type_));

  // @@protoc_insertion_point(copy_constructor:tflite.proto.BenchmarkEvent)
}
inline void BenchmarkEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.tflite_settings_){nullptr},
      decltype(_impl_.result_){nullptr},
      decltype(_impl_.error_){nullptr},
      decltype(_impl_.boottime_us_){::int64_t{0}},
      decltype(_impl_.wallclock_us_){::int64_t{0}},
      decltype(_impl_.event_type_){0},
  };
}
BenchmarkEvent::~BenchmarkEvent() {
  // @@protoc_insertion_point(destructor:tflite.proto.BenchmarkEvent)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BenchmarkEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.tflite_settings_;
  if (this != internal_default_instance()) delete _impl_.result_;
  if (this != internal_default_instance()) delete _impl_.error_;
}
void BenchmarkEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void BenchmarkEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.proto.BenchmarkEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.tflite_settings_ != nullptr);
      _impl_.tflite_settings_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.result_ != nullptr);
      _impl_.result_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.error_ != nullptr);
      _impl_.error_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&_impl_.boottime_us_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.event_type_) -
        reinterpret_cast<char*>(&_impl_.boottime_us_)) + sizeof(_impl_.event_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* BenchmarkEvent::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 4, 0, 2> BenchmarkEvent::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BenchmarkEvent, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_BenchmarkEvent_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .tflite.proto.TFLiteSettings tflite_settings = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(BenchmarkEvent, _impl_.tflite_settings_)}},
    // optional .tflite.proto.BenchmarkEventType event_type = 2;
    {::_pbi::TcParser::FastEr0S1,
     {16, 5, 5, PROTOBUF_FIELD_OFFSET(BenchmarkEvent, _impl_.event_type_)}},
    // optional .tflite.proto.BenchmarkResult result = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 2, PROTOBUF_FIELD_OFFSET(BenchmarkEvent, _impl_.result_)}},
    // optional .tflite.proto.BenchmarkError error = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 3, PROTOBUF_FIELD_OFFSET(BenchmarkEvent, _impl_.error_)}},
    // optional int64 boottime_us = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(BenchmarkEvent, _impl_.boottime_us_), 3>(),
     {40, 3, 0, PROTOBUF_FIELD_OFFSET(BenchmarkEvent, _impl_.boottime_us_)}},
    // optional int64 wallclock_us = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(BenchmarkEvent, _impl_.wallclock_us_), 4>(),
     {48, 4, 0, PROTOBUF_FIELD_OFFSET(BenchmarkEvent, _impl_.wallclock_us_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .tflite.proto.TFLiteSettings tflite_settings = 1;
    {PROTOBUF_FIELD_OFFSET(BenchmarkEvent, _impl_.tflite_settings_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .tflite.proto.BenchmarkEventType event_type = 2;
    {PROTOBUF_FIELD_OFFSET(BenchmarkEvent, _impl_.event_type_), _Internal::kHasBitsOffset + 5, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional .tflite.proto.BenchmarkResult result = 3;
    {PROTOBUF_FIELD_OFFSET(BenchmarkEvent, _impl_.result_), _Internal::kHasBitsOffset + 1, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .tflite.proto.BenchmarkError error = 4;
    {PROTOBUF_FIELD_OFFSET(BenchmarkEvent, _impl_.error_), _Internal::kHasBitsOffset + 2, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional int64 boottime_us = 5;
    {PROTOBUF_FIELD_OFFSET(BenchmarkEvent, _impl_.boottime_us_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // optional int64 wallclock_us = 6;
    {PROTOBUF_FIELD_OFFSET(BenchmarkEvent, _impl_.wallclock_us_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tflite::proto::TFLiteSettings>()},
    {0, 6},
    {::_pbi::TcParser::GetTable<::tflite::proto::BenchmarkResult>()},
    {::_pbi::TcParser::GetTable<::tflite::proto::BenchmarkError>()},
  }}, {{
  }},
};

::uint8_t* BenchmarkEvent::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.proto.BenchmarkEvent)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .tflite.proto.TFLiteSettings tflite_settings = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tflite_settings(this),
        _Internal::tflite_settings(this).GetCachedSize(), target, stream);
  }

  // optional .tflite.proto.BenchmarkEventType event_type = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_event_type(), target);
  }

  // optional .tflite.proto.BenchmarkResult result = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  // optional .tflite.proto.BenchmarkError error = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  // optional int64 boottime_us = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<5>(
            stream, this->_internal_boottime_us(), target);
  }

  // optional int64 wallclock_us = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<6>(
            stream, this->_internal_wallclock_us(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.proto.BenchmarkEvent)
  return target;
}

::size_t BenchmarkEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.proto.BenchmarkEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .tflite.proto.TFLiteSettings tflite_settings = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.tflite_settings_);
    }

    // optional .tflite.proto.BenchmarkResult result = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.result_);
    }

    // optional .tflite.proto.BenchmarkError error = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.error_);
    }

    // optional int64 boottime_us = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_boottime_us());
    }

    // optional int64 wallclock_us = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_wallclock_us());
    }

    // optional .tflite.proto.BenchmarkEventType event_type = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_event_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData BenchmarkEvent::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    BenchmarkEvent::MergeImpl
};
const ::google::protobuf::Message::ClassData*BenchmarkEvent::GetClassData() const { return &_class_data_; }


void BenchmarkEvent::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<BenchmarkEvent*>(&to_msg);
  auto& from = static_cast<const BenchmarkEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.proto.BenchmarkEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_tflite_settings()->::tflite::proto::TFLiteSettings::MergeFrom(
          from._internal_tflite_settings());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_result()->::tflite::proto::BenchmarkResult::MergeFrom(
          from._internal_result());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_error()->::tflite::proto::BenchmarkError::MergeFrom(
          from._internal_error());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.boottime_us_ = from._impl_.boottime_us_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.wallclock_us_ = from._impl_.wallclock_us_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.event_type_ = from._impl_.event_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BenchmarkEvent::CopyFrom(const BenchmarkEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.proto.BenchmarkEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BenchmarkEvent::IsInitialized() const {
  return true;
}

void BenchmarkEvent::InternalSwap(BenchmarkEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BenchmarkEvent, _impl_.event_type_)
      + sizeof(BenchmarkEvent::_impl_.event_type_)
      - PROTOBUF_FIELD_OFFSET(BenchmarkEvent, _impl_.tflite_settings_)>(
          reinterpret_cast<char*>(&_impl_.tflite_settings_),
          reinterpret_cast<char*>(&other->_impl_.tflite_settings_));
}

::google::protobuf::Metadata BenchmarkEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_getter, &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_once,
      file_level_metadata_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[21]);
}
// ===================================================================

class BestAccelerationDecision::_Internal {
 public:
  using HasBits = decltype(std::declval<BestAccelerationDecision>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BestAccelerationDecision, _impl_._has_bits_);
  static void set_has_number_of_source_events(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::tflite::proto::BenchmarkEvent& min_latency_event(const BestAccelerationDecision* msg);
  static void set_has_min_latency_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_inference_time_us(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::tflite::proto::BenchmarkEvent& BestAccelerationDecision::_Internal::min_latency_event(const BestAccelerationDecision* msg) {
  return *msg->_impl_.min_latency_event_;
}
BestAccelerationDecision::BestAccelerationDecision(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.proto.BestAccelerationDecision)
}
BestAccelerationDecision::BestAccelerationDecision(const BestAccelerationDecision& from) : ::google::protobuf::Message() {
  BestAccelerationDecision* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.min_latency_event_){nullptr},
      decltype(_impl_.min_inference_time_us_){},
      decltype(_impl_.number_of_source_events_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.min_latency_event_ = new ::tflite::proto::BenchmarkEvent(*from._impl_.min_latency_event_);
  }
  ::memcpy(&_impl_.min_inference_time_us_, &from._impl_.min_inference_time_us_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.number_of_source_events_) -
    reinterpret_cast<char*>(&_impl_.min_inference_time_us_)) + sizeof(_impl_.number_of_source_events_));

  // @@protoc_insertion_point(copy_constructor:tflite.proto.BestAccelerationDecision)
}
inline void BestAccelerationDecision::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.min_latency_event_){nullptr},
      decltype(_impl_.min_inference_time_us_){::int64_t{0}},
      decltype(_impl_.number_of_source_events_){0},
  };
}
BestAccelerationDecision::~BestAccelerationDecision() {
  // @@protoc_insertion_point(destructor:tflite.proto.BestAccelerationDecision)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BestAccelerationDecision::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.min_latency_event_;
}
void BestAccelerationDecision::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void BestAccelerationDecision::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.proto.BestAccelerationDecision)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.min_latency_event_ != nullptr);
    _impl_.min_latency_event_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.min_inference_time_us_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.number_of_source_events_) -
        reinterpret_cast<char*>(&_impl_.min_inference_time_us_)) + sizeof(_impl_.number_of_source_events_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* BestAccelerationDecision::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> BestAccelerationDecision::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BestAccelerationDecision, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_BestAccelerationDecision_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional int32 number_of_source_events = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BestAccelerationDecision, _impl_.number_of_source_events_), 2>(),
     {8, 2, 0, PROTOBUF_FIELD_OFFSET(BestAccelerationDecision, _impl_.number_of_source_events_)}},
    // optional .tflite.proto.BenchmarkEvent min_latency_event = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(BestAccelerationDecision, _impl_.min_latency_event_)}},
    // optional int64 min_inference_time_us = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(BestAccelerationDecision, _impl_.min_inference_time_us_), 1>(),
     {24, 1, 0, PROTOBUF_FIELD_OFFSET(BestAccelerationDecision, _impl_.min_inference_time_us_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 number_of_source_events = 1;
    {PROTOBUF_FIELD_OFFSET(BestAccelerationDecision, _impl_.number_of_source_events_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional .tflite.proto.BenchmarkEvent min_latency_event = 2;
    {PROTOBUF_FIELD_OFFSET(BestAccelerationDecision, _impl_.min_latency_event_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional int64 min_inference_time_us = 3;
    {PROTOBUF_FIELD_OFFSET(BestAccelerationDecision, _impl_.min_inference_time_us_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tflite::proto::BenchmarkEvent>()},
  }}, {{
  }},
};

::uint8_t* BestAccelerationDecision::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.proto.BestAccelerationDecision)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 number_of_source_events = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_number_of_source_events(), target);
  }

  // optional .tflite.proto.BenchmarkEvent min_latency_event = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::min_latency_event(this),
        _Internal::min_latency_event(this).GetCachedSize(), target, stream);
  }

  // optional int64 min_inference_time_us = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<3>(
            stream, this->_internal_min_inference_time_us(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.proto.BestAccelerationDecision)
  return target;
}

::size_t BestAccelerationDecision::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.proto.BestAccelerationDecision)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .tflite.proto.BenchmarkEvent min_latency_event = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.min_latency_event_);
    }

    // optional int64 min_inference_time_us = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_min_inference_time_us());
    }

    // optional int32 number_of_source_events = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_number_of_source_events());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData BestAccelerationDecision::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    BestAccelerationDecision::MergeImpl
};
const ::google::protobuf::Message::ClassData*BestAccelerationDecision::GetClassData() const { return &_class_data_; }


void BestAccelerationDecision::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<BestAccelerationDecision*>(&to_msg);
  auto& from = static_cast<const BestAccelerationDecision&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.proto.BestAccelerationDecision)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_min_latency_event()->::tflite::proto::BenchmarkEvent::MergeFrom(
          from._internal_min_latency_event());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.min_inference_time_us_ = from._impl_.min_inference_time_us_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.number_of_source_events_ = from._impl_.number_of_source_events_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BestAccelerationDecision::CopyFrom(const BestAccelerationDecision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.proto.BestAccelerationDecision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BestAccelerationDecision::IsInitialized() const {
  return true;
}

void BestAccelerationDecision::InternalSwap(BestAccelerationDecision* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BestAccelerationDecision, _impl_.number_of_source_events_)
      + sizeof(BestAccelerationDecision::_impl_.number_of_source_events_)
      - PROTOBUF_FIELD_OFFSET(BestAccelerationDecision, _impl_.min_latency_event_)>(
          reinterpret_cast<char*>(&_impl_.min_latency_event_),
          reinterpret_cast<char*>(&other->_impl_.min_latency_event_));
}

::google::protobuf::Metadata BestAccelerationDecision::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_getter, &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_once,
      file_level_metadata_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[22]);
}
// ===================================================================

class BenchmarkInitializationFailure::_Internal {
 public:
  using HasBits = decltype(std::declval<BenchmarkInitializationFailure>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BenchmarkInitializationFailure, _impl_._has_bits_);
  static void set_has_initialization_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BenchmarkInitializationFailure::BenchmarkInitializationFailure(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.proto.BenchmarkInitializationFailure)
}
BenchmarkInitializationFailure::BenchmarkInitializationFailure(const BenchmarkInitializationFailure& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tflite.proto.BenchmarkInitializationFailure)
}
inline void BenchmarkInitializationFailure::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.initialization_status_){0},
  };
}
BenchmarkInitializationFailure::~BenchmarkInitializationFailure() {
  // @@protoc_insertion_point(destructor:tflite.proto.BenchmarkInitializationFailure)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BenchmarkInitializationFailure::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void BenchmarkInitializationFailure::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void BenchmarkInitializationFailure::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.proto.BenchmarkInitializationFailure)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.initialization_status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* BenchmarkInitializationFailure::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> BenchmarkInitializationFailure::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BenchmarkInitializationFailure, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_BenchmarkInitializationFailure_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional int32 initialization_status = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BenchmarkInitializationFailure, _impl_.initialization_status_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(BenchmarkInitializationFailure, _impl_.initialization_status_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 initialization_status = 1;
    {PROTOBUF_FIELD_OFFSET(BenchmarkInitializationFailure, _impl_.initialization_status_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* BenchmarkInitializationFailure::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.proto.BenchmarkInitializationFailure)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 initialization_status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_initialization_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.proto.BenchmarkInitializationFailure)
  return target;
}

::size_t BenchmarkInitializationFailure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.proto.BenchmarkInitializationFailure)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 initialization_status = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_initialization_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData BenchmarkInitializationFailure::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    BenchmarkInitializationFailure::MergeImpl
};
const ::google::protobuf::Message::ClassData*BenchmarkInitializationFailure::GetClassData() const { return &_class_data_; }


void BenchmarkInitializationFailure::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<BenchmarkInitializationFailure*>(&to_msg);
  auto& from = static_cast<const BenchmarkInitializationFailure&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.proto.BenchmarkInitializationFailure)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_initialization_status(from._internal_initialization_status());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BenchmarkInitializationFailure::CopyFrom(const BenchmarkInitializationFailure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.proto.BenchmarkInitializationFailure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BenchmarkInitializationFailure::IsInitialized() const {
  return true;
}

void BenchmarkInitializationFailure::InternalSwap(BenchmarkInitializationFailure* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
        swap(_impl_.initialization_status_, other->_impl_.initialization_status_);
}

::google::protobuf::Metadata BenchmarkInitializationFailure::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_getter, &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_once,
      file_level_metadata_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[23]);
}
// ===================================================================

class MiniBenchmarkEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MiniBenchmarkEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MiniBenchmarkEvent, _impl_._has_bits_);
  static void set_has_is_log_flushing_event(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::tflite::proto::BestAccelerationDecision& best_acceleration_decision(const MiniBenchmarkEvent* msg);
  static void set_has_best_acceleration_decision(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tflite::proto::BenchmarkInitializationFailure& initialization_failure(const MiniBenchmarkEvent* msg);
  static void set_has_initialization_failure(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tflite::proto::BenchmarkEvent& benchmark_event(const MiniBenchmarkEvent* msg);
  static void set_has_benchmark_event(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::tflite::proto::BestAccelerationDecision& MiniBenchmarkEvent::_Internal::best_acceleration_decision(const MiniBenchmarkEvent* msg) {
  return *msg->_impl_.best_acceleration_decision_;
}
const ::tflite::proto::BenchmarkInitializationFailure& MiniBenchmarkEvent::_Internal::initialization_failure(const MiniBenchmarkEvent* msg) {
  return *msg->_impl_.initialization_failure_;
}
const ::tflite::proto::BenchmarkEvent& MiniBenchmarkEvent::_Internal::benchmark_event(const MiniBenchmarkEvent* msg) {
  return *msg->_impl_.benchmark_event_;
}
MiniBenchmarkEvent::MiniBenchmarkEvent(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.proto.MiniBenchmarkEvent)
}
MiniBenchmarkEvent::MiniBenchmarkEvent(const MiniBenchmarkEvent& from) : ::google::protobuf::Message() {
  MiniBenchmarkEvent* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.best_acceleration_decision_){nullptr},
      decltype(_impl_.initialization_failure_){nullptr},
      decltype(_impl_.benchmark_event_){nullptr},
      decltype(_impl_.is_log_flushing_event_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.best_acceleration_decision_ = new ::tflite::proto::BestAccelerationDecision(*from._impl_.best_acceleration_decision_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.initialization_failure_ = new ::tflite::proto::BenchmarkInitializationFailure(*from._impl_.initialization_failure_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.benchmark_event_ = new ::tflite::proto::BenchmarkEvent(*from._impl_.benchmark_event_);
  }
  _this->_impl_.is_log_flushing_event_ = from._impl_.is_log_flushing_event_;

  // @@protoc_insertion_point(copy_constructor:tflite.proto.MiniBenchmarkEvent)
}
inline void MiniBenchmarkEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.best_acceleration_decision_){nullptr},
      decltype(_impl_.initialization_failure_){nullptr},
      decltype(_impl_.benchmark_event_){nullptr},
      decltype(_impl_.is_log_flushing_event_){false},
  };
}
MiniBenchmarkEvent::~MiniBenchmarkEvent() {
  // @@protoc_insertion_point(destructor:tflite.proto.MiniBenchmarkEvent)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MiniBenchmarkEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.best_acceleration_decision_;
  if (this != internal_default_instance()) delete _impl_.initialization_failure_;
  if (this != internal_default_instance()) delete _impl_.benchmark_event_;
}
void MiniBenchmarkEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void MiniBenchmarkEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.proto.MiniBenchmarkEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.best_acceleration_decision_ != nullptr);
      _impl_.best_acceleration_decision_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.initialization_failure_ != nullptr);
      _impl_.initialization_failure_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.benchmark_event_ != nullptr);
      _impl_.benchmark_event_->Clear();
    }
  }
  _impl_.is_log_flushing_event_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MiniBenchmarkEvent::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 3, 0, 2> MiniBenchmarkEvent::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MiniBenchmarkEvent, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MiniBenchmarkEvent_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional .tflite.proto.BenchmarkEvent benchmark_event = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 2, PROTOBUF_FIELD_OFFSET(MiniBenchmarkEvent, _impl_.benchmark_event_)}},
    // optional bool is_log_flushing_event = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MiniBenchmarkEvent, _impl_.is_log_flushing_event_), 3>(),
     {8, 3, 0, PROTOBUF_FIELD_OFFSET(MiniBenchmarkEvent, _impl_.is_log_flushing_event_)}},
    // optional .tflite.proto.BestAccelerationDecision best_acceleration_decision = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(MiniBenchmarkEvent, _impl_.best_acceleration_decision_)}},
    // optional .tflite.proto.BenchmarkInitializationFailure initialization_failure = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(MiniBenchmarkEvent, _impl_.initialization_failure_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bool is_log_flushing_event = 1;
    {PROTOBUF_FIELD_OFFSET(MiniBenchmarkEvent, _impl_.is_log_flushing_event_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional .tflite.proto.BestAccelerationDecision best_acceleration_decision = 2;
    {PROTOBUF_FIELD_OFFSET(MiniBenchmarkEvent, _impl_.best_acceleration_decision_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .tflite.proto.BenchmarkInitializationFailure initialization_failure = 3;
    {PROTOBUF_FIELD_OFFSET(MiniBenchmarkEvent, _impl_.initialization_failure_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .tflite.proto.BenchmarkEvent benchmark_event = 4;
    {PROTOBUF_FIELD_OFFSET(MiniBenchmarkEvent, _impl_.benchmark_event_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tflite::proto::BestAccelerationDecision>()},
    {::_pbi::TcParser::GetTable<::tflite::proto::BenchmarkInitializationFailure>()},
    {::_pbi::TcParser::GetTable<::tflite::proto::BenchmarkEvent>()},
  }}, {{
  }},
};

::uint8_t* MiniBenchmarkEvent::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.proto.MiniBenchmarkEvent)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool is_log_flushing_event = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_is_log_flushing_event(), target);
  }

  // optional .tflite.proto.BestAccelerationDecision best_acceleration_decision = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::best_acceleration_decision(this),
        _Internal::best_acceleration_decision(this).GetCachedSize(), target, stream);
  }

  // optional .tflite.proto.BenchmarkInitializationFailure initialization_failure = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::initialization_failure(this),
        _Internal::initialization_failure(this).GetCachedSize(), target, stream);
  }

  // optional .tflite.proto.BenchmarkEvent benchmark_event = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::benchmark_event(this),
        _Internal::benchmark_event(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.proto.MiniBenchmarkEvent)
  return target;
}

::size_t MiniBenchmarkEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.proto.MiniBenchmarkEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .tflite.proto.BestAccelerationDecision best_acceleration_decision = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.best_acceleration_decision_);
    }

    // optional .tflite.proto.BenchmarkInitializationFailure initialization_failure = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.initialization_failure_);
    }

    // optional .tflite.proto.BenchmarkEvent benchmark_event = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.benchmark_event_);
    }

    // optional bool is_log_flushing_event = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MiniBenchmarkEvent::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    MiniBenchmarkEvent::MergeImpl
};
const ::google::protobuf::Message::ClassData*MiniBenchmarkEvent::GetClassData() const { return &_class_data_; }


void MiniBenchmarkEvent::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MiniBenchmarkEvent*>(&to_msg);
  auto& from = static_cast<const MiniBenchmarkEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.proto.MiniBenchmarkEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_best_acceleration_decision()->::tflite::proto::BestAccelerationDecision::MergeFrom(
          from._internal_best_acceleration_decision());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_initialization_failure()->::tflite::proto::BenchmarkInitializationFailure::MergeFrom(
          from._internal_initialization_failure());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_benchmark_event()->::tflite::proto::BenchmarkEvent::MergeFrom(
          from._internal_benchmark_event());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.is_log_flushing_event_ = from._impl_.is_log_flushing_event_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MiniBenchmarkEvent::CopyFrom(const MiniBenchmarkEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.proto.MiniBenchmarkEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MiniBenchmarkEvent::IsInitialized() const {
  return true;
}

void MiniBenchmarkEvent::InternalSwap(MiniBenchmarkEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MiniBenchmarkEvent, _impl_.is_log_flushing_event_)
      + sizeof(MiniBenchmarkEvent::_impl_.is_log_flushing_event_)
      - PROTOBUF_FIELD_OFFSET(MiniBenchmarkEvent, _impl_.best_acceleration_decision_)>(
          reinterpret_cast<char*>(&_impl_.best_acceleration_decision_),
          reinterpret_cast<char*>(&other->_impl_.best_acceleration_decision_));
}

::google::protobuf::Metadata MiniBenchmarkEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_getter, &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_once,
      file_level_metadata_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[24]);
}
// ===================================================================

class ModelFile::_Internal {
 public:
  using HasBits = decltype(std::declval<ModelFile>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ModelFile, _impl_._has_bits_);
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fd(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::tflite::proto::ModelIdGroup& model_id_group(const ModelFile* msg);
  static void set_has_model_id_group(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_buffer_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::tflite::proto::ModelIdGroup& ModelFile::_Internal::model_id_group(const ModelFile* msg) {
  return *msg->_impl_.model_id_group_;
}
ModelFile::ModelFile(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.proto.ModelFile)
}
ModelFile::ModelFile(const ModelFile& from) : ::google::protobuf::Message() {
  ModelFile* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.filename_){},
      decltype(_impl_.model_id_group_){nullptr},
      decltype(_impl_.fd_){},
      decltype(_impl_.offset_){},
      decltype(_impl_.length_){},
      decltype(_impl_.buffer_handle_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.filename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.filename_.Set(from._internal_filename(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.model_id_group_ = new ::tflite::proto::ModelIdGroup(*from._impl_.model_id_group_);
  }
  ::memcpy(&_impl_.fd_, &from._impl_.fd_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.buffer_handle_) -
    reinterpret_cast<char*>(&_impl_.fd_)) + sizeof(_impl_.buffer_handle_));

  // @@protoc_insertion_point(copy_constructor:tflite.proto.ModelFile)
}
inline void ModelFile::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.filename_){},
      decltype(_impl_.model_id_group_){nullptr},
      decltype(_impl_.fd_){::int64_t{0}},
      decltype(_impl_.offset_){::int64_t{0}},
      decltype(_impl_.length_){::int64_t{0}},
      decltype(_impl_.buffer_handle_){::int64_t{0}},
  };
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.filename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
ModelFile::~ModelFile() {
  // @@protoc_insertion_point(destructor:tflite.proto.ModelFile)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ModelFile::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filename_.Destroy();
  if (this != internal_default_instance()) delete _impl_.model_id_group_;
}
void ModelFile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ModelFile::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.proto.ModelFile)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.model_id_group_ != nullptr);
      _impl_.model_id_group_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.fd_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.buffer_handle_) -
        reinterpret_cast<char*>(&_impl_.fd_)) + sizeof(_impl_.buffer_handle_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ModelFile::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 39, 2> ModelFile::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ModelFile, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ModelFile_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string filename = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ModelFile, _impl_.filename_)}},
    // optional int64 fd = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ModelFile, _impl_.fd_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(ModelFile, _impl_.fd_)}},
    // optional int64 offset = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ModelFile, _impl_.offset_), 3>(),
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(ModelFile, _impl_.offset_)}},
    // optional int64 length = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ModelFile, _impl_.length_), 4>(),
     {32, 4, 0, PROTOBUF_FIELD_OFFSET(ModelFile, _impl_.length_)}},
    // optional .tflite.proto.ModelIdGroup model_id_group = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 1, 0, PROTOBUF_FIELD_OFFSET(ModelFile, _impl_.model_id_group_)}},
    // optional int64 buffer_handle = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ModelFile, _impl_.buffer_handle_), 5>(),
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(ModelFile, _impl_.buffer_handle_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string filename = 1;
    {PROTOBUF_FIELD_OFFSET(ModelFile, _impl_.filename_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional int64 fd = 2;
    {PROTOBUF_FIELD_OFFSET(ModelFile, _impl_.fd_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // optional int64 offset = 3;
    {PROTOBUF_FIELD_OFFSET(ModelFile, _impl_.offset_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // optional int64 length = 4;
    {PROTOBUF_FIELD_OFFSET(ModelFile, _impl_.length_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // optional .tflite.proto.ModelIdGroup model_id_group = 5;
    {PROTOBUF_FIELD_OFFSET(ModelFile, _impl_.model_id_group_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional int64 buffer_handle = 6;
    {PROTOBUF_FIELD_OFFSET(ModelFile, _impl_.buffer_handle_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tflite::proto::ModelIdGroup>()},
  }}, {{
    "\26\10\0\0\0\0\0\0"
    "tflite.proto.ModelFile"
    "filename"
  }},
};

::uint8_t* ModelFile::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.proto.ModelFile)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string filename = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_filename();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "tflite.proto.ModelFile.filename");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional int64 fd = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_fd(), target);
  }

  // optional int64 offset = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<3>(
            stream, this->_internal_offset(), target);
  }

  // optional int64 length = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<4>(
            stream, this->_internal_length(), target);
  }

  // optional .tflite.proto.ModelIdGroup model_id_group = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::model_id_group(this),
        _Internal::model_id_group(this).GetCachedSize(), target, stream);
  }

  // optional int64 buffer_handle = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<6>(
            stream, this->_internal_buffer_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.proto.ModelFile)
  return target;
}

::size_t ModelFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.proto.ModelFile)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string filename = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_filename());
    }

    // optional .tflite.proto.ModelIdGroup model_id_group = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.model_id_group_);
    }

    // optional int64 fd = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_fd());
    }

    // optional int64 offset = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_offset());
    }

    // optional int64 length = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_length());
    }

    // optional int64 buffer_handle = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_buffer_handle());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ModelFile::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ModelFile::MergeImpl
};
const ::google::protobuf::Message::ClassData*ModelFile::GetClassData() const { return &_class_data_; }


void ModelFile::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ModelFile*>(&to_msg);
  auto& from = static_cast<const ModelFile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.proto.ModelFile)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_model_id_group()->::tflite::proto::ModelIdGroup::MergeFrom(
          from._internal_model_id_group());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.fd_ = from._impl_.fd_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.offset_ = from._impl_.offset_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.length_ = from._impl_.length_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.buffer_handle_ = from._impl_.buffer_handle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ModelFile::CopyFrom(const ModelFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.proto.ModelFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ModelFile::IsInitialized() const {
  return true;
}

void ModelFile::InternalSwap(ModelFile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.filename_, lhs_arena,
                                       &other->_impl_.filename_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelFile, _impl_.buffer_handle_)
      + sizeof(ModelFile::_impl_.buffer_handle_)
      - PROTOBUF_FIELD_OFFSET(ModelFile, _impl_.model_id_group_)>(
          reinterpret_cast<char*>(&_impl_.model_id_group_),
          reinterpret_cast<char*>(&other->_impl_.model_id_group_));
}

::google::protobuf::Metadata ModelFile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_getter, &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_once,
      file_level_metadata_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[25]);
}
// ===================================================================

class ModelIdGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<ModelIdGroup>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ModelIdGroup, _impl_._has_bits_);
  static void set_has_model_namespace(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_model_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ModelIdGroup::ModelIdGroup(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.proto.ModelIdGroup)
}
ModelIdGroup::ModelIdGroup(const ModelIdGroup& from) : ::google::protobuf::Message() {
  ModelIdGroup* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.model_namespace_){},
      decltype(_impl_.model_id_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.model_namespace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.model_namespace_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.model_namespace_.Set(from._internal_model_namespace(), _this->GetArenaForAllocation());
  }
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.model_id_.Set(from._internal_model_id(), _this->GetArenaForAllocation());
  }

  // @@protoc_insertion_point(copy_constructor:tflite.proto.ModelIdGroup)
}
inline void ModelIdGroup::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.model_namespace_){},
      decltype(_impl_.model_id_){},
  };
  _impl_.model_namespace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.model_namespace_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
ModelIdGroup::~ModelIdGroup() {
  // @@protoc_insertion_point(destructor:tflite.proto.ModelIdGroup)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ModelIdGroup::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_namespace_.Destroy();
  _impl_.model_id_.Destroy();
}
void ModelIdGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ModelIdGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.proto.ModelIdGroup)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.model_namespace_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.model_id_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ModelIdGroup::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 57, 2> ModelIdGroup::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ModelIdGroup, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ModelIdGroup_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional string model_id = 2;
    {::_pbi::TcParser::FastSS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(ModelIdGroup, _impl_.model_id_)}},
    // optional string model_namespace = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ModelIdGroup, _impl_.model_namespace_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string model_namespace = 1;
    {PROTOBUF_FIELD_OFFSET(ModelIdGroup, _impl_.model_namespace_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string model_id = 2;
    {PROTOBUF_FIELD_OFFSET(ModelIdGroup, _impl_.model_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\31\17\10\0\0\0\0\0"
    "tflite.proto.ModelIdGroup"
    "model_namespace"
    "model_id"
  }},
};

::uint8_t* ModelIdGroup::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.proto.ModelIdGroup)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string model_namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_model_namespace();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "tflite.proto.ModelIdGroup.model_namespace");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string model_id = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_model_id();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "tflite.proto.ModelIdGroup.model_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.proto.ModelIdGroup)
  return target;
}

::size_t ModelIdGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.proto.ModelIdGroup)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string model_namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_model_namespace());
    }

    // optional string model_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_model_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ModelIdGroup::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ModelIdGroup::MergeImpl
};
const ::google::protobuf::Message::ClassData*ModelIdGroup::GetClassData() const { return &_class_data_; }


void ModelIdGroup::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ModelIdGroup*>(&to_msg);
  auto& from = static_cast<const ModelIdGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.proto.ModelIdGroup)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_model_namespace(from._internal_model_namespace());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_model_id(from._internal_model_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ModelIdGroup::CopyFrom(const ModelIdGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.proto.ModelIdGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ModelIdGroup::IsInitialized() const {
  return true;
}

void ModelIdGroup::InternalSwap(ModelIdGroup* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.model_namespace_, lhs_arena,
                                       &other->_impl_.model_namespace_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.model_id_, lhs_arena,
                                       &other->_impl_.model_id_, rhs_arena);
}

::google::protobuf::Metadata ModelIdGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_getter, &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_once,
      file_level_metadata_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[26]);
}
// ===================================================================

class BenchmarkStoragePaths::_Internal {
 public:
  using HasBits = decltype(std::declval<BenchmarkStoragePaths>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BenchmarkStoragePaths, _impl_._has_bits_);
  static void set_has_storage_file_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data_directory_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BenchmarkStoragePaths::BenchmarkStoragePaths(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.proto.BenchmarkStoragePaths)
}
BenchmarkStoragePaths::BenchmarkStoragePaths(const BenchmarkStoragePaths& from) : ::google::protobuf::Message() {
  BenchmarkStoragePaths* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.storage_file_path_){},
      decltype(_impl_.data_directory_path_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.storage_file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.storage_file_path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.storage_file_path_.Set(from._internal_storage_file_path(), _this->GetArenaForAllocation());
  }
  _impl_.data_directory_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_directory_path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.data_directory_path_.Set(from._internal_data_directory_path(), _this->GetArenaForAllocation());
  }

  // @@protoc_insertion_point(copy_constructor:tflite.proto.BenchmarkStoragePaths)
}
inline void BenchmarkStoragePaths::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.storage_file_path_){},
      decltype(_impl_.data_directory_path_){},
  };
  _impl_.storage_file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.storage_file_path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_directory_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_directory_path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
BenchmarkStoragePaths::~BenchmarkStoragePaths() {
  // @@protoc_insertion_point(destructor:tflite.proto.BenchmarkStoragePaths)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BenchmarkStoragePaths::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.storage_file_path_.Destroy();
  _impl_.data_directory_path_.Destroy();
}
void BenchmarkStoragePaths::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void BenchmarkStoragePaths::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.proto.BenchmarkStoragePaths)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.storage_file_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.data_directory_path_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* BenchmarkStoragePaths::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 79, 2> BenchmarkStoragePaths::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BenchmarkStoragePaths, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_BenchmarkStoragePaths_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional string data_directory_path = 2;
    {::_pbi::TcParser::FastSS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(BenchmarkStoragePaths, _impl_.data_directory_path_)}},
    // optional string storage_file_path = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(BenchmarkStoragePaths, _impl_.storage_file_path_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string storage_file_path = 1;
    {PROTOBUF_FIELD_OFFSET(BenchmarkStoragePaths, _impl_.storage_file_path_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string data_directory_path = 2;
    {PROTOBUF_FIELD_OFFSET(BenchmarkStoragePaths, _impl_.data_directory_path_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\42\21\23\0\0\0\0\0"
    "tflite.proto.BenchmarkStoragePaths"
    "storage_file_path"
    "data_directory_path"
  }},
};

::uint8_t* BenchmarkStoragePaths::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.proto.BenchmarkStoragePaths)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string storage_file_path = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_storage_file_path();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "tflite.proto.BenchmarkStoragePaths.storage_file_path");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string data_directory_path = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_data_directory_path();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "tflite.proto.BenchmarkStoragePaths.data_directory_path");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.proto.BenchmarkStoragePaths)
  return target;
}

::size_t BenchmarkStoragePaths::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.proto.BenchmarkStoragePaths)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string storage_file_path = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_storage_file_path());
    }

    // optional string data_directory_path = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_data_directory_path());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData BenchmarkStoragePaths::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    BenchmarkStoragePaths::MergeImpl
};
const ::google::protobuf::Message::ClassData*BenchmarkStoragePaths::GetClassData() const { return &_class_data_; }


void BenchmarkStoragePaths::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<BenchmarkStoragePaths*>(&to_msg);
  auto& from = static_cast<const BenchmarkStoragePaths&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.proto.BenchmarkStoragePaths)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_storage_file_path(from._internal_storage_file_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_data_directory_path(from._internal_data_directory_path());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BenchmarkStoragePaths::CopyFrom(const BenchmarkStoragePaths& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.proto.BenchmarkStoragePaths)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BenchmarkStoragePaths::IsInitialized() const {
  return true;
}

void BenchmarkStoragePaths::InternalSwap(BenchmarkStoragePaths* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.storage_file_path_, lhs_arena,
                                       &other->_impl_.storage_file_path_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_directory_path_, lhs_arena,
                                       &other->_impl_.data_directory_path_, rhs_arena);
}

::google::protobuf::Metadata BenchmarkStoragePaths::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_getter, &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_once,
      file_level_metadata_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[27]);
}
// ===================================================================

class ValidationSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<ValidationSettings>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ValidationSettings, _impl_._has_bits_);
  static void set_has_per_test_timeout_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ValidationSettings::ValidationSettings(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.proto.ValidationSettings)
}
ValidationSettings::ValidationSettings(const ValidationSettings& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tflite.proto.ValidationSettings)
}
inline void ValidationSettings::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.per_test_timeout_ms_){::int64_t{0}},
  };
}
ValidationSettings::~ValidationSettings() {
  // @@protoc_insertion_point(destructor:tflite.proto.ValidationSettings)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ValidationSettings::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void ValidationSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ValidationSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.proto.ValidationSettings)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.per_test_timeout_ms_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ValidationSettings::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> ValidationSettings::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ValidationSettings, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ValidationSettings_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional int64 per_test_timeout_ms = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ValidationSettings, _impl_.per_test_timeout_ms_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(ValidationSettings, _impl_.per_test_timeout_ms_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int64 per_test_timeout_ms = 1;
    {PROTOBUF_FIELD_OFFSET(ValidationSettings, _impl_.per_test_timeout_ms_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* ValidationSettings::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.proto.ValidationSettings)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 per_test_timeout_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_per_test_timeout_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.proto.ValidationSettings)
  return target;
}

::size_t ValidationSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.proto.ValidationSettings)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 per_test_timeout_ms = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_per_test_timeout_ms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ValidationSettings::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ValidationSettings::MergeImpl
};
const ::google::protobuf::Message::ClassData*ValidationSettings::GetClassData() const { return &_class_data_; }


void ValidationSettings::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ValidationSettings*>(&to_msg);
  auto& from = static_cast<const ValidationSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.proto.ValidationSettings)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_per_test_timeout_ms(from._internal_per_test_timeout_ms());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ValidationSettings::CopyFrom(const ValidationSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.proto.ValidationSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ValidationSettings::IsInitialized() const {
  return true;
}

void ValidationSettings::InternalSwap(ValidationSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
        swap(_impl_.per_test_timeout_ms_, other->_impl_.per_test_timeout_ms_);
}

::google::protobuf::Metadata ValidationSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_getter, &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_once,
      file_level_metadata_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[28]);
}
// ===================================================================

class MinibenchmarkSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<MinibenchmarkSettings>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MinibenchmarkSettings, _impl_._has_bits_);
  static const ::tflite::proto::ModelFile& model_file(const MinibenchmarkSettings* msg);
  static void set_has_model_file(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tflite::proto::BenchmarkStoragePaths& storage_paths(const MinibenchmarkSettings* msg);
  static void set_has_storage_paths(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tflite::proto::ValidationSettings& validation_settings(const MinibenchmarkSettings* msg);
  static void set_has_validation_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::tflite::proto::ModelFile& MinibenchmarkSettings::_Internal::model_file(const MinibenchmarkSettings* msg) {
  return *msg->_impl_.model_file_;
}
const ::tflite::proto::BenchmarkStoragePaths& MinibenchmarkSettings::_Internal::storage_paths(const MinibenchmarkSettings* msg) {
  return *msg->_impl_.storage_paths_;
}
const ::tflite::proto::ValidationSettings& MinibenchmarkSettings::_Internal::validation_settings(const MinibenchmarkSettings* msg) {
  return *msg->_impl_.validation_settings_;
}
MinibenchmarkSettings::MinibenchmarkSettings(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.proto.MinibenchmarkSettings)
}
MinibenchmarkSettings::MinibenchmarkSettings(const MinibenchmarkSettings& from) : ::google::protobuf::Message() {
  MinibenchmarkSettings* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.settings_to_test_){from._impl_.settings_to_test_},
      decltype(_impl_.model_file_){nullptr},
      decltype(_impl_.storage_paths_){nullptr},
      decltype(_impl_.validation_settings_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.model_file_ = new ::tflite::proto::ModelFile(*from._impl_.model_file_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.storage_paths_ = new ::tflite::proto::BenchmarkStoragePaths(*from._impl_.storage_paths_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.validation_settings_ = new ::tflite::proto::ValidationSettings(*from._impl_.validation_settings_);
  }

  // @@protoc_insertion_point(copy_constructor:tflite.proto.MinibenchmarkSettings)
}
inline void MinibenchmarkSettings::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.settings_to_test_){arena},
      decltype(_impl_.model_file_){nullptr},
      decltype(_impl_.storage_paths_){nullptr},
      decltype(_impl_.validation_settings_){nullptr},
  };
}
MinibenchmarkSettings::~MinibenchmarkSettings() {
  // @@protoc_insertion_point(destructor:tflite.proto.MinibenchmarkSettings)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MinibenchmarkSettings::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.settings_to_test_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.model_file_;
  if (this != internal_default_instance()) delete _impl_.storage_paths_;
  if (this != internal_default_instance()) delete _impl_.validation_settings_;
}
void MinibenchmarkSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void MinibenchmarkSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.proto.MinibenchmarkSettings)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_settings_to_test()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.model_file_ != nullptr);
      _impl_.model_file_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.storage_paths_ != nullptr);
      _impl_.storage_paths_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.validation_settings_ != nullptr);
      _impl_.validation_settings_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MinibenchmarkSettings::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 4, 0, 2> MinibenchmarkSettings::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MinibenchmarkSettings, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MinibenchmarkSettings_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional .tflite.proto.ValidationSettings validation_settings = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 3, PROTOBUF_FIELD_OFFSET(MinibenchmarkSettings, _impl_.validation_settings_)}},
    // repeated .tflite.proto.TFLiteSettings settings_to_test = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MinibenchmarkSettings, _impl_.settings_to_test_)}},
    // optional .tflite.proto.ModelFile model_file = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 1, PROTOBUF_FIELD_OFFSET(MinibenchmarkSettings, _impl_.model_file_)}},
    // optional .tflite.proto.BenchmarkStoragePaths storage_paths = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 2, PROTOBUF_FIELD_OFFSET(MinibenchmarkSettings, _impl_.storage_paths_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tflite.proto.TFLiteSettings settings_to_test = 1;
    {PROTOBUF_FIELD_OFFSET(MinibenchmarkSettings, _impl_.settings_to_test_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .tflite.proto.ModelFile model_file = 2;
    {PROTOBUF_FIELD_OFFSET(MinibenchmarkSettings, _impl_.model_file_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .tflite.proto.BenchmarkStoragePaths storage_paths = 3;
    {PROTOBUF_FIELD_OFFSET(MinibenchmarkSettings, _impl_.storage_paths_), _Internal::kHasBitsOffset + 1, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .tflite.proto.ValidationSettings validation_settings = 4;
    {PROTOBUF_FIELD_OFFSET(MinibenchmarkSettings, _impl_.validation_settings_), _Internal::kHasBitsOffset + 2, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tflite::proto::TFLiteSettings>()},
    {::_pbi::TcParser::GetTable<::tflite::proto::ModelFile>()},
    {::_pbi::TcParser::GetTable<::tflite::proto::BenchmarkStoragePaths>()},
    {::_pbi::TcParser::GetTable<::tflite::proto::ValidationSettings>()},
  }}, {{
  }},
};

::uint8_t* MinibenchmarkSettings::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.proto.MinibenchmarkSettings)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .tflite.proto.TFLiteSettings settings_to_test = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_settings_to_test_size()); i < n; i++) {
    const auto& repfield = this->_internal_settings_to_test().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .tflite.proto.ModelFile model_file = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::model_file(this),
        _Internal::model_file(this).GetCachedSize(), target, stream);
  }

  // optional .tflite.proto.BenchmarkStoragePaths storage_paths = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::storage_paths(this),
        _Internal::storage_paths(this).GetCachedSize(), target, stream);
  }

  // optional .tflite.proto.ValidationSettings validation_settings = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::validation_settings(this),
        _Internal::validation_settings(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.proto.MinibenchmarkSettings)
  return target;
}

::size_t MinibenchmarkSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.proto.MinibenchmarkSettings)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tflite.proto.TFLiteSettings settings_to_test = 1;
  total_size += 1UL * this->_internal_settings_to_test_size();
  for (const auto& msg : this->_internal_settings_to_test()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .tflite.proto.ModelFile model_file = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.model_file_);
    }

    // optional .tflite.proto.BenchmarkStoragePaths storage_paths = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.storage_paths_);
    }

    // optional .tflite.proto.ValidationSettings validation_settings = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.validation_settings_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MinibenchmarkSettings::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    MinibenchmarkSettings::MergeImpl
};
const ::google::protobuf::Message::ClassData*MinibenchmarkSettings::GetClassData() const { return &_class_data_; }


void MinibenchmarkSettings::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MinibenchmarkSettings*>(&to_msg);
  auto& from = static_cast<const MinibenchmarkSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.proto.MinibenchmarkSettings)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_settings_to_test()->MergeFrom(from._internal_settings_to_test());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_model_file()->::tflite::proto::ModelFile::MergeFrom(
          from._internal_model_file());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_storage_paths()->::tflite::proto::BenchmarkStoragePaths::MergeFrom(
          from._internal_storage_paths());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_validation_settings()->::tflite::proto::ValidationSettings::MergeFrom(
          from._internal_validation_settings());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MinibenchmarkSettings::CopyFrom(const MinibenchmarkSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.proto.MinibenchmarkSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MinibenchmarkSettings::IsInitialized() const {
  return true;
}

void MinibenchmarkSettings::InternalSwap(MinibenchmarkSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.settings_to_test_.InternalSwap(&other->_impl_.settings_to_test_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MinibenchmarkSettings, _impl_.validation_settings_)
      + sizeof(MinibenchmarkSettings::_impl_.validation_settings_)
      - PROTOBUF_FIELD_OFFSET(MinibenchmarkSettings, _impl_.model_file_)>(
          reinterpret_cast<char*>(&_impl_.model_file_),
          reinterpret_cast<char*>(&other->_impl_.model_file_));
}

::google::protobuf::Metadata MinibenchmarkSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_getter, &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_once,
      file_level_metadata_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[29]);
}
// ===================================================================

class BenchmarkEventStorage::_Internal {
 public:
  using HasBits = decltype(std::declval<BenchmarkEventStorage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BenchmarkEventStorage, _impl_._has_bits_);
  static const ::tflite::proto::ModelIdGroup& model_id_group(const BenchmarkEventStorage* msg);
  static void set_has_model_id_group(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tflite::proto::BenchmarkEvent& benchmark_event(const BenchmarkEventStorage* msg);
  static void set_has_benchmark_event(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::tflite::proto::ModelIdGroup& BenchmarkEventStorage::_Internal::model_id_group(const BenchmarkEventStorage* msg) {
  return *msg->_impl_.model_id_group_;
}
const ::tflite::proto::BenchmarkEvent& BenchmarkEventStorage::_Internal::benchmark_event(const BenchmarkEventStorage* msg) {
  return *msg->_impl_.benchmark_event_;
}
BenchmarkEventStorage::BenchmarkEventStorage(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.proto.BenchmarkEventStorage)
}
BenchmarkEventStorage::BenchmarkEventStorage(const BenchmarkEventStorage& from) : ::google::protobuf::Message() {
  BenchmarkEventStorage* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.model_id_group_){nullptr},
      decltype(_impl_.benchmark_event_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.model_id_group_ = new ::tflite::proto::ModelIdGroup(*from._impl_.model_id_group_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.benchmark_event_ = new ::tflite::proto::BenchmarkEvent(*from._impl_.benchmark_event_);
  }

  // @@protoc_insertion_point(copy_constructor:tflite.proto.BenchmarkEventStorage)
}
inline void BenchmarkEventStorage::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.model_id_group_){nullptr},
      decltype(_impl_.benchmark_event_){nullptr},
  };
}
BenchmarkEventStorage::~BenchmarkEventStorage() {
  // @@protoc_insertion_point(destructor:tflite.proto.BenchmarkEventStorage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BenchmarkEventStorage::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.model_id_group_;
  if (this != internal_default_instance()) delete _impl_.benchmark_event_;
}
void BenchmarkEventStorage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void BenchmarkEventStorage::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.proto.BenchmarkEventStorage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.model_id_group_ != nullptr);
      _impl_.model_id_group_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.benchmark_event_ != nullptr);
      _impl_.benchmark_event_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* BenchmarkEventStorage::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> BenchmarkEventStorage::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BenchmarkEventStorage, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_BenchmarkEventStorage_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional .tflite.proto.BenchmarkEvent benchmark_event = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(BenchmarkEventStorage, _impl_.benchmark_event_)}},
    // optional .tflite.proto.ModelIdGroup model_id_group = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(BenchmarkEventStorage, _impl_.model_id_group_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .tflite.proto.ModelIdGroup model_id_group = 1;
    {PROTOBUF_FIELD_OFFSET(BenchmarkEventStorage, _impl_.model_id_group_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .tflite.proto.BenchmarkEvent benchmark_event = 2;
    {PROTOBUF_FIELD_OFFSET(BenchmarkEventStorage, _impl_.benchmark_event_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tflite::proto::ModelIdGroup>()},
    {::_pbi::TcParser::GetTable<::tflite::proto::BenchmarkEvent>()},
  }}, {{
  }},
};

::uint8_t* BenchmarkEventStorage::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.proto.BenchmarkEventStorage)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .tflite.proto.ModelIdGroup model_id_group = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::model_id_group(this),
        _Internal::model_id_group(this).GetCachedSize(), target, stream);
  }

  // optional .tflite.proto.BenchmarkEvent benchmark_event = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::benchmark_event(this),
        _Internal::benchmark_event(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.proto.BenchmarkEventStorage)
  return target;
}

::size_t BenchmarkEventStorage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.proto.BenchmarkEventStorage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .tflite.proto.ModelIdGroup model_id_group = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.model_id_group_);
    }

    // optional .tflite.proto.BenchmarkEvent benchmark_event = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.benchmark_event_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData BenchmarkEventStorage::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    BenchmarkEventStorage::MergeImpl
};
const ::google::protobuf::Message::ClassData*BenchmarkEventStorage::GetClassData() const { return &_class_data_; }


void BenchmarkEventStorage::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<BenchmarkEventStorage*>(&to_msg);
  auto& from = static_cast<const BenchmarkEventStorage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.proto.BenchmarkEventStorage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_model_id_group()->::tflite::proto::ModelIdGroup::MergeFrom(
          from._internal_model_id_group());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_benchmark_event()->::tflite::proto::BenchmarkEvent::MergeFrom(
          from._internal_benchmark_event());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BenchmarkEventStorage::CopyFrom(const BenchmarkEventStorage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.proto.BenchmarkEventStorage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BenchmarkEventStorage::IsInitialized() const {
  return true;
}

void BenchmarkEventStorage::InternalSwap(BenchmarkEventStorage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BenchmarkEventStorage, _impl_.benchmark_event_)
      + sizeof(BenchmarkEventStorage::_impl_.benchmark_event_)
      - PROTOBUF_FIELD_OFFSET(BenchmarkEventStorage, _impl_.model_id_group_)>(
          reinterpret_cast<char*>(&_impl_.model_id_group_),
          reinterpret_cast<char*>(&other->_impl_.model_id_group_));
}

::google::protobuf::Metadata BenchmarkEventStorage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_getter, &descriptor_table_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto_once,
      file_level_metadata_tensorflow_2flite_2facceleration_2fconfiguration_2fconfiguration_2eproto[30]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace tflite
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
