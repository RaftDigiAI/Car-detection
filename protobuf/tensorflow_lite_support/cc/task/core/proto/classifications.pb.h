// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_lite_support/cc/task/core/proto/classifications.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_5flite_5fsupport_2fcc_2ftask_2fcore_2fproto_2fclassifications_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_5flite_5fsupport_2fcc_2ftask_2fcore_2fproto_2fclassifications_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "tensorflow_lite_support/cc/task/core/proto/class.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tensorflow_5flite_5fsupport_2fcc_2ftask_2fcore_2fproto_2fclassifications_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_5flite_5fsupport_2fcc_2ftask_2fcore_2fproto_2fclassifications_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fcore_2fproto_2fclassifications_2eproto;
namespace tflite {
namespace task {
namespace core {
class ClassificationResult;
struct ClassificationResultDefaultTypeInternal;
extern ClassificationResultDefaultTypeInternal _ClassificationResult_default_instance_;
class Classifications;
struct ClassificationsDefaultTypeInternal;
extern ClassificationsDefaultTypeInternal _Classifications_default_instance_;
}  // namespace core
}  // namespace task
}  // namespace tflite
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tflite {
namespace task {
namespace core {

// ===================================================================


// -------------------------------------------------------------------

class Classifications final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.task.core.Classifications) */ {
 public:
  inline Classifications() : Classifications(nullptr) {}
  ~Classifications() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Classifications(::google::protobuf::internal::ConstantInitialized);

  Classifications(const Classifications& from);
  Classifications(Classifications&& from) noexcept
    : Classifications() {
    *this = ::std::move(from);
  }

  inline Classifications& operator=(const Classifications& from) {
    CopyFrom(from);
    return *this;
  }
  inline Classifications& operator=(Classifications&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Classifications& default_instance() {
    return *internal_default_instance();
  }
  static inline const Classifications* internal_default_instance() {
    return reinterpret_cast<const Classifications*>(
               &_Classifications_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Classifications& a, Classifications& b) {
    a.Swap(&b);
  }
  inline void Swap(Classifications* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Classifications* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Classifications* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Classifications>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Classifications& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Classifications& from) {
    Classifications::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Classifications* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tflite.task.core.Classifications";
  }
  protected:
  explicit Classifications(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassesFieldNumber = 1,
    kHeadNameFieldNumber = 3,
    kHeadIndexFieldNumber = 2,
  };
  // repeated .tflite.task.core.Class classes = 1;
  int classes_size() const;
  private:
  int _internal_classes_size() const;

  public:
  void clear_classes() ;
  ::tflite::task::core::Class* mutable_classes(int index);
  ::google::protobuf::RepeatedPtrField< ::tflite::task::core::Class >*
      mutable_classes();
  private:
  const ::google::protobuf::RepeatedPtrField<::tflite::task::core::Class>& _internal_classes() const;
  ::google::protobuf::RepeatedPtrField<::tflite::task::core::Class>* _internal_mutable_classes();
  public:
  const ::tflite::task::core::Class& classes(int index) const;
  ::tflite::task::core::Class* add_classes();
  const ::google::protobuf::RepeatedPtrField< ::tflite::task::core::Class >&
      classes() const;
  // optional string head_name = 3;
  bool has_head_name() const;
  void clear_head_name() ;
  const std::string& head_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_head_name(Arg_&& arg, Args_... args);
  std::string* mutable_head_name();
  PROTOBUF_NODISCARD std::string* release_head_name();
  void set_allocated_head_name(std::string* ptr);

  private:
  const std::string& _internal_head_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_head_name(
      const std::string& value);
  std::string* _internal_mutable_head_name();

  public:
  // optional int32 head_index = 2;
  bool has_head_index() const;
  void clear_head_index() ;
  ::int32_t head_index() const;
  void set_head_index(::int32_t value);

  private:
  ::int32_t _internal_head_index() const;
  void _internal_set_head_index(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tflite.task.core.Classifications)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 1, 50, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::tflite::task::core::Class > classes_;
    ::google::protobuf::internal::ArenaStringPtr head_name_;
    ::int32_t head_index_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5flite_5fsupport_2fcc_2ftask_2fcore_2fproto_2fclassifications_2eproto;
};// -------------------------------------------------------------------

class ClassificationResult final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.task.core.ClassificationResult) */ {
 public:
  inline ClassificationResult() : ClassificationResult(nullptr) {}
  ~ClassificationResult() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ClassificationResult(::google::protobuf::internal::ConstantInitialized);

  ClassificationResult(const ClassificationResult& from);
  ClassificationResult(ClassificationResult&& from) noexcept
    : ClassificationResult() {
    *this = ::std::move(from);
  }

  inline ClassificationResult& operator=(const ClassificationResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClassificationResult& operator=(ClassificationResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClassificationResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClassificationResult* internal_default_instance() {
    return reinterpret_cast<const ClassificationResult*>(
               &_ClassificationResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClassificationResult& a, ClassificationResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ClassificationResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClassificationResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClassificationResult* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClassificationResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ClassificationResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ClassificationResult& from) {
    ClassificationResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClassificationResult* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tflite.task.core.ClassificationResult";
  }
  protected:
  explicit ClassificationResult(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassificationsFieldNumber = 1,
  };
  // repeated .tflite.task.core.Classifications classifications = 1;
  int classifications_size() const;
  private:
  int _internal_classifications_size() const;

  public:
  void clear_classifications() ;
  ::tflite::task::core::Classifications* mutable_classifications(int index);
  ::google::protobuf::RepeatedPtrField< ::tflite::task::core::Classifications >*
      mutable_classifications();
  private:
  const ::google::protobuf::RepeatedPtrField<::tflite::task::core::Classifications>& _internal_classifications() const;
  ::google::protobuf::RepeatedPtrField<::tflite::task::core::Classifications>* _internal_mutable_classifications();
  public:
  const ::tflite::task::core::Classifications& classifications(int index) const;
  ::tflite::task::core::Classifications* add_classifications();
  const ::google::protobuf::RepeatedPtrField< ::tflite::task::core::Classifications >&
      classifications() const;
  // @@protoc_insertion_point(class_scope:tflite.task.core.ClassificationResult)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::tflite::task::core::Classifications > classifications_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5flite_5fsupport_2fcc_2ftask_2fcore_2fproto_2fclassifications_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Classifications

// repeated .tflite.task.core.Class classes = 1;
inline int Classifications::_internal_classes_size() const {
  return _internal_classes().size();
}
inline int Classifications::classes_size() const {
  return _internal_classes_size();
}
inline ::tflite::task::core::Class* Classifications::mutable_classes(int index) {
  // @@protoc_insertion_point(field_mutable:tflite.task.core.Classifications.classes)
  return _internal_mutable_classes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tflite::task::core::Class >*
Classifications::mutable_classes() {
  // @@protoc_insertion_point(field_mutable_list:tflite.task.core.Classifications.classes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_classes();
}
inline const ::tflite::task::core::Class& Classifications::classes(int index) const {
  // @@protoc_insertion_point(field_get:tflite.task.core.Classifications.classes)
    return _internal_classes().Get(index);
}
inline ::tflite::task::core::Class* Classifications::add_classes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::tflite::task::core::Class* _add = _internal_mutable_classes()->Add();
  // @@protoc_insertion_point(field_add:tflite.task.core.Classifications.classes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::tflite::task::core::Class >&
Classifications::classes() const {
  // @@protoc_insertion_point(field_list:tflite.task.core.Classifications.classes)
  return _internal_classes();
}
inline const ::google::protobuf::RepeatedPtrField<::tflite::task::core::Class>&
Classifications::_internal_classes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.classes_;
}
inline ::google::protobuf::RepeatedPtrField<::tflite::task::core::Class>*
Classifications::_internal_mutable_classes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.classes_;
}

// optional int32 head_index = 2;
inline bool Classifications::has_head_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Classifications::clear_head_index() {
  _impl_.head_index_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Classifications::head_index() const {
  // @@protoc_insertion_point(field_get:tflite.task.core.Classifications.head_index)
  return _internal_head_index();
}
inline void Classifications::set_head_index(::int32_t value) {
  _internal_set_head_index(value);
  // @@protoc_insertion_point(field_set:tflite.task.core.Classifications.head_index)
}
inline ::int32_t Classifications::_internal_head_index() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.head_index_;
}
inline void Classifications::_internal_set_head_index(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.head_index_ = value;
}

// optional string head_name = 3;
inline bool Classifications::has_head_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Classifications::clear_head_name() {
  _impl_.head_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Classifications::head_name() const {
  // @@protoc_insertion_point(field_get:tflite.task.core.Classifications.head_name)
  return _internal_head_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Classifications::set_head_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.head_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.task.core.Classifications.head_name)
}
inline std::string* Classifications::mutable_head_name() {
  std::string* _s = _internal_mutable_head_name();
  // @@protoc_insertion_point(field_mutable:tflite.task.core.Classifications.head_name)
  return _s;
}
inline const std::string& Classifications::_internal_head_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.head_name_.Get();
}
inline void Classifications::_internal_set_head_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.head_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Classifications::_internal_mutable_head_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.head_name_.Mutable( GetArenaForAllocation());
}
inline std::string* Classifications::release_head_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.task.core.Classifications.head_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.head_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.head_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Classifications::set_allocated_head_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.head_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.head_name_.IsDefault()) {
          _impl_.head_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.task.core.Classifications.head_name)
}

// -------------------------------------------------------------------

// ClassificationResult

// repeated .tflite.task.core.Classifications classifications = 1;
inline int ClassificationResult::_internal_classifications_size() const {
  return _internal_classifications().size();
}
inline int ClassificationResult::classifications_size() const {
  return _internal_classifications_size();
}
inline void ClassificationResult::clear_classifications() {
  _internal_mutable_classifications()->Clear();
}
inline ::tflite::task::core::Classifications* ClassificationResult::mutable_classifications(int index) {
  // @@protoc_insertion_point(field_mutable:tflite.task.core.ClassificationResult.classifications)
  return _internal_mutable_classifications()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tflite::task::core::Classifications >*
ClassificationResult::mutable_classifications() {
  // @@protoc_insertion_point(field_mutable_list:tflite.task.core.ClassificationResult.classifications)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_classifications();
}
inline const ::tflite::task::core::Classifications& ClassificationResult::classifications(int index) const {
  // @@protoc_insertion_point(field_get:tflite.task.core.ClassificationResult.classifications)
    return _internal_classifications().Get(index);
}
inline ::tflite::task::core::Classifications* ClassificationResult::add_classifications() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::tflite::task::core::Classifications* _add = _internal_mutable_classifications()->Add();
  // @@protoc_insertion_point(field_add:tflite.task.core.ClassificationResult.classifications)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::tflite::task::core::Classifications >&
ClassificationResult::classifications() const {
  // @@protoc_insertion_point(field_list:tflite.task.core.ClassificationResult.classifications)
  return _internal_classifications();
}
inline const ::google::protobuf::RepeatedPtrField<::tflite::task::core::Classifications>&
ClassificationResult::_internal_classifications() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.classifications_;
}
inline ::google::protobuf::RepeatedPtrField<::tflite::task::core::Classifications>*
ClassificationResult::_internal_mutable_classifications() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.classifications_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace core
}  // namespace task
}  // namespace tflite


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_tensorflow_5flite_5fsupport_2fcc_2ftask_2fcore_2fproto_2fclassifications_2eproto_2epb_2eh
