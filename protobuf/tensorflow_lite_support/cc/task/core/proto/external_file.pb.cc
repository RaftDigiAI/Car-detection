// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_lite_support/cc/task/core/proto/external_file.proto

#include "tensorflow_lite_support/cc/task/core/proto/external_file.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace tflite {
namespace task {
namespace core {
        template <typename>
PROTOBUF_CONSTEXPR ExternalFile::ExternalFile(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.file_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.file_content_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.file_descriptor_meta_)*/ nullptr,
    } {}
struct ExternalFileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExternalFileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExternalFileDefaultTypeInternal() {}
  union {
    ExternalFile _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExternalFileDefaultTypeInternal _ExternalFile_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR FileDescriptorMeta::FileDescriptorMeta(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.length_)*/ ::int64_t{0},
      /*decltype(_impl_.offset_)*/ ::int64_t{0},
      /*decltype(_impl_.fd_)*/ 0,
    } {}
struct FileDescriptorMetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileDescriptorMetaDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileDescriptorMetaDefaultTypeInternal() {}
  union {
    FileDescriptorMeta _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileDescriptorMetaDefaultTypeInternal _FileDescriptorMeta_default_instance_;
}  // namespace core
}  // namespace task
}  // namespace tflite
static ::_pb::Metadata file_level_metadata_tensorflow_5flite_5fsupport_2fcc_2ftask_2fcore_2fproto_2fexternal_5ffile_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_tensorflow_5flite_5fsupport_2fcc_2ftask_2fcore_2fproto_2fexternal_5ffile_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_tensorflow_5flite_5fsupport_2fcc_2ftask_2fcore_2fproto_2fexternal_5ffile_2eproto = nullptr;
const ::uint32_t TableStruct_tensorflow_5flite_5fsupport_2fcc_2ftask_2fcore_2fproto_2fexternal_5ffile_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::tflite::task::core::ExternalFile, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tflite::task::core::ExternalFile, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tflite::task::core::ExternalFile, _impl_.file_name_),
    PROTOBUF_FIELD_OFFSET(::tflite::task::core::ExternalFile, _impl_.file_content_),
    PROTOBUF_FIELD_OFFSET(::tflite::task::core::ExternalFile, _impl_.file_descriptor_meta_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::tflite::task::core::FileDescriptorMeta, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tflite::task::core::FileDescriptorMeta, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tflite::task::core::FileDescriptorMeta, _impl_.fd_),
    PROTOBUF_FIELD_OFFSET(::tflite::task::core::FileDescriptorMeta, _impl_.length_),
    PROTOBUF_FIELD_OFFSET(::tflite::task::core::FileDescriptorMeta, _impl_.offset_),
    2,
    0,
    1,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 11, -1, sizeof(::tflite::task::core::ExternalFile)},
        {14, 25, -1, sizeof(::tflite::task::core::FileDescriptorMeta)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::tflite::task::core::_ExternalFile_default_instance_._instance,
    &::tflite::task::core::_FileDescriptorMeta_default_instance_._instance,
};
const char descriptor_table_protodef_tensorflow_5flite_5fsupport_2fcc_2ftask_2fcore_2fproto_2fexternal_5ffile_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n>tensorflow_lite_support/cc/task/core/p"
    "roto/external_file.proto\022\020tflite.task.co"
    "re\"\201\001\n\014ExternalFile\022\021\n\tfile_name\030\001 \001(\t\022\024"
    "\n\014file_content\030\002 \001(\014\022B\n\024file_descriptor_"
    "meta\030\004 \001(\0132$.tflite.task.core.FileDescri"
    "ptorMetaJ\004\010\003\020\004\"@\n\022FileDescriptorMeta\022\n\n\002"
    "fd\030\001 \001(\005\022\016\n\006length\030\002 \001(\003\022\016\n\006offset\030\003 \001(\003"
};
static ::absl::once_flag descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fcore_2fproto_2fexternal_5ffile_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fcore_2fproto_2fexternal_5ffile_2eproto = {
    false,
    false,
    280,
    descriptor_table_protodef_tensorflow_5flite_5fsupport_2fcc_2ftask_2fcore_2fproto_2fexternal_5ffile_2eproto,
    "tensorflow_lite_support/cc/task/core/proto/external_file.proto",
    &descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fcore_2fproto_2fexternal_5ffile_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_tensorflow_5flite_5fsupport_2fcc_2ftask_2fcore_2fproto_2fexternal_5ffile_2eproto::offsets,
    file_level_metadata_tensorflow_5flite_5fsupport_2fcc_2ftask_2fcore_2fproto_2fexternal_5ffile_2eproto,
    file_level_enum_descriptors_tensorflow_5flite_5fsupport_2fcc_2ftask_2fcore_2fproto_2fexternal_5ffile_2eproto,
    file_level_service_descriptors_tensorflow_5flite_5fsupport_2fcc_2ftask_2fcore_2fproto_2fexternal_5ffile_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fcore_2fproto_2fexternal_5ffile_2eproto_getter() {
  return &descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fcore_2fproto_2fexternal_5ffile_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_5flite_5fsupport_2fcc_2ftask_2fcore_2fproto_2fexternal_5ffile_2eproto(&descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fcore_2fproto_2fexternal_5ffile_2eproto);
namespace tflite {
namespace task {
namespace core {
// ===================================================================

class ExternalFile::_Internal {
 public:
  using HasBits = decltype(std::declval<ExternalFile>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ExternalFile, _impl_._has_bits_);
  static void set_has_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_file_content(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tflite::task::core::FileDescriptorMeta& file_descriptor_meta(const ExternalFile* msg);
  static void set_has_file_descriptor_meta(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::tflite::task::core::FileDescriptorMeta& ExternalFile::_Internal::file_descriptor_meta(const ExternalFile* msg) {
  return *msg->_impl_.file_descriptor_meta_;
}
ExternalFile::ExternalFile(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.task.core.ExternalFile)
}
ExternalFile::ExternalFile(const ExternalFile& from) : ::google::protobuf::Message() {
  ExternalFile* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.file_name_){},
      decltype(_impl_.file_content_){},
      decltype(_impl_.file_descriptor_meta_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.file_name_.Set(from._internal_file_name(), _this->GetArenaForAllocation());
  }
  _impl_.file_content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.file_content_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.file_content_.Set(from._internal_file_content(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.file_descriptor_meta_ = new ::tflite::task::core::FileDescriptorMeta(*from._impl_.file_descriptor_meta_);
  }

  // @@protoc_insertion_point(copy_constructor:tflite.task.core.ExternalFile)
}
inline void ExternalFile::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.file_name_){},
      decltype(_impl_.file_content_){},
      decltype(_impl_.file_descriptor_meta_){nullptr},
  };
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.file_content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.file_content_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
ExternalFile::~ExternalFile() {
  // @@protoc_insertion_point(destructor:tflite.task.core.ExternalFile)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ExternalFile::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.file_name_.Destroy();
  _impl_.file_content_.Destroy();
  if (this != internal_default_instance()) delete _impl_.file_descriptor_meta_;
}
void ExternalFile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ExternalFile::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.task.core.ExternalFile)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.file_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.file_content_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.file_descriptor_meta_ != nullptr);
      _impl_.file_descriptor_meta_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ExternalFile::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 47, 2> ExternalFile::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ExternalFile, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967284,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ExternalFile_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional .tflite.task.core.FileDescriptorMeta file_descriptor_meta = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 0, PROTOBUF_FIELD_OFFSET(ExternalFile, _impl_.file_descriptor_meta_)}},
    // optional string file_name = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ExternalFile, _impl_.file_name_)}},
    // optional bytes file_content = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(ExternalFile, _impl_.file_content_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string file_name = 1;
    {PROTOBUF_FIELD_OFFSET(ExternalFile, _impl_.file_name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional bytes file_content = 2;
    {PROTOBUF_FIELD_OFFSET(ExternalFile, _impl_.file_content_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional .tflite.task.core.FileDescriptorMeta file_descriptor_meta = 4;
    {PROTOBUF_FIELD_OFFSET(ExternalFile, _impl_.file_descriptor_meta_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tflite::task::core::FileDescriptorMeta>()},
  }}, {{
    "\35\11\0\0\0\0\0\0"
    "tflite.task.core.ExternalFile"
    "file_name"
  }},
};

::uint8_t* ExternalFile::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.task.core.ExternalFile)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string file_name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_file_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "tflite.task.core.ExternalFile.file_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional bytes file_content = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_file_content();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // optional .tflite.task.core.FileDescriptorMeta file_descriptor_meta = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::file_descriptor_meta(this),
        _Internal::file_descriptor_meta(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.task.core.ExternalFile)
  return target;
}

::size_t ExternalFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.task.core.ExternalFile)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string file_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_file_name());
    }

    // optional bytes file_content = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_file_content());
    }

    // optional .tflite.task.core.FileDescriptorMeta file_descriptor_meta = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.file_descriptor_meta_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ExternalFile::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ExternalFile::MergeImpl
};
const ::google::protobuf::Message::ClassData*ExternalFile::GetClassData() const { return &_class_data_; }


void ExternalFile::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ExternalFile*>(&to_msg);
  auto& from = static_cast<const ExternalFile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.task.core.ExternalFile)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_file_name(from._internal_file_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_file_content(from._internal_file_content());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_file_descriptor_meta()->::tflite::task::core::FileDescriptorMeta::MergeFrom(
          from._internal_file_descriptor_meta());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ExternalFile::CopyFrom(const ExternalFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.task.core.ExternalFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ExternalFile::IsInitialized() const {
  return true;
}

void ExternalFile::InternalSwap(ExternalFile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.file_name_, lhs_arena,
                                       &other->_impl_.file_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.file_content_, lhs_arena,
                                       &other->_impl_.file_content_, rhs_arena);
  swap(_impl_.file_descriptor_meta_, other->_impl_.file_descriptor_meta_);
}

::google::protobuf::Metadata ExternalFile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fcore_2fproto_2fexternal_5ffile_2eproto_getter, &descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fcore_2fproto_2fexternal_5ffile_2eproto_once,
      file_level_metadata_tensorflow_5flite_5fsupport_2fcc_2ftask_2fcore_2fproto_2fexternal_5ffile_2eproto[0]);
}
// ===================================================================

class FileDescriptorMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<FileDescriptorMeta>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FileDescriptorMeta, _impl_._has_bits_);
  static void set_has_fd(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FileDescriptorMeta::FileDescriptorMeta(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.task.core.FileDescriptorMeta)
}
FileDescriptorMeta::FileDescriptorMeta(const FileDescriptorMeta& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tflite.task.core.FileDescriptorMeta)
}
inline void FileDescriptorMeta::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.length_){::int64_t{0}},
      decltype(_impl_.offset_){::int64_t{0}},
      decltype(_impl_.fd_){0},
  };
}
FileDescriptorMeta::~FileDescriptorMeta() {
  // @@protoc_insertion_point(destructor:tflite.task.core.FileDescriptorMeta)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FileDescriptorMeta::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void FileDescriptorMeta::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void FileDescriptorMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.task.core.FileDescriptorMeta)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.length_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.fd_) -
        reinterpret_cast<char*>(&_impl_.length_)) + sizeof(_impl_.fd_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FileDescriptorMeta::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> FileDescriptorMeta::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FileDescriptorMeta, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_FileDescriptorMeta_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional int32 fd = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FileDescriptorMeta, _impl_.fd_), 2>(),
     {8, 2, 0, PROTOBUF_FIELD_OFFSET(FileDescriptorMeta, _impl_.fd_)}},
    // optional int64 length = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(FileDescriptorMeta, _impl_.length_), 0>(),
     {16, 0, 0, PROTOBUF_FIELD_OFFSET(FileDescriptorMeta, _impl_.length_)}},
    // optional int64 offset = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(FileDescriptorMeta, _impl_.offset_), 1>(),
     {24, 1, 0, PROTOBUF_FIELD_OFFSET(FileDescriptorMeta, _impl_.offset_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 fd = 1;
    {PROTOBUF_FIELD_OFFSET(FileDescriptorMeta, _impl_.fd_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int64 length = 2;
    {PROTOBUF_FIELD_OFFSET(FileDescriptorMeta, _impl_.length_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // optional int64 offset = 3;
    {PROTOBUF_FIELD_OFFSET(FileDescriptorMeta, _impl_.offset_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* FileDescriptorMeta::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.task.core.FileDescriptorMeta)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 fd = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_fd(), target);
  }

  // optional int64 length = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_length(), target);
  }

  // optional int64 offset = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<3>(
            stream, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.task.core.FileDescriptorMeta)
  return target;
}

::size_t FileDescriptorMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.task.core.FileDescriptorMeta)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 length = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_length());
    }

    // optional int64 offset = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_offset());
    }

    // optional int32 fd = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_fd());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FileDescriptorMeta::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    FileDescriptorMeta::MergeImpl
};
const ::google::protobuf::Message::ClassData*FileDescriptorMeta::GetClassData() const { return &_class_data_; }


void FileDescriptorMeta::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FileDescriptorMeta*>(&to_msg);
  auto& from = static_cast<const FileDescriptorMeta&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.task.core.FileDescriptorMeta)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.length_ = from._impl_.length_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.offset_ = from._impl_.offset_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.fd_ = from._impl_.fd_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FileDescriptorMeta::CopyFrom(const FileDescriptorMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.task.core.FileDescriptorMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FileDescriptorMeta::IsInitialized() const {
  return true;
}

void FileDescriptorMeta::InternalSwap(FileDescriptorMeta* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileDescriptorMeta, _impl_.fd_)
      + sizeof(FileDescriptorMeta::_impl_.fd_)
      - PROTOBUF_FIELD_OFFSET(FileDescriptorMeta, _impl_.length_)>(
          reinterpret_cast<char*>(&_impl_.length_),
          reinterpret_cast<char*>(&other->_impl_.length_));
}

::google::protobuf::Metadata FileDescriptorMeta::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fcore_2fproto_2fexternal_5ffile_2eproto_getter, &descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fcore_2fproto_2fexternal_5ffile_2eproto_once,
      file_level_metadata_tensorflow_5flite_5fsupport_2fcc_2ftask_2fcore_2fproto_2fexternal_5ffile_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace core
}  // namespace task
}  // namespace tflite
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
