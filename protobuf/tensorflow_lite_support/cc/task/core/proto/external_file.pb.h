// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_lite_support/cc/task/core/proto/external_file.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_5flite_5fsupport_2fcc_2ftask_2fcore_2fproto_2fexternal_5ffile_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_5flite_5fsupport_2fcc_2ftask_2fcore_2fproto_2fexternal_5ffile_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tensorflow_5flite_5fsupport_2fcc_2ftask_2fcore_2fproto_2fexternal_5ffile_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_5flite_5fsupport_2fcc_2ftask_2fcore_2fproto_2fexternal_5ffile_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fcore_2fproto_2fexternal_5ffile_2eproto;
namespace tflite {
namespace task {
namespace core {
class ExternalFile;
struct ExternalFileDefaultTypeInternal;
extern ExternalFileDefaultTypeInternal _ExternalFile_default_instance_;
class FileDescriptorMeta;
struct FileDescriptorMetaDefaultTypeInternal;
extern FileDescriptorMetaDefaultTypeInternal _FileDescriptorMeta_default_instance_;
}  // namespace core
}  // namespace task
}  // namespace tflite
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tflite {
namespace task {
namespace core {

// ===================================================================


// -------------------------------------------------------------------

class ExternalFile final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.task.core.ExternalFile) */ {
 public:
  inline ExternalFile() : ExternalFile(nullptr) {}
  ~ExternalFile() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ExternalFile(::google::protobuf::internal::ConstantInitialized);

  ExternalFile(const ExternalFile& from);
  ExternalFile(ExternalFile&& from) noexcept
    : ExternalFile() {
    *this = ::std::move(from);
  }

  inline ExternalFile& operator=(const ExternalFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExternalFile& operator=(ExternalFile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExternalFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExternalFile* internal_default_instance() {
    return reinterpret_cast<const ExternalFile*>(
               &_ExternalFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ExternalFile& a, ExternalFile& b) {
    a.Swap(&b);
  }
  inline void Swap(ExternalFile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExternalFile* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExternalFile* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExternalFile>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ExternalFile& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ExternalFile& from) {
    ExternalFile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExternalFile* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tflite.task.core.ExternalFile";
  }
  protected:
  explicit ExternalFile(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
    kFileContentFieldNumber = 2,
    kFileDescriptorMetaFieldNumber = 4,
  };
  // optional string file_name = 1;
  bool has_file_name() const;
  void clear_file_name() ;
  const std::string& file_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file_name(Arg_&& arg, Args_... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* ptr);

  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(
      const std::string& value);
  std::string* _internal_mutable_file_name();

  public:
  // optional bytes file_content = 2;
  bool has_file_content() const;
  void clear_file_content() ;
  const std::string& file_content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file_content(Arg_&& arg, Args_... args);
  std::string* mutable_file_content();
  PROTOBUF_NODISCARD std::string* release_file_content();
  void set_allocated_file_content(std::string* ptr);

  private:
  const std::string& _internal_file_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_content(
      const std::string& value);
  std::string* _internal_mutable_file_content();

  public:
  // optional .tflite.task.core.FileDescriptorMeta file_descriptor_meta = 4;
  bool has_file_descriptor_meta() const;
  void clear_file_descriptor_meta() ;
  const ::tflite::task::core::FileDescriptorMeta& file_descriptor_meta() const;
  PROTOBUF_NODISCARD ::tflite::task::core::FileDescriptorMeta* release_file_descriptor_meta();
  ::tflite::task::core::FileDescriptorMeta* mutable_file_descriptor_meta();
  void set_allocated_file_descriptor_meta(::tflite::task::core::FileDescriptorMeta* value);
  void unsafe_arena_set_allocated_file_descriptor_meta(::tflite::task::core::FileDescriptorMeta* value);
  ::tflite::task::core::FileDescriptorMeta* unsafe_arena_release_file_descriptor_meta();

  private:
  const ::tflite::task::core::FileDescriptorMeta& _internal_file_descriptor_meta() const;
  ::tflite::task::core::FileDescriptorMeta* _internal_mutable_file_descriptor_meta();

  public:
  // @@protoc_insertion_point(class_scope:tflite.task.core.ExternalFile)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 1, 47, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr file_name_;
    ::google::protobuf::internal::ArenaStringPtr file_content_;
    ::tflite::task::core::FileDescriptorMeta* file_descriptor_meta_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5flite_5fsupport_2fcc_2ftask_2fcore_2fproto_2fexternal_5ffile_2eproto;
};// -------------------------------------------------------------------

class FileDescriptorMeta final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.task.core.FileDescriptorMeta) */ {
 public:
  inline FileDescriptorMeta() : FileDescriptorMeta(nullptr) {}
  ~FileDescriptorMeta() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FileDescriptorMeta(::google::protobuf::internal::ConstantInitialized);

  FileDescriptorMeta(const FileDescriptorMeta& from);
  FileDescriptorMeta(FileDescriptorMeta&& from) noexcept
    : FileDescriptorMeta() {
    *this = ::std::move(from);
  }

  inline FileDescriptorMeta& operator=(const FileDescriptorMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileDescriptorMeta& operator=(FileDescriptorMeta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileDescriptorMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileDescriptorMeta* internal_default_instance() {
    return reinterpret_cast<const FileDescriptorMeta*>(
               &_FileDescriptorMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FileDescriptorMeta& a, FileDescriptorMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(FileDescriptorMeta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileDescriptorMeta* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileDescriptorMeta* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileDescriptorMeta>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FileDescriptorMeta& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FileDescriptorMeta& from) {
    FileDescriptorMeta::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileDescriptorMeta* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tflite.task.core.FileDescriptorMeta";
  }
  protected:
  explicit FileDescriptorMeta(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLengthFieldNumber = 2,
    kOffsetFieldNumber = 3,
    kFdFieldNumber = 1,
  };
  // optional int64 length = 2;
  bool has_length() const;
  void clear_length() ;
  ::int64_t length() const;
  void set_length(::int64_t value);

  private:
  ::int64_t _internal_length() const;
  void _internal_set_length(::int64_t value);

  public:
  // optional int64 offset = 3;
  bool has_offset() const;
  void clear_offset() ;
  ::int64_t offset() const;
  void set_offset(::int64_t value);

  private:
  ::int64_t _internal_offset() const;
  void _internal_set_offset(::int64_t value);

  public:
  // optional int32 fd = 1;
  bool has_fd() const;
  void clear_fd() ;
  ::int32_t fd() const;
  void set_fd(::int32_t value);

  private:
  ::int32_t _internal_fd() const;
  void _internal_set_fd(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tflite.task.core.FileDescriptorMeta)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t length_;
    ::int64_t offset_;
    ::int32_t fd_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5flite_5fsupport_2fcc_2ftask_2fcore_2fproto_2fexternal_5ffile_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ExternalFile

// optional string file_name = 1;
inline bool ExternalFile::has_file_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ExternalFile::clear_file_name() {
  _impl_.file_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ExternalFile::file_name() const {
  // @@protoc_insertion_point(field_get:tflite.task.core.ExternalFile.file_name)
  return _internal_file_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ExternalFile::set_file_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.file_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.task.core.ExternalFile.file_name)
}
inline std::string* ExternalFile::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:tflite.task.core.ExternalFile.file_name)
  return _s;
}
inline const std::string& ExternalFile::_internal_file_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.file_name_.Get();
}
inline void ExternalFile::_internal_set_file_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ExternalFile::_internal_mutable_file_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.file_name_.Mutable( GetArenaForAllocation());
}
inline std::string* ExternalFile::release_file_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.task.core.ExternalFile.file_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.file_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ExternalFile::set_allocated_file_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.file_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.file_name_.IsDefault()) {
          _impl_.file_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.task.core.ExternalFile.file_name)
}

// optional bytes file_content = 2;
inline bool ExternalFile::has_file_content() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ExternalFile::clear_file_content() {
  _impl_.file_content_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ExternalFile::file_content() const {
  // @@protoc_insertion_point(field_get:tflite.task.core.ExternalFile.file_content)
  return _internal_file_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ExternalFile::set_file_content(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.file_content_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.task.core.ExternalFile.file_content)
}
inline std::string* ExternalFile::mutable_file_content() {
  std::string* _s = _internal_mutable_file_content();
  // @@protoc_insertion_point(field_mutable:tflite.task.core.ExternalFile.file_content)
  return _s;
}
inline const std::string& ExternalFile::_internal_file_content() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.file_content_.Get();
}
inline void ExternalFile::_internal_set_file_content(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.file_content_.Set(value, GetArenaForAllocation());
}
inline std::string* ExternalFile::_internal_mutable_file_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.file_content_.Mutable( GetArenaForAllocation());
}
inline std::string* ExternalFile::release_file_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.task.core.ExternalFile.file_content)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.file_content_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.file_content_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ExternalFile::set_allocated_file_content(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.file_content_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.file_content_.IsDefault()) {
          _impl_.file_content_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tflite.task.core.ExternalFile.file_content)
}

// optional .tflite.task.core.FileDescriptorMeta file_descriptor_meta = 4;
inline bool ExternalFile::has_file_descriptor_meta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.file_descriptor_meta_ != nullptr);
  return value;
}
inline void ExternalFile::clear_file_descriptor_meta() {
  if (_impl_.file_descriptor_meta_ != nullptr) _impl_.file_descriptor_meta_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::tflite::task::core::FileDescriptorMeta& ExternalFile::_internal_file_descriptor_meta() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tflite::task::core::FileDescriptorMeta* p = _impl_.file_descriptor_meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::task::core::FileDescriptorMeta&>(::tflite::task::core::_FileDescriptorMeta_default_instance_);
}
inline const ::tflite::task::core::FileDescriptorMeta& ExternalFile::file_descriptor_meta() const {
  // @@protoc_insertion_point(field_get:tflite.task.core.ExternalFile.file_descriptor_meta)
  return _internal_file_descriptor_meta();
}
inline void ExternalFile::unsafe_arena_set_allocated_file_descriptor_meta(::tflite::task::core::FileDescriptorMeta* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.file_descriptor_meta_);
  }
  _impl_.file_descriptor_meta_ = reinterpret_cast<::tflite::task::core::FileDescriptorMeta*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.task.core.ExternalFile.file_descriptor_meta)
}
inline ::tflite::task::core::FileDescriptorMeta* ExternalFile::release_file_descriptor_meta() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tflite::task::core::FileDescriptorMeta* released = _impl_.file_descriptor_meta_;
  _impl_.file_descriptor_meta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tflite::task::core::FileDescriptorMeta* ExternalFile::unsafe_arena_release_file_descriptor_meta() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.task.core.ExternalFile.file_descriptor_meta)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tflite::task::core::FileDescriptorMeta* temp = _impl_.file_descriptor_meta_;
  _impl_.file_descriptor_meta_ = nullptr;
  return temp;
}
inline ::tflite::task::core::FileDescriptorMeta* ExternalFile::_internal_mutable_file_descriptor_meta() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.file_descriptor_meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::task::core::FileDescriptorMeta>(GetArenaForAllocation());
    _impl_.file_descriptor_meta_ = reinterpret_cast<::tflite::task::core::FileDescriptorMeta*>(p);
  }
  return _impl_.file_descriptor_meta_;
}
inline ::tflite::task::core::FileDescriptorMeta* ExternalFile::mutable_file_descriptor_meta() {
  ::tflite::task::core::FileDescriptorMeta* _msg = _internal_mutable_file_descriptor_meta();
  // @@protoc_insertion_point(field_mutable:tflite.task.core.ExternalFile.file_descriptor_meta)
  return _msg;
}
inline void ExternalFile::set_allocated_file_descriptor_meta(::tflite::task::core::FileDescriptorMeta* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::tflite::task::core::FileDescriptorMeta*>(_impl_.file_descriptor_meta_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::tflite::task::core::FileDescriptorMeta*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.file_descriptor_meta_ = reinterpret_cast<::tflite::task::core::FileDescriptorMeta*>(value);
  // @@protoc_insertion_point(field_set_allocated:tflite.task.core.ExternalFile.file_descriptor_meta)
}

// -------------------------------------------------------------------

// FileDescriptorMeta

// optional int32 fd = 1;
inline bool FileDescriptorMeta::has_fd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void FileDescriptorMeta::clear_fd() {
  _impl_.fd_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t FileDescriptorMeta::fd() const {
  // @@protoc_insertion_point(field_get:tflite.task.core.FileDescriptorMeta.fd)
  return _internal_fd();
}
inline void FileDescriptorMeta::set_fd(::int32_t value) {
  _internal_set_fd(value);
  // @@protoc_insertion_point(field_set:tflite.task.core.FileDescriptorMeta.fd)
}
inline ::int32_t FileDescriptorMeta::_internal_fd() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.fd_;
}
inline void FileDescriptorMeta::_internal_set_fd(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.fd_ = value;
}

// optional int64 length = 2;
inline bool FileDescriptorMeta::has_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void FileDescriptorMeta::clear_length() {
  _impl_.length_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t FileDescriptorMeta::length() const {
  // @@protoc_insertion_point(field_get:tflite.task.core.FileDescriptorMeta.length)
  return _internal_length();
}
inline void FileDescriptorMeta::set_length(::int64_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:tflite.task.core.FileDescriptorMeta.length)
}
inline ::int64_t FileDescriptorMeta::_internal_length() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.length_;
}
inline void FileDescriptorMeta::_internal_set_length(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.length_ = value;
}

// optional int64 offset = 3;
inline bool FileDescriptorMeta::has_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void FileDescriptorMeta::clear_offset() {
  _impl_.offset_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t FileDescriptorMeta::offset() const {
  // @@protoc_insertion_point(field_get:tflite.task.core.FileDescriptorMeta.offset)
  return _internal_offset();
}
inline void FileDescriptorMeta::set_offset(::int64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:tflite.task.core.FileDescriptorMeta.offset)
}
inline ::int64_t FileDescriptorMeta::_internal_offset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.offset_;
}
inline void FileDescriptorMeta::_internal_set_offset(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.offset_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace core
}  // namespace task
}  // namespace tflite


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_tensorflow_5flite_5fsupport_2fcc_2ftask_2fcore_2fproto_2fexternal_5ffile_2eproto_2epb_2eh
