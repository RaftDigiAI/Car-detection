// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_lite_support/cc/task/vision/proto/image_segmenter_options.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fsegmenter_5foptions_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fsegmenter_5foptions_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "tensorflow/lite/experimental/acceleration/configuration/configuration.pb.h"
#include "tensorflow_lite_support/cc/task/core/proto/base_options.pb.h"
#include "tensorflow_lite_support/cc/task/core/proto/external_file.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fsegmenter_5foptions_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fsegmenter_5foptions_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fsegmenter_5foptions_2eproto;
namespace tflite {
namespace task {
namespace vision {
class ImageSegmenterOptions;
struct ImageSegmenterOptionsDefaultTypeInternal;
extern ImageSegmenterOptionsDefaultTypeInternal _ImageSegmenterOptions_default_instance_;
}  // namespace vision
}  // namespace task
}  // namespace tflite
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tflite {
namespace task {
namespace vision {
enum ImageSegmenterOptions_OutputType : int {
  ImageSegmenterOptions_OutputType_UNSPECIFIED = 0,
  ImageSegmenterOptions_OutputType_CATEGORY_MASK = 1,
  ImageSegmenterOptions_OutputType_CONFIDENCE_MASK = 2,
};

bool ImageSegmenterOptions_OutputType_IsValid(int value);
constexpr ImageSegmenterOptions_OutputType ImageSegmenterOptions_OutputType_OutputType_MIN = static_cast<ImageSegmenterOptions_OutputType>(0);
constexpr ImageSegmenterOptions_OutputType ImageSegmenterOptions_OutputType_OutputType_MAX = static_cast<ImageSegmenterOptions_OutputType>(2);
constexpr int ImageSegmenterOptions_OutputType_OutputType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
ImageSegmenterOptions_OutputType_descriptor();
template <typename T>
const std::string& ImageSegmenterOptions_OutputType_Name(T value) {
  static_assert(std::is_same<T, ImageSegmenterOptions_OutputType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to OutputType_Name().");
  return ImageSegmenterOptions_OutputType_Name(static_cast<ImageSegmenterOptions_OutputType>(value));
}
template <>
inline const std::string& ImageSegmenterOptions_OutputType_Name(ImageSegmenterOptions_OutputType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ImageSegmenterOptions_OutputType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool ImageSegmenterOptions_OutputType_Parse(absl::string_view name, ImageSegmenterOptions_OutputType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ImageSegmenterOptions_OutputType>(
      ImageSegmenterOptions_OutputType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ImageSegmenterOptions final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.task.vision.ImageSegmenterOptions) */ {
 public:
  inline ImageSegmenterOptions() : ImageSegmenterOptions(nullptr) {}
  ~ImageSegmenterOptions() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ImageSegmenterOptions(::google::protobuf::internal::ConstantInitialized);

  ImageSegmenterOptions(const ImageSegmenterOptions& from);
  ImageSegmenterOptions(ImageSegmenterOptions&& from) noexcept
    : ImageSegmenterOptions() {
    *this = ::std::move(from);
  }

  inline ImageSegmenterOptions& operator=(const ImageSegmenterOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageSegmenterOptions& operator=(ImageSegmenterOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageSegmenterOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageSegmenterOptions* internal_default_instance() {
    return reinterpret_cast<const ImageSegmenterOptions*>(
               &_ImageSegmenterOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ImageSegmenterOptions& a, ImageSegmenterOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageSegmenterOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageSegmenterOptions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageSegmenterOptions* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImageSegmenterOptions>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ImageSegmenterOptions& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ImageSegmenterOptions& from) {
    ImageSegmenterOptions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageSegmenterOptions* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tflite.task.vision.ImageSegmenterOptions";
  }
  protected:
  explicit ImageSegmenterOptions(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using OutputType = ImageSegmenterOptions_OutputType;
  static constexpr OutputType UNSPECIFIED = ImageSegmenterOptions_OutputType_UNSPECIFIED;
  static constexpr OutputType CATEGORY_MASK = ImageSegmenterOptions_OutputType_CATEGORY_MASK;
  static constexpr OutputType CONFIDENCE_MASK = ImageSegmenterOptions_OutputType_CONFIDENCE_MASK;
  static inline bool OutputType_IsValid(int value) {
    return ImageSegmenterOptions_OutputType_IsValid(value);
  }
  static constexpr OutputType OutputType_MIN = ImageSegmenterOptions_OutputType_OutputType_MIN;
  static constexpr OutputType OutputType_MAX = ImageSegmenterOptions_OutputType_OutputType_MAX;
  static constexpr int OutputType_ARRAYSIZE = ImageSegmenterOptions_OutputType_OutputType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* OutputType_descriptor() {
    return ImageSegmenterOptions_OutputType_descriptor();
  }
  template <typename T>
  static inline const std::string& OutputType_Name(T value) {
    return ImageSegmenterOptions_OutputType_Name(value);
  }
  static inline bool OutputType_Parse(absl::string_view name, OutputType* value) {
    return ImageSegmenterOptions_OutputType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDisplayNamesLocaleFieldNumber = 6,
    kComputeSettingsFieldNumber = 4,
    kModelFileWithMetadataFieldNumber = 5,
    kBaseOptionsFieldNumber = 8,
    kOutputTypeFieldNumber = 3,
    kNumThreadsFieldNumber = 7,
  };
  // optional string display_names_locale = 6 [default = "en"];
  bool has_display_names_locale() const;
  void clear_display_names_locale() ;
  const std::string& display_names_locale() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_display_names_locale(Arg_&& arg, Args_... args);
  std::string* mutable_display_names_locale();
  PROTOBUF_NODISCARD std::string* release_display_names_locale();
  void set_allocated_display_names_locale(std::string* ptr);

  private:
  const std::string& _internal_display_names_locale() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_names_locale(
      const std::string& value);
  std::string* _internal_mutable_display_names_locale();

  public:
  // optional .tflite.proto.ComputeSettings compute_settings = 4;
  bool has_compute_settings() const;
  void clear_compute_settings() ;
  const ::tflite::proto::ComputeSettings& compute_settings() const;
  PROTOBUF_NODISCARD ::tflite::proto::ComputeSettings* release_compute_settings();
  ::tflite::proto::ComputeSettings* mutable_compute_settings();
  void set_allocated_compute_settings(::tflite::proto::ComputeSettings* value);
  void unsafe_arena_set_allocated_compute_settings(::tflite::proto::ComputeSettings* value);
  ::tflite::proto::ComputeSettings* unsafe_arena_release_compute_settings();

  private:
  const ::tflite::proto::ComputeSettings& _internal_compute_settings() const;
  ::tflite::proto::ComputeSettings* _internal_mutable_compute_settings();

  public:
  // optional .tflite.task.core.ExternalFile model_file_with_metadata = 5;
  bool has_model_file_with_metadata() const;
  void clear_model_file_with_metadata() ;
  const ::tflite::task::core::ExternalFile& model_file_with_metadata() const;
  PROTOBUF_NODISCARD ::tflite::task::core::ExternalFile* release_model_file_with_metadata();
  ::tflite::task::core::ExternalFile* mutable_model_file_with_metadata();
  void set_allocated_model_file_with_metadata(::tflite::task::core::ExternalFile* value);
  void unsafe_arena_set_allocated_model_file_with_metadata(::tflite::task::core::ExternalFile* value);
  ::tflite::task::core::ExternalFile* unsafe_arena_release_model_file_with_metadata();

  private:
  const ::tflite::task::core::ExternalFile& _internal_model_file_with_metadata() const;
  ::tflite::task::core::ExternalFile* _internal_mutable_model_file_with_metadata();

  public:
  // optional .tflite.task.core.BaseOptions base_options = 8;
  bool has_base_options() const;
  void clear_base_options() ;
  const ::tflite::task::core::BaseOptions& base_options() const;
  PROTOBUF_NODISCARD ::tflite::task::core::BaseOptions* release_base_options();
  ::tflite::task::core::BaseOptions* mutable_base_options();
  void set_allocated_base_options(::tflite::task::core::BaseOptions* value);
  void unsafe_arena_set_allocated_base_options(::tflite::task::core::BaseOptions* value);
  ::tflite::task::core::BaseOptions* unsafe_arena_release_base_options();

  private:
  const ::tflite::task::core::BaseOptions& _internal_base_options() const;
  ::tflite::task::core::BaseOptions* _internal_mutable_base_options();

  public:
  // optional .tflite.task.vision.ImageSegmenterOptions.OutputType output_type = 3 [default = CATEGORY_MASK];
  bool has_output_type() const;
  void clear_output_type() ;
  ::tflite::task::vision::ImageSegmenterOptions_OutputType output_type() const;
  void set_output_type(::tflite::task::vision::ImageSegmenterOptions_OutputType value);

  private:
  ::tflite::task::vision::ImageSegmenterOptions_OutputType _internal_output_type() const;
  void _internal_set_output_type(::tflite::task::vision::ImageSegmenterOptions_OutputType value);

  public:
  // optional int32 num_threads = 7 [default = -1];
  bool has_num_threads() const;
  void clear_num_threads() ;
  ::int32_t num_threads() const;
  void set_num_threads(::int32_t value);

  private:
  ::int32_t _internal_num_threads() const;
  void _internal_set_num_threads(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tflite.task.vision.ImageSegmenterOptions)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6, 4, 69, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    static const ::google::protobuf::internal::LazyString _i_give_permission_to_break_this_code_default_display_names_locale_;
    ::google::protobuf::internal::ArenaStringPtr display_names_locale_;
    ::tflite::proto::ComputeSettings* compute_settings_;
    ::tflite::task::core::ExternalFile* model_file_with_metadata_;
    ::tflite::task::core::BaseOptions* base_options_;
    int output_type_;
    ::int32_t num_threads_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fsegmenter_5foptions_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ImageSegmenterOptions

// optional .tflite.task.core.BaseOptions base_options = 8;
inline bool ImageSegmenterOptions::has_base_options() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_options_ != nullptr);
  return value;
}
inline const ::tflite::task::core::BaseOptions& ImageSegmenterOptions::_internal_base_options() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tflite::task::core::BaseOptions* p = _impl_.base_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::task::core::BaseOptions&>(::tflite::task::core::_BaseOptions_default_instance_);
}
inline const ::tflite::task::core::BaseOptions& ImageSegmenterOptions::base_options() const {
  // @@protoc_insertion_point(field_get:tflite.task.vision.ImageSegmenterOptions.base_options)
  return _internal_base_options();
}
inline void ImageSegmenterOptions::unsafe_arena_set_allocated_base_options(::tflite::task::core::BaseOptions* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_options_);
  }
  _impl_.base_options_ = reinterpret_cast<::tflite::task::core::BaseOptions*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.task.vision.ImageSegmenterOptions.base_options)
}
inline ::tflite::task::core::BaseOptions* ImageSegmenterOptions::release_base_options() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tflite::task::core::BaseOptions* released = _impl_.base_options_;
  _impl_.base_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tflite::task::core::BaseOptions* ImageSegmenterOptions::unsafe_arena_release_base_options() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.task.vision.ImageSegmenterOptions.base_options)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tflite::task::core::BaseOptions* temp = _impl_.base_options_;
  _impl_.base_options_ = nullptr;
  return temp;
}
inline ::tflite::task::core::BaseOptions* ImageSegmenterOptions::_internal_mutable_base_options() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.base_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::task::core::BaseOptions>(GetArenaForAllocation());
    _impl_.base_options_ = reinterpret_cast<::tflite::task::core::BaseOptions*>(p);
  }
  return _impl_.base_options_;
}
inline ::tflite::task::core::BaseOptions* ImageSegmenterOptions::mutable_base_options() {
  ::tflite::task::core::BaseOptions* _msg = _internal_mutable_base_options();
  // @@protoc_insertion_point(field_mutable:tflite.task.vision.ImageSegmenterOptions.base_options)
  return _msg;
}
inline void ImageSegmenterOptions::set_allocated_base_options(::tflite::task::core::BaseOptions* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_options_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.base_options_ = reinterpret_cast<::tflite::task::core::BaseOptions*>(value);
  // @@protoc_insertion_point(field_set_allocated:tflite.task.vision.ImageSegmenterOptions.base_options)
}

// optional .tflite.task.core.ExternalFile model_file_with_metadata = 5;
inline bool ImageSegmenterOptions::has_model_file_with_metadata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.model_file_with_metadata_ != nullptr);
  return value;
}
inline const ::tflite::task::core::ExternalFile& ImageSegmenterOptions::_internal_model_file_with_metadata() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tflite::task::core::ExternalFile* p = _impl_.model_file_with_metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::task::core::ExternalFile&>(::tflite::task::core::_ExternalFile_default_instance_);
}
inline const ::tflite::task::core::ExternalFile& ImageSegmenterOptions::model_file_with_metadata() const {
  // @@protoc_insertion_point(field_get:tflite.task.vision.ImageSegmenterOptions.model_file_with_metadata)
  return _internal_model_file_with_metadata();
}
inline void ImageSegmenterOptions::unsafe_arena_set_allocated_model_file_with_metadata(::tflite::task::core::ExternalFile* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.model_file_with_metadata_);
  }
  _impl_.model_file_with_metadata_ = reinterpret_cast<::tflite::task::core::ExternalFile*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.task.vision.ImageSegmenterOptions.model_file_with_metadata)
}
inline ::tflite::task::core::ExternalFile* ImageSegmenterOptions::release_model_file_with_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tflite::task::core::ExternalFile* released = _impl_.model_file_with_metadata_;
  _impl_.model_file_with_metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tflite::task::core::ExternalFile* ImageSegmenterOptions::unsafe_arena_release_model_file_with_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.task.vision.ImageSegmenterOptions.model_file_with_metadata)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tflite::task::core::ExternalFile* temp = _impl_.model_file_with_metadata_;
  _impl_.model_file_with_metadata_ = nullptr;
  return temp;
}
inline ::tflite::task::core::ExternalFile* ImageSegmenterOptions::_internal_mutable_model_file_with_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.model_file_with_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::task::core::ExternalFile>(GetArenaForAllocation());
    _impl_.model_file_with_metadata_ = reinterpret_cast<::tflite::task::core::ExternalFile*>(p);
  }
  return _impl_.model_file_with_metadata_;
}
inline ::tflite::task::core::ExternalFile* ImageSegmenterOptions::mutable_model_file_with_metadata() {
  ::tflite::task::core::ExternalFile* _msg = _internal_mutable_model_file_with_metadata();
  // @@protoc_insertion_point(field_mutable:tflite.task.vision.ImageSegmenterOptions.model_file_with_metadata)
  return _msg;
}
inline void ImageSegmenterOptions::set_allocated_model_file_with_metadata(::tflite::task::core::ExternalFile* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.model_file_with_metadata_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.model_file_with_metadata_ = reinterpret_cast<::tflite::task::core::ExternalFile*>(value);
  // @@protoc_insertion_point(field_set_allocated:tflite.task.vision.ImageSegmenterOptions.model_file_with_metadata)
}

// optional string display_names_locale = 6 [default = "en"];
inline bool ImageSegmenterOptions::has_display_names_locale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ImageSegmenterOptions::clear_display_names_locale() {
  _impl_.display_names_locale_.ClearToDefault(::tflite::task::vision::ImageSegmenterOptions::Impl_::_i_give_permission_to_break_this_code_default_display_names_locale_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ImageSegmenterOptions::display_names_locale() const {
  // @@protoc_insertion_point(field_get:tflite.task.vision.ImageSegmenterOptions.display_names_locale)
  if (_impl_.display_names_locale_.IsDefault()) {
    return Impl_::_i_give_permission_to_break_this_code_default_display_names_locale_.get();
  }
  return _internal_display_names_locale();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ImageSegmenterOptions::set_display_names_locale(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.display_names_locale_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.task.vision.ImageSegmenterOptions.display_names_locale)
}
inline std::string* ImageSegmenterOptions::mutable_display_names_locale() {
  std::string* _s = _internal_mutable_display_names_locale();
  // @@protoc_insertion_point(field_mutable:tflite.task.vision.ImageSegmenterOptions.display_names_locale)
  return _s;
}
inline const std::string& ImageSegmenterOptions::_internal_display_names_locale() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.display_names_locale_.Get();
}
inline void ImageSegmenterOptions::_internal_set_display_names_locale(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.display_names_locale_.Set(value, GetArenaForAllocation());
}
inline std::string* ImageSegmenterOptions::_internal_mutable_display_names_locale() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.display_names_locale_.Mutable(::tflite::task::vision::ImageSegmenterOptions::Impl_::_i_give_permission_to_break_this_code_default_display_names_locale_, GetArenaForAllocation());
}
inline std::string* ImageSegmenterOptions::release_display_names_locale() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.task.vision.ImageSegmenterOptions.display_names_locale)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  return _impl_.display_names_locale_.Release();
}
inline void ImageSegmenterOptions::set_allocated_display_names_locale(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.display_names_locale_.SetAllocated(value, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:tflite.task.vision.ImageSegmenterOptions.display_names_locale)
}

// optional .tflite.task.vision.ImageSegmenterOptions.OutputType output_type = 3 [default = CATEGORY_MASK];
inline bool ImageSegmenterOptions::has_output_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ImageSegmenterOptions::clear_output_type() {
  _impl_.output_type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::tflite::task::vision::ImageSegmenterOptions_OutputType ImageSegmenterOptions::output_type() const {
  // @@protoc_insertion_point(field_get:tflite.task.vision.ImageSegmenterOptions.output_type)
  return _internal_output_type();
}
inline void ImageSegmenterOptions::set_output_type(::tflite::task::vision::ImageSegmenterOptions_OutputType value) {
  _internal_set_output_type(value);
  // @@protoc_insertion_point(field_set:tflite.task.vision.ImageSegmenterOptions.output_type)
}
inline ::tflite::task::vision::ImageSegmenterOptions_OutputType ImageSegmenterOptions::_internal_output_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tflite::task::vision::ImageSegmenterOptions_OutputType>(_impl_.output_type_);
}
inline void ImageSegmenterOptions::_internal_set_output_type(::tflite::task::vision::ImageSegmenterOptions_OutputType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::tflite::task::vision::ImageSegmenterOptions_OutputType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.output_type_ = value;
}

// optional int32 num_threads = 7 [default = -1];
inline bool ImageSegmenterOptions::has_num_threads() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ImageSegmenterOptions::clear_num_threads() {
  _impl_.num_threads_ = -1;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t ImageSegmenterOptions::num_threads() const {
  // @@protoc_insertion_point(field_get:tflite.task.vision.ImageSegmenterOptions.num_threads)
  return _internal_num_threads();
}
inline void ImageSegmenterOptions::set_num_threads(::int32_t value) {
  _internal_set_num_threads(value);
  // @@protoc_insertion_point(field_set:tflite.task.vision.ImageSegmenterOptions.num_threads)
}
inline ::int32_t ImageSegmenterOptions::_internal_num_threads() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_threads_;
}
inline void ImageSegmenterOptions::_internal_set_num_threads(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.num_threads_ = value;
}

// optional .tflite.proto.ComputeSettings compute_settings = 4;
inline bool ImageSegmenterOptions::has_compute_settings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.compute_settings_ != nullptr);
  return value;
}
inline const ::tflite::proto::ComputeSettings& ImageSegmenterOptions::_internal_compute_settings() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tflite::proto::ComputeSettings* p = _impl_.compute_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::proto::ComputeSettings&>(::tflite::proto::_ComputeSettings_default_instance_);
}
inline const ::tflite::proto::ComputeSettings& ImageSegmenterOptions::compute_settings() const {
  // @@protoc_insertion_point(field_get:tflite.task.vision.ImageSegmenterOptions.compute_settings)
  return _internal_compute_settings();
}
inline void ImageSegmenterOptions::unsafe_arena_set_allocated_compute_settings(::tflite::proto::ComputeSettings* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.compute_settings_);
  }
  _impl_.compute_settings_ = reinterpret_cast<::tflite::proto::ComputeSettings*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.task.vision.ImageSegmenterOptions.compute_settings)
}
inline ::tflite::proto::ComputeSettings* ImageSegmenterOptions::release_compute_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tflite::proto::ComputeSettings* released = _impl_.compute_settings_;
  _impl_.compute_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tflite::proto::ComputeSettings* ImageSegmenterOptions::unsafe_arena_release_compute_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.task.vision.ImageSegmenterOptions.compute_settings)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tflite::proto::ComputeSettings* temp = _impl_.compute_settings_;
  _impl_.compute_settings_ = nullptr;
  return temp;
}
inline ::tflite::proto::ComputeSettings* ImageSegmenterOptions::_internal_mutable_compute_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.compute_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::proto::ComputeSettings>(GetArenaForAllocation());
    _impl_.compute_settings_ = reinterpret_cast<::tflite::proto::ComputeSettings*>(p);
  }
  return _impl_.compute_settings_;
}
inline ::tflite::proto::ComputeSettings* ImageSegmenterOptions::mutable_compute_settings() {
  ::tflite::proto::ComputeSettings* _msg = _internal_mutable_compute_settings();
  // @@protoc_insertion_point(field_mutable:tflite.task.vision.ImageSegmenterOptions.compute_settings)
  return _msg;
}
inline void ImageSegmenterOptions::set_allocated_compute_settings(::tflite::proto::ComputeSettings* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.compute_settings_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.compute_settings_ = reinterpret_cast<::tflite::proto::ComputeSettings*>(value);
  // @@protoc_insertion_point(field_set_allocated:tflite.task.vision.ImageSegmenterOptions.compute_settings)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace vision
}  // namespace task
}  // namespace tflite


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::tflite::task::vision::ImageSegmenterOptions_OutputType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tflite::task::vision::ImageSegmenterOptions_OutputType>() {
  return ::tflite::task::vision::ImageSegmenterOptions_OutputType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fsegmenter_5foptions_2eproto_2epb_2eh
