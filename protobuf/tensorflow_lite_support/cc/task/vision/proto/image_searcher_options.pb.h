// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_lite_support/cc/task/vision/proto/image_searcher_options.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fsearcher_5foptions_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fsearcher_5foptions_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "tensorflow_lite_support/cc/task/core/proto/base_options.pb.h"
#include "tensorflow_lite_support/cc/task/processor/proto/embedding_options.pb.h"
#include "tensorflow_lite_support/cc/task/processor/proto/search_options.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fsearcher_5foptions_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fsearcher_5foptions_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fsearcher_5foptions_2eproto;
namespace tflite {
namespace task {
namespace vision {
class ImageSearcherOptions;
struct ImageSearcherOptionsDefaultTypeInternal;
extern ImageSearcherOptionsDefaultTypeInternal _ImageSearcherOptions_default_instance_;
}  // namespace vision
}  // namespace task
}  // namespace tflite
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tflite {
namespace task {
namespace vision {

// ===================================================================


// -------------------------------------------------------------------

class ImageSearcherOptions final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.task.vision.ImageSearcherOptions) */ {
 public:
  inline ImageSearcherOptions() : ImageSearcherOptions(nullptr) {}
  ~ImageSearcherOptions() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ImageSearcherOptions(::google::protobuf::internal::ConstantInitialized);

  ImageSearcherOptions(const ImageSearcherOptions& from);
  ImageSearcherOptions(ImageSearcherOptions&& from) noexcept
    : ImageSearcherOptions() {
    *this = ::std::move(from);
  }

  inline ImageSearcherOptions& operator=(const ImageSearcherOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageSearcherOptions& operator=(ImageSearcherOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageSearcherOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageSearcherOptions* internal_default_instance() {
    return reinterpret_cast<const ImageSearcherOptions*>(
               &_ImageSearcherOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ImageSearcherOptions& a, ImageSearcherOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageSearcherOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageSearcherOptions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageSearcherOptions* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImageSearcherOptions>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ImageSearcherOptions& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ImageSearcherOptions& from) {
    ImageSearcherOptions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageSearcherOptions* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tflite.task.vision.ImageSearcherOptions";
  }
  protected:
  explicit ImageSearcherOptions(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseOptionsFieldNumber = 1,
    kEmbeddingOptionsFieldNumber = 2,
    kSearchOptionsFieldNumber = 3,
  };
  // optional .tflite.task.core.BaseOptions base_options = 1;
  bool has_base_options() const;
  void clear_base_options() ;
  const ::tflite::task::core::BaseOptions& base_options() const;
  PROTOBUF_NODISCARD ::tflite::task::core::BaseOptions* release_base_options();
  ::tflite::task::core::BaseOptions* mutable_base_options();
  void set_allocated_base_options(::tflite::task::core::BaseOptions* value);
  void unsafe_arena_set_allocated_base_options(::tflite::task::core::BaseOptions* value);
  ::tflite::task::core::BaseOptions* unsafe_arena_release_base_options();

  private:
  const ::tflite::task::core::BaseOptions& _internal_base_options() const;
  ::tflite::task::core::BaseOptions* _internal_mutable_base_options();

  public:
  // optional .tflite.task.processor.EmbeddingOptions embedding_options = 2;
  bool has_embedding_options() const;
  void clear_embedding_options() ;
  const ::tflite::task::processor::EmbeddingOptions& embedding_options() const;
  PROTOBUF_NODISCARD ::tflite::task::processor::EmbeddingOptions* release_embedding_options();
  ::tflite::task::processor::EmbeddingOptions* mutable_embedding_options();
  void set_allocated_embedding_options(::tflite::task::processor::EmbeddingOptions* value);
  void unsafe_arena_set_allocated_embedding_options(::tflite::task::processor::EmbeddingOptions* value);
  ::tflite::task::processor::EmbeddingOptions* unsafe_arena_release_embedding_options();

  private:
  const ::tflite::task::processor::EmbeddingOptions& _internal_embedding_options() const;
  ::tflite::task::processor::EmbeddingOptions* _internal_mutable_embedding_options();

  public:
  // optional .tflite.task.processor.SearchOptions search_options = 3;
  bool has_search_options() const;
  void clear_search_options() ;
  const ::tflite::task::processor::SearchOptions& search_options() const;
  PROTOBUF_NODISCARD ::tflite::task::processor::SearchOptions* release_search_options();
  ::tflite::task::processor::SearchOptions* mutable_search_options();
  void set_allocated_search_options(::tflite::task::processor::SearchOptions* value);
  void unsafe_arena_set_allocated_search_options(::tflite::task::processor::SearchOptions* value);
  ::tflite::task::processor::SearchOptions* unsafe_arena_release_search_options();

  private:
  const ::tflite::task::processor::SearchOptions& _internal_search_options() const;
  ::tflite::task::processor::SearchOptions* _internal_mutable_search_options();

  public:
  // @@protoc_insertion_point(class_scope:tflite.task.vision.ImageSearcherOptions)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 3, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::tflite::task::core::BaseOptions* base_options_;
    ::tflite::task::processor::EmbeddingOptions* embedding_options_;
    ::tflite::task::processor::SearchOptions* search_options_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fsearcher_5foptions_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ImageSearcherOptions

// optional .tflite.task.core.BaseOptions base_options = 1;
inline bool ImageSearcherOptions::has_base_options() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_options_ != nullptr);
  return value;
}
inline const ::tflite::task::core::BaseOptions& ImageSearcherOptions::_internal_base_options() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tflite::task::core::BaseOptions* p = _impl_.base_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::task::core::BaseOptions&>(::tflite::task::core::_BaseOptions_default_instance_);
}
inline const ::tflite::task::core::BaseOptions& ImageSearcherOptions::base_options() const {
  // @@protoc_insertion_point(field_get:tflite.task.vision.ImageSearcherOptions.base_options)
  return _internal_base_options();
}
inline void ImageSearcherOptions::unsafe_arena_set_allocated_base_options(::tflite::task::core::BaseOptions* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_options_);
  }
  _impl_.base_options_ = reinterpret_cast<::tflite::task::core::BaseOptions*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.task.vision.ImageSearcherOptions.base_options)
}
inline ::tflite::task::core::BaseOptions* ImageSearcherOptions::release_base_options() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tflite::task::core::BaseOptions* released = _impl_.base_options_;
  _impl_.base_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tflite::task::core::BaseOptions* ImageSearcherOptions::unsafe_arena_release_base_options() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.task.vision.ImageSearcherOptions.base_options)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tflite::task::core::BaseOptions* temp = _impl_.base_options_;
  _impl_.base_options_ = nullptr;
  return temp;
}
inline ::tflite::task::core::BaseOptions* ImageSearcherOptions::_internal_mutable_base_options() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.base_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::task::core::BaseOptions>(GetArenaForAllocation());
    _impl_.base_options_ = reinterpret_cast<::tflite::task::core::BaseOptions*>(p);
  }
  return _impl_.base_options_;
}
inline ::tflite::task::core::BaseOptions* ImageSearcherOptions::mutable_base_options() {
  ::tflite::task::core::BaseOptions* _msg = _internal_mutable_base_options();
  // @@protoc_insertion_point(field_mutable:tflite.task.vision.ImageSearcherOptions.base_options)
  return _msg;
}
inline void ImageSearcherOptions::set_allocated_base_options(::tflite::task::core::BaseOptions* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_options_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.base_options_ = reinterpret_cast<::tflite::task::core::BaseOptions*>(value);
  // @@protoc_insertion_point(field_set_allocated:tflite.task.vision.ImageSearcherOptions.base_options)
}

// optional .tflite.task.processor.EmbeddingOptions embedding_options = 2;
inline bool ImageSearcherOptions::has_embedding_options() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.embedding_options_ != nullptr);
  return value;
}
inline const ::tflite::task::processor::EmbeddingOptions& ImageSearcherOptions::_internal_embedding_options() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tflite::task::processor::EmbeddingOptions* p = _impl_.embedding_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::task::processor::EmbeddingOptions&>(::tflite::task::processor::_EmbeddingOptions_default_instance_);
}
inline const ::tflite::task::processor::EmbeddingOptions& ImageSearcherOptions::embedding_options() const {
  // @@protoc_insertion_point(field_get:tflite.task.vision.ImageSearcherOptions.embedding_options)
  return _internal_embedding_options();
}
inline void ImageSearcherOptions::unsafe_arena_set_allocated_embedding_options(::tflite::task::processor::EmbeddingOptions* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.embedding_options_);
  }
  _impl_.embedding_options_ = reinterpret_cast<::tflite::task::processor::EmbeddingOptions*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.task.vision.ImageSearcherOptions.embedding_options)
}
inline ::tflite::task::processor::EmbeddingOptions* ImageSearcherOptions::release_embedding_options() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tflite::task::processor::EmbeddingOptions* released = _impl_.embedding_options_;
  _impl_.embedding_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tflite::task::processor::EmbeddingOptions* ImageSearcherOptions::unsafe_arena_release_embedding_options() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.task.vision.ImageSearcherOptions.embedding_options)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tflite::task::processor::EmbeddingOptions* temp = _impl_.embedding_options_;
  _impl_.embedding_options_ = nullptr;
  return temp;
}
inline ::tflite::task::processor::EmbeddingOptions* ImageSearcherOptions::_internal_mutable_embedding_options() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.embedding_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::task::processor::EmbeddingOptions>(GetArenaForAllocation());
    _impl_.embedding_options_ = reinterpret_cast<::tflite::task::processor::EmbeddingOptions*>(p);
  }
  return _impl_.embedding_options_;
}
inline ::tflite::task::processor::EmbeddingOptions* ImageSearcherOptions::mutable_embedding_options() {
  ::tflite::task::processor::EmbeddingOptions* _msg = _internal_mutable_embedding_options();
  // @@protoc_insertion_point(field_mutable:tflite.task.vision.ImageSearcherOptions.embedding_options)
  return _msg;
}
inline void ImageSearcherOptions::set_allocated_embedding_options(::tflite::task::processor::EmbeddingOptions* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.embedding_options_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.embedding_options_ = reinterpret_cast<::tflite::task::processor::EmbeddingOptions*>(value);
  // @@protoc_insertion_point(field_set_allocated:tflite.task.vision.ImageSearcherOptions.embedding_options)
}

// optional .tflite.task.processor.SearchOptions search_options = 3;
inline bool ImageSearcherOptions::has_search_options() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.search_options_ != nullptr);
  return value;
}
inline const ::tflite::task::processor::SearchOptions& ImageSearcherOptions::_internal_search_options() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tflite::task::processor::SearchOptions* p = _impl_.search_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::task::processor::SearchOptions&>(::tflite::task::processor::_SearchOptions_default_instance_);
}
inline const ::tflite::task::processor::SearchOptions& ImageSearcherOptions::search_options() const {
  // @@protoc_insertion_point(field_get:tflite.task.vision.ImageSearcherOptions.search_options)
  return _internal_search_options();
}
inline void ImageSearcherOptions::unsafe_arena_set_allocated_search_options(::tflite::task::processor::SearchOptions* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.search_options_);
  }
  _impl_.search_options_ = reinterpret_cast<::tflite::task::processor::SearchOptions*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.task.vision.ImageSearcherOptions.search_options)
}
inline ::tflite::task::processor::SearchOptions* ImageSearcherOptions::release_search_options() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tflite::task::processor::SearchOptions* released = _impl_.search_options_;
  _impl_.search_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tflite::task::processor::SearchOptions* ImageSearcherOptions::unsafe_arena_release_search_options() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.task.vision.ImageSearcherOptions.search_options)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tflite::task::processor::SearchOptions* temp = _impl_.search_options_;
  _impl_.search_options_ = nullptr;
  return temp;
}
inline ::tflite::task::processor::SearchOptions* ImageSearcherOptions::_internal_mutable_search_options() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.search_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::task::processor::SearchOptions>(GetArenaForAllocation());
    _impl_.search_options_ = reinterpret_cast<::tflite::task::processor::SearchOptions*>(p);
  }
  return _impl_.search_options_;
}
inline ::tflite::task::processor::SearchOptions* ImageSearcherOptions::mutable_search_options() {
  ::tflite::task::processor::SearchOptions* _msg = _internal_mutable_search_options();
  // @@protoc_insertion_point(field_mutable:tflite.task.vision.ImageSearcherOptions.search_options)
  return _msg;
}
inline void ImageSearcherOptions::set_allocated_search_options(::tflite::task::processor::SearchOptions* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.search_options_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.search_options_ = reinterpret_cast<::tflite::task::processor::SearchOptions*>(value);
  // @@protoc_insertion_point(field_set_allocated:tflite.task.vision.ImageSearcherOptions.search_options)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace vision
}  // namespace task
}  // namespace tflite


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fsearcher_5foptions_2eproto_2epb_2eh
