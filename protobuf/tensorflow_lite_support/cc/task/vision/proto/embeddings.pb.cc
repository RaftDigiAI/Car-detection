// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_lite_support/cc/task/vision/proto/embeddings.proto

#include "tensorflow_lite_support/cc/task/vision/proto/embeddings.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace tflite {
namespace task {
namespace vision {
        template <typename>
PROTOBUF_CONSTEXPR FeatureVector::FeatureVector(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.value_float_)*/ {},
      /*decltype(_impl_.value_string_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
    } {}
struct FeatureVectorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeatureVectorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeatureVectorDefaultTypeInternal() {}
  union {
    FeatureVector _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeatureVectorDefaultTypeInternal _FeatureVector_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Embedding::Embedding(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.feature_vector_)*/ nullptr,
      /*decltype(_impl_.output_index_)*/ 0,
    } {}
struct EmbeddingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmbeddingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmbeddingDefaultTypeInternal() {}
  union {
    Embedding _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmbeddingDefaultTypeInternal _Embedding_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR EmbeddingResult::EmbeddingResult(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.embeddings_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct EmbeddingResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmbeddingResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmbeddingResultDefaultTypeInternal() {}
  union {
    EmbeddingResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmbeddingResultDefaultTypeInternal _EmbeddingResult_default_instance_;
}  // namespace vision
}  // namespace task
}  // namespace tflite
static ::_pb::Metadata file_level_metadata_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fembeddings_2eproto[3];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fembeddings_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fembeddings_2eproto = nullptr;
const ::uint32_t TableStruct_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fembeddings_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::tflite::task::vision::FeatureVector, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tflite::task::vision::FeatureVector, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tflite::task::vision::FeatureVector, _impl_.value_float_),
    PROTOBUF_FIELD_OFFSET(::tflite::task::vision::FeatureVector, _impl_.value_string_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::tflite::task::vision::Embedding, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tflite::task::vision::Embedding, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tflite::task::vision::Embedding, _impl_.feature_vector_),
    PROTOBUF_FIELD_OFFSET(::tflite::task::vision::Embedding, _impl_.output_index_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tflite::task::vision::EmbeddingResult, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tflite::task::vision::EmbeddingResult, _impl_.embeddings_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::tflite::task::vision::FeatureVector)},
        {12, 22, -1, sizeof(::tflite::task::vision::Embedding)},
        {24, -1, -1, sizeof(::tflite::task::vision::EmbeddingResult)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::tflite::task::vision::_FeatureVector_default_instance_._instance,
    &::tflite::task::vision::_Embedding_default_instance_._instance,
    &::tflite::task::vision::_EmbeddingResult_default_instance_._instance,
};
const char descriptor_table_protodef_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fembeddings_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n=tensorflow_lite_support/cc/task/vision"
    "/proto/embeddings.proto\022\022tflite.task.vis"
    "ion\">\n\rFeatureVector\022\027\n\013value_float\030\001 \003("
    "\002B\002\020\001\022\024\n\014value_string\030\002 \001(\014\"\\\n\tEmbedding"
    "\0229\n\016feature_vector\030\001 \001(\0132!.tflite.task.v"
    "ision.FeatureVector\022\024\n\014output_index\030\002 \001("
    "\005\"J\n\017EmbeddingResult\0221\n\nembeddings\030\001 \003(\013"
    "2\035.tflite.task.vision.EmbeddingJ\004\010\002\020\003"
};
static ::absl::once_flag descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fembeddings_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fembeddings_2eproto = {
    false,
    false,
    317,
    descriptor_table_protodef_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fembeddings_2eproto,
    "tensorflow_lite_support/cc/task/vision/proto/embeddings.proto",
    &descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fembeddings_2eproto_once,
    nullptr,
    0,
    3,
    schemas,
    file_default_instances,
    TableStruct_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fembeddings_2eproto::offsets,
    file_level_metadata_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fembeddings_2eproto,
    file_level_enum_descriptors_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fembeddings_2eproto,
    file_level_service_descriptors_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fembeddings_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fembeddings_2eproto_getter() {
  return &descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fembeddings_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fembeddings_2eproto(&descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fembeddings_2eproto);
namespace tflite {
namespace task {
namespace vision {
// ===================================================================

class FeatureVector::_Internal {
 public:
  using HasBits = decltype(std::declval<FeatureVector>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FeatureVector, _impl_._has_bits_);
  static void set_has_value_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FeatureVector::FeatureVector(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.task.vision.FeatureVector)
}
FeatureVector::FeatureVector(const FeatureVector& from) : ::google::protobuf::Message() {
  FeatureVector* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.value_float_){from._impl_.value_float_},
      decltype(_impl_.value_string_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.value_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_string_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.value_string_.Set(from._internal_value_string(), _this->GetArenaForAllocation());
  }

  // @@protoc_insertion_point(copy_constructor:tflite.task.vision.FeatureVector)
}
inline void FeatureVector::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.value_float_){arena},
      decltype(_impl_.value_string_){},
  };
  _impl_.value_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_string_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
FeatureVector::~FeatureVector() {
  // @@protoc_insertion_point(destructor:tflite.task.vision.FeatureVector)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FeatureVector::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_float_.~RepeatedField();
  _impl_.value_string_.Destroy();
}
void FeatureVector::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void FeatureVector::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.task.vision.FeatureVector)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_value_float()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.value_string_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FeatureVector::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> FeatureVector::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FeatureVector, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_FeatureVector_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional bytes value_string = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(FeatureVector, _impl_.value_string_)}},
    // repeated float value_float = 1 [packed = true];
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(FeatureVector, _impl_.value_float_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float value_float = 1 [packed = true];
    {PROTOBUF_FIELD_OFFSET(FeatureVector, _impl_.value_float_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // optional bytes value_string = 2;
    {PROTOBUF_FIELD_OFFSET(FeatureVector, _impl_.value_string_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* FeatureVector::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.task.vision.FeatureVector)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float value_float = 1 [packed = true];
  if (this->_internal_value_float_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_value_float(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes value_string = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_value_string();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.task.vision.FeatureVector)
  return target;
}

::size_t FeatureVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.task.vision.FeatureVector)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float value_float = 1 [packed = true];
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_value_float_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // optional bytes value_string = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_value_string());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FeatureVector::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    FeatureVector::MergeImpl
};
const ::google::protobuf::Message::ClassData*FeatureVector::GetClassData() const { return &_class_data_; }


void FeatureVector::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FeatureVector*>(&to_msg);
  auto& from = static_cast<const FeatureVector&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.task.vision.FeatureVector)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_value_float()->MergeFrom(from._internal_value_float());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_value_string(from._internal_value_string());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FeatureVector::CopyFrom(const FeatureVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.task.vision.FeatureVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FeatureVector::IsInitialized() const {
  return true;
}

void FeatureVector::InternalSwap(FeatureVector* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.value_float_.InternalSwap(&other->_impl_.value_float_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.value_string_, lhs_arena,
                                       &other->_impl_.value_string_, rhs_arena);
}

::google::protobuf::Metadata FeatureVector::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fembeddings_2eproto_getter, &descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fembeddings_2eproto_once,
      file_level_metadata_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fembeddings_2eproto[0]);
}
// ===================================================================

class Embedding::_Internal {
 public:
  using HasBits = decltype(std::declval<Embedding>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Embedding, _impl_._has_bits_);
  static const ::tflite::task::vision::FeatureVector& feature_vector(const Embedding* msg);
  static void set_has_feature_vector(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_output_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::tflite::task::vision::FeatureVector& Embedding::_Internal::feature_vector(const Embedding* msg) {
  return *msg->_impl_.feature_vector_;
}
Embedding::Embedding(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.task.vision.Embedding)
}
Embedding::Embedding(const Embedding& from) : ::google::protobuf::Message() {
  Embedding* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.feature_vector_){nullptr},
      decltype(_impl_.output_index_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.feature_vector_ = new ::tflite::task::vision::FeatureVector(*from._impl_.feature_vector_);
  }
  _this->_impl_.output_index_ = from._impl_.output_index_;

  // @@protoc_insertion_point(copy_constructor:tflite.task.vision.Embedding)
}
inline void Embedding::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.feature_vector_){nullptr},
      decltype(_impl_.output_index_){0},
  };
}
Embedding::~Embedding() {
  // @@protoc_insertion_point(destructor:tflite.task.vision.Embedding)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Embedding::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.feature_vector_;
}
void Embedding::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Embedding::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.task.vision.Embedding)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.feature_vector_ != nullptr);
    _impl_.feature_vector_->Clear();
  }
  _impl_.output_index_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Embedding::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> Embedding::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Embedding, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Embedding_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional int32 output_index = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Embedding, _impl_.output_index_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(Embedding, _impl_.output_index_)}},
    // optional .tflite.task.vision.FeatureVector feature_vector = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Embedding, _impl_.feature_vector_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .tflite.task.vision.FeatureVector feature_vector = 1;
    {PROTOBUF_FIELD_OFFSET(Embedding, _impl_.feature_vector_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional int32 output_index = 2;
    {PROTOBUF_FIELD_OFFSET(Embedding, _impl_.output_index_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tflite::task::vision::FeatureVector>()},
  }}, {{
  }},
};

::uint8_t* Embedding::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.task.vision.Embedding)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .tflite.task.vision.FeatureVector feature_vector = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::feature_vector(this),
        _Internal::feature_vector(this).GetCachedSize(), target, stream);
  }

  // optional int32 output_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_output_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.task.vision.Embedding)
  return target;
}

::size_t Embedding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.task.vision.Embedding)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .tflite.task.vision.FeatureVector feature_vector = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.feature_vector_);
    }

    // optional int32 output_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_output_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Embedding::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Embedding::MergeImpl
};
const ::google::protobuf::Message::ClassData*Embedding::GetClassData() const { return &_class_data_; }


void Embedding::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Embedding*>(&to_msg);
  auto& from = static_cast<const Embedding&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.task.vision.Embedding)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_feature_vector()->::tflite::task::vision::FeatureVector::MergeFrom(
          from._internal_feature_vector());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.output_index_ = from._impl_.output_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Embedding::CopyFrom(const Embedding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.task.vision.Embedding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Embedding::IsInitialized() const {
  return true;
}

void Embedding::InternalSwap(Embedding* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Embedding, _impl_.output_index_)
      + sizeof(Embedding::_impl_.output_index_)
      - PROTOBUF_FIELD_OFFSET(Embedding, _impl_.feature_vector_)>(
          reinterpret_cast<char*>(&_impl_.feature_vector_),
          reinterpret_cast<char*>(&other->_impl_.feature_vector_));
}

::google::protobuf::Metadata Embedding::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fembeddings_2eproto_getter, &descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fembeddings_2eproto_once,
      file_level_metadata_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fembeddings_2eproto[1]);
}
// ===================================================================

class EmbeddingResult::_Internal {
 public:
};

EmbeddingResult::EmbeddingResult(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.task.vision.EmbeddingResult)
}
EmbeddingResult::EmbeddingResult(const EmbeddingResult& from) : ::google::protobuf::Message() {
  EmbeddingResult* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.embeddings_){from._impl_.embeddings_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:tflite.task.vision.EmbeddingResult)
}
inline void EmbeddingResult::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.embeddings_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
EmbeddingResult::~EmbeddingResult() {
  // @@protoc_insertion_point(destructor:tflite.task.vision.EmbeddingResult)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EmbeddingResult::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.embeddings_.~RepeatedPtrField();
}
void EmbeddingResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void EmbeddingResult::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.task.vision.EmbeddingResult)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_embeddings()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EmbeddingResult::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> EmbeddingResult::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_EmbeddingResult_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .tflite.task.vision.Embedding embeddings = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(EmbeddingResult, _impl_.embeddings_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tflite.task.vision.Embedding embeddings = 1;
    {PROTOBUF_FIELD_OFFSET(EmbeddingResult, _impl_.embeddings_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tflite::task::vision::Embedding>()},
  }}, {{
  }},
};

::uint8_t* EmbeddingResult::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.task.vision.EmbeddingResult)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .tflite.task.vision.Embedding embeddings = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_embeddings_size()); i < n; i++) {
    const auto& repfield = this->_internal_embeddings().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.task.vision.EmbeddingResult)
  return target;
}

::size_t EmbeddingResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.task.vision.EmbeddingResult)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tflite.task.vision.Embedding embeddings = 1;
  total_size += 1UL * this->_internal_embeddings_size();
  for (const auto& msg : this->_internal_embeddings()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EmbeddingResult::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    EmbeddingResult::MergeImpl
};
const ::google::protobuf::Message::ClassData*EmbeddingResult::GetClassData() const { return &_class_data_; }


void EmbeddingResult::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EmbeddingResult*>(&to_msg);
  auto& from = static_cast<const EmbeddingResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.task.vision.EmbeddingResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_embeddings()->MergeFrom(from._internal_embeddings());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EmbeddingResult::CopyFrom(const EmbeddingResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.task.vision.EmbeddingResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EmbeddingResult::IsInitialized() const {
  return true;
}

void EmbeddingResult::InternalSwap(EmbeddingResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.embeddings_.InternalSwap(&other->_impl_.embeddings_);
}

::google::protobuf::Metadata EmbeddingResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fembeddings_2eproto_getter, &descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fembeddings_2eproto_once,
      file_level_metadata_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fembeddings_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace vision
}  // namespace task
}  // namespace tflite
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
