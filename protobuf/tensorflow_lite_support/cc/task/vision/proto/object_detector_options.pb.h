// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_lite_support/cc/task/vision/proto/object_detector_options.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fobject_5fdetector_5foptions_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fobject_5fdetector_5foptions_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "tensorflow/lite/experimental/acceleration/configuration/configuration.pb.h"
#include "tensorflow_lite_support/cc/task/core/proto/base_options.pb.h"
#include "tensorflow_lite_support/cc/task/core/proto/external_file.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fobject_5fdetector_5foptions_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fobject_5fdetector_5foptions_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fobject_5fdetector_5foptions_2eproto;
namespace tflite {
namespace task {
namespace vision {
class ObjectDetectorOptions;
struct ObjectDetectorOptionsDefaultTypeInternal;
extern ObjectDetectorOptionsDefaultTypeInternal _ObjectDetectorOptions_default_instance_;
}  // namespace vision
}  // namespace task
}  // namespace tflite
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tflite {
namespace task {
namespace vision {

// ===================================================================


// -------------------------------------------------------------------

class ObjectDetectorOptions final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tflite.task.vision.ObjectDetectorOptions) */ {
 public:
  inline ObjectDetectorOptions() : ObjectDetectorOptions(nullptr) {}
  ~ObjectDetectorOptions() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ObjectDetectorOptions(::google::protobuf::internal::ConstantInitialized);

  ObjectDetectorOptions(const ObjectDetectorOptions& from);
  ObjectDetectorOptions(ObjectDetectorOptions&& from) noexcept
    : ObjectDetectorOptions() {
    *this = ::std::move(from);
  }

  inline ObjectDetectorOptions& operator=(const ObjectDetectorOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectDetectorOptions& operator=(ObjectDetectorOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectDetectorOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectDetectorOptions* internal_default_instance() {
    return reinterpret_cast<const ObjectDetectorOptions*>(
               &_ObjectDetectorOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ObjectDetectorOptions& a, ObjectDetectorOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectDetectorOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectDetectorOptions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectDetectorOptions* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectDetectorOptions>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ObjectDetectorOptions& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ObjectDetectorOptions& from) {
    ObjectDetectorOptions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectDetectorOptions* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tflite.task.vision.ObjectDetectorOptions";
  }
  protected:
  explicit ObjectDetectorOptions(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassNameWhitelistFieldNumber = 5,
    kClassNameBlacklistFieldNumber = 6,
    kDisplayNamesLocaleFieldNumber = 2,
    kModelFileWithMetadataFieldNumber = 1,
    kComputeSettingsFieldNumber = 8,
    kBaseOptionsFieldNumber = 9,
    kScoreThresholdFieldNumber = 4,
    kMaxResultsFieldNumber = 3,
    kNumThreadsFieldNumber = 7,
  };
  // repeated string class_name_whitelist = 5;
  int class_name_whitelist_size() const;
  private:
  int _internal_class_name_whitelist_size() const;

  public:
  void clear_class_name_whitelist() ;
  const std::string& class_name_whitelist(int index) const;
  std::string* mutable_class_name_whitelist(int index);
  void set_class_name_whitelist(int index, const std::string& value);
  void set_class_name_whitelist(int index, std::string&& value);
  void set_class_name_whitelist(int index, const char* value);
  void set_class_name_whitelist(int index, const char* value, std::size_t size);
  void set_class_name_whitelist(int index, absl::string_view value);
  std::string* add_class_name_whitelist();
  void add_class_name_whitelist(const std::string& value);
  void add_class_name_whitelist(std::string&& value);
  void add_class_name_whitelist(const char* value);
  void add_class_name_whitelist(const char* value, std::size_t size);
  void add_class_name_whitelist(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& class_name_whitelist() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_class_name_whitelist();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_class_name_whitelist() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_class_name_whitelist();

  public:
  // repeated string class_name_blacklist = 6;
  int class_name_blacklist_size() const;
  private:
  int _internal_class_name_blacklist_size() const;

  public:
  void clear_class_name_blacklist() ;
  const std::string& class_name_blacklist(int index) const;
  std::string* mutable_class_name_blacklist(int index);
  void set_class_name_blacklist(int index, const std::string& value);
  void set_class_name_blacklist(int index, std::string&& value);
  void set_class_name_blacklist(int index, const char* value);
  void set_class_name_blacklist(int index, const char* value, std::size_t size);
  void set_class_name_blacklist(int index, absl::string_view value);
  std::string* add_class_name_blacklist();
  void add_class_name_blacklist(const std::string& value);
  void add_class_name_blacklist(std::string&& value);
  void add_class_name_blacklist(const char* value);
  void add_class_name_blacklist(const char* value, std::size_t size);
  void add_class_name_blacklist(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& class_name_blacklist() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_class_name_blacklist();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_class_name_blacklist() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_class_name_blacklist();

  public:
  // optional string display_names_locale = 2 [default = "en"];
  bool has_display_names_locale() const;
  void clear_display_names_locale() ;
  const std::string& display_names_locale() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_display_names_locale(Arg_&& arg, Args_... args);
  std::string* mutable_display_names_locale();
  PROTOBUF_NODISCARD std::string* release_display_names_locale();
  void set_allocated_display_names_locale(std::string* ptr);

  private:
  const std::string& _internal_display_names_locale() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_names_locale(
      const std::string& value);
  std::string* _internal_mutable_display_names_locale();

  public:
  // optional .tflite.task.core.ExternalFile model_file_with_metadata = 1;
  bool has_model_file_with_metadata() const;
  void clear_model_file_with_metadata() ;
  const ::tflite::task::core::ExternalFile& model_file_with_metadata() const;
  PROTOBUF_NODISCARD ::tflite::task::core::ExternalFile* release_model_file_with_metadata();
  ::tflite::task::core::ExternalFile* mutable_model_file_with_metadata();
  void set_allocated_model_file_with_metadata(::tflite::task::core::ExternalFile* value);
  void unsafe_arena_set_allocated_model_file_with_metadata(::tflite::task::core::ExternalFile* value);
  ::tflite::task::core::ExternalFile* unsafe_arena_release_model_file_with_metadata();

  private:
  const ::tflite::task::core::ExternalFile& _internal_model_file_with_metadata() const;
  ::tflite::task::core::ExternalFile* _internal_mutable_model_file_with_metadata();

  public:
  // optional .tflite.proto.ComputeSettings compute_settings = 8;
  bool has_compute_settings() const;
  void clear_compute_settings() ;
  const ::tflite::proto::ComputeSettings& compute_settings() const;
  PROTOBUF_NODISCARD ::tflite::proto::ComputeSettings* release_compute_settings();
  ::tflite::proto::ComputeSettings* mutable_compute_settings();
  void set_allocated_compute_settings(::tflite::proto::ComputeSettings* value);
  void unsafe_arena_set_allocated_compute_settings(::tflite::proto::ComputeSettings* value);
  ::tflite::proto::ComputeSettings* unsafe_arena_release_compute_settings();

  private:
  const ::tflite::proto::ComputeSettings& _internal_compute_settings() const;
  ::tflite::proto::ComputeSettings* _internal_mutable_compute_settings();

  public:
  // optional .tflite.task.core.BaseOptions base_options = 9;
  bool has_base_options() const;
  void clear_base_options() ;
  const ::tflite::task::core::BaseOptions& base_options() const;
  PROTOBUF_NODISCARD ::tflite::task::core::BaseOptions* release_base_options();
  ::tflite::task::core::BaseOptions* mutable_base_options();
  void set_allocated_base_options(::tflite::task::core::BaseOptions* value);
  void unsafe_arena_set_allocated_base_options(::tflite::task::core::BaseOptions* value);
  ::tflite::task::core::BaseOptions* unsafe_arena_release_base_options();

  private:
  const ::tflite::task::core::BaseOptions& _internal_base_options() const;
  ::tflite::task::core::BaseOptions* _internal_mutable_base_options();

  public:
  // optional float score_threshold = 4;
  bool has_score_threshold() const;
  void clear_score_threshold() ;
  float score_threshold() const;
  void set_score_threshold(float value);

  private:
  float _internal_score_threshold() const;
  void _internal_set_score_threshold(float value);

  public:
  // optional int32 max_results = 3 [default = -1];
  bool has_max_results() const;
  void clear_max_results() ;
  ::int32_t max_results() const;
  void set_max_results(::int32_t value);

  private:
  ::int32_t _internal_max_results() const;
  void _internal_set_max_results(::int32_t value);

  public:
  // optional int32 num_threads = 7 [default = -1];
  bool has_num_threads() const;
  void clear_num_threads() ;
  ::int32_t num_threads() const;
  void set_num_threads(::int32_t value);

  private:
  ::int32_t _internal_num_threads() const;
  void _internal_set_num_threads(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tflite.task.vision.ObjectDetectorOptions)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 9, 3, 117, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> class_name_whitelist_;
    ::google::protobuf::RepeatedPtrField<std::string> class_name_blacklist_;
    static const ::google::protobuf::internal::LazyString _i_give_permission_to_break_this_code_default_display_names_locale_;
    ::google::protobuf::internal::ArenaStringPtr display_names_locale_;
    ::tflite::task::core::ExternalFile* model_file_with_metadata_;
    ::tflite::proto::ComputeSettings* compute_settings_;
    ::tflite::task::core::BaseOptions* base_options_;
    float score_threshold_;
    ::int32_t max_results_;
    ::int32_t num_threads_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fobject_5fdetector_5foptions_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ObjectDetectorOptions

// optional .tflite.task.core.BaseOptions base_options = 9;
inline bool ObjectDetectorOptions::has_base_options() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_options_ != nullptr);
  return value;
}
inline const ::tflite::task::core::BaseOptions& ObjectDetectorOptions::_internal_base_options() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tflite::task::core::BaseOptions* p = _impl_.base_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::task::core::BaseOptions&>(::tflite::task::core::_BaseOptions_default_instance_);
}
inline const ::tflite::task::core::BaseOptions& ObjectDetectorOptions::base_options() const {
  // @@protoc_insertion_point(field_get:tflite.task.vision.ObjectDetectorOptions.base_options)
  return _internal_base_options();
}
inline void ObjectDetectorOptions::unsafe_arena_set_allocated_base_options(::tflite::task::core::BaseOptions* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_options_);
  }
  _impl_.base_options_ = reinterpret_cast<::tflite::task::core::BaseOptions*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.task.vision.ObjectDetectorOptions.base_options)
}
inline ::tflite::task::core::BaseOptions* ObjectDetectorOptions::release_base_options() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tflite::task::core::BaseOptions* released = _impl_.base_options_;
  _impl_.base_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tflite::task::core::BaseOptions* ObjectDetectorOptions::unsafe_arena_release_base_options() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.task.vision.ObjectDetectorOptions.base_options)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tflite::task::core::BaseOptions* temp = _impl_.base_options_;
  _impl_.base_options_ = nullptr;
  return temp;
}
inline ::tflite::task::core::BaseOptions* ObjectDetectorOptions::_internal_mutable_base_options() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.base_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::task::core::BaseOptions>(GetArenaForAllocation());
    _impl_.base_options_ = reinterpret_cast<::tflite::task::core::BaseOptions*>(p);
  }
  return _impl_.base_options_;
}
inline ::tflite::task::core::BaseOptions* ObjectDetectorOptions::mutable_base_options() {
  ::tflite::task::core::BaseOptions* _msg = _internal_mutable_base_options();
  // @@protoc_insertion_point(field_mutable:tflite.task.vision.ObjectDetectorOptions.base_options)
  return _msg;
}
inline void ObjectDetectorOptions::set_allocated_base_options(::tflite::task::core::BaseOptions* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_options_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.base_options_ = reinterpret_cast<::tflite::task::core::BaseOptions*>(value);
  // @@protoc_insertion_point(field_set_allocated:tflite.task.vision.ObjectDetectorOptions.base_options)
}

// optional .tflite.task.core.ExternalFile model_file_with_metadata = 1;
inline bool ObjectDetectorOptions::has_model_file_with_metadata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.model_file_with_metadata_ != nullptr);
  return value;
}
inline const ::tflite::task::core::ExternalFile& ObjectDetectorOptions::_internal_model_file_with_metadata() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tflite::task::core::ExternalFile* p = _impl_.model_file_with_metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::task::core::ExternalFile&>(::tflite::task::core::_ExternalFile_default_instance_);
}
inline const ::tflite::task::core::ExternalFile& ObjectDetectorOptions::model_file_with_metadata() const {
  // @@protoc_insertion_point(field_get:tflite.task.vision.ObjectDetectorOptions.model_file_with_metadata)
  return _internal_model_file_with_metadata();
}
inline void ObjectDetectorOptions::unsafe_arena_set_allocated_model_file_with_metadata(::tflite::task::core::ExternalFile* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.model_file_with_metadata_);
  }
  _impl_.model_file_with_metadata_ = reinterpret_cast<::tflite::task::core::ExternalFile*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.task.vision.ObjectDetectorOptions.model_file_with_metadata)
}
inline ::tflite::task::core::ExternalFile* ObjectDetectorOptions::release_model_file_with_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tflite::task::core::ExternalFile* released = _impl_.model_file_with_metadata_;
  _impl_.model_file_with_metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tflite::task::core::ExternalFile* ObjectDetectorOptions::unsafe_arena_release_model_file_with_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.task.vision.ObjectDetectorOptions.model_file_with_metadata)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tflite::task::core::ExternalFile* temp = _impl_.model_file_with_metadata_;
  _impl_.model_file_with_metadata_ = nullptr;
  return temp;
}
inline ::tflite::task::core::ExternalFile* ObjectDetectorOptions::_internal_mutable_model_file_with_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.model_file_with_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::task::core::ExternalFile>(GetArenaForAllocation());
    _impl_.model_file_with_metadata_ = reinterpret_cast<::tflite::task::core::ExternalFile*>(p);
  }
  return _impl_.model_file_with_metadata_;
}
inline ::tflite::task::core::ExternalFile* ObjectDetectorOptions::mutable_model_file_with_metadata() {
  ::tflite::task::core::ExternalFile* _msg = _internal_mutable_model_file_with_metadata();
  // @@protoc_insertion_point(field_mutable:tflite.task.vision.ObjectDetectorOptions.model_file_with_metadata)
  return _msg;
}
inline void ObjectDetectorOptions::set_allocated_model_file_with_metadata(::tflite::task::core::ExternalFile* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.model_file_with_metadata_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.model_file_with_metadata_ = reinterpret_cast<::tflite::task::core::ExternalFile*>(value);
  // @@protoc_insertion_point(field_set_allocated:tflite.task.vision.ObjectDetectorOptions.model_file_with_metadata)
}

// optional string display_names_locale = 2 [default = "en"];
inline bool ObjectDetectorOptions::has_display_names_locale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ObjectDetectorOptions::clear_display_names_locale() {
  _impl_.display_names_locale_.ClearToDefault(::tflite::task::vision::ObjectDetectorOptions::Impl_::_i_give_permission_to_break_this_code_default_display_names_locale_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ObjectDetectorOptions::display_names_locale() const {
  // @@protoc_insertion_point(field_get:tflite.task.vision.ObjectDetectorOptions.display_names_locale)
  if (_impl_.display_names_locale_.IsDefault()) {
    return Impl_::_i_give_permission_to_break_this_code_default_display_names_locale_.get();
  }
  return _internal_display_names_locale();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ObjectDetectorOptions::set_display_names_locale(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.display_names_locale_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tflite.task.vision.ObjectDetectorOptions.display_names_locale)
}
inline std::string* ObjectDetectorOptions::mutable_display_names_locale() {
  std::string* _s = _internal_mutable_display_names_locale();
  // @@protoc_insertion_point(field_mutable:tflite.task.vision.ObjectDetectorOptions.display_names_locale)
  return _s;
}
inline const std::string& ObjectDetectorOptions::_internal_display_names_locale() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.display_names_locale_.Get();
}
inline void ObjectDetectorOptions::_internal_set_display_names_locale(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.display_names_locale_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectDetectorOptions::_internal_mutable_display_names_locale() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.display_names_locale_.Mutable(::tflite::task::vision::ObjectDetectorOptions::Impl_::_i_give_permission_to_break_this_code_default_display_names_locale_, GetArenaForAllocation());
}
inline std::string* ObjectDetectorOptions::release_display_names_locale() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.task.vision.ObjectDetectorOptions.display_names_locale)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  return _impl_.display_names_locale_.Release();
}
inline void ObjectDetectorOptions::set_allocated_display_names_locale(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.display_names_locale_.SetAllocated(value, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:tflite.task.vision.ObjectDetectorOptions.display_names_locale)
}

// optional int32 max_results = 3 [default = -1];
inline bool ObjectDetectorOptions::has_max_results() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ObjectDetectorOptions::clear_max_results() {
  _impl_.max_results_ = -1;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t ObjectDetectorOptions::max_results() const {
  // @@protoc_insertion_point(field_get:tflite.task.vision.ObjectDetectorOptions.max_results)
  return _internal_max_results();
}
inline void ObjectDetectorOptions::set_max_results(::int32_t value) {
  _internal_set_max_results(value);
  // @@protoc_insertion_point(field_set:tflite.task.vision.ObjectDetectorOptions.max_results)
}
inline ::int32_t ObjectDetectorOptions::_internal_max_results() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_results_;
}
inline void ObjectDetectorOptions::_internal_set_max_results(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.max_results_ = value;
}

// optional float score_threshold = 4;
inline bool ObjectDetectorOptions::has_score_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ObjectDetectorOptions::clear_score_threshold() {
  _impl_.score_threshold_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float ObjectDetectorOptions::score_threshold() const {
  // @@protoc_insertion_point(field_get:tflite.task.vision.ObjectDetectorOptions.score_threshold)
  return _internal_score_threshold();
}
inline void ObjectDetectorOptions::set_score_threshold(float value) {
  _internal_set_score_threshold(value);
  // @@protoc_insertion_point(field_set:tflite.task.vision.ObjectDetectorOptions.score_threshold)
}
inline float ObjectDetectorOptions::_internal_score_threshold() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.score_threshold_;
}
inline void ObjectDetectorOptions::_internal_set_score_threshold(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.score_threshold_ = value;
}

// repeated string class_name_whitelist = 5;
inline int ObjectDetectorOptions::_internal_class_name_whitelist_size() const {
  return _internal_class_name_whitelist().size();
}
inline int ObjectDetectorOptions::class_name_whitelist_size() const {
  return _internal_class_name_whitelist_size();
}
inline void ObjectDetectorOptions::clear_class_name_whitelist() {
  _internal_mutable_class_name_whitelist()->Clear();
}
inline std::string* ObjectDetectorOptions::add_class_name_whitelist() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_class_name_whitelist()->Add();
  // @@protoc_insertion_point(field_add_mutable:tflite.task.vision.ObjectDetectorOptions.class_name_whitelist)
  return _s;
}
inline const std::string& ObjectDetectorOptions::class_name_whitelist(int index) const {
  // @@protoc_insertion_point(field_get:tflite.task.vision.ObjectDetectorOptions.class_name_whitelist)
  return _internal_class_name_whitelist().Get(index);
}
inline std::string* ObjectDetectorOptions::mutable_class_name_whitelist(int index) {
  // @@protoc_insertion_point(field_mutable:tflite.task.vision.ObjectDetectorOptions.class_name_whitelist)
  return _internal_mutable_class_name_whitelist()->Mutable(index);
}
inline void ObjectDetectorOptions::set_class_name_whitelist(int index, const std::string& value) {
  _internal_mutable_class_name_whitelist()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:tflite.task.vision.ObjectDetectorOptions.class_name_whitelist)
}
inline void ObjectDetectorOptions::set_class_name_whitelist(int index, std::string&& value) {
  _internal_mutable_class_name_whitelist()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:tflite.task.vision.ObjectDetectorOptions.class_name_whitelist)
}
inline void ObjectDetectorOptions::set_class_name_whitelist(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_class_name_whitelist()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tflite.task.vision.ObjectDetectorOptions.class_name_whitelist)
}
inline void ObjectDetectorOptions::set_class_name_whitelist(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_class_name_whitelist()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tflite.task.vision.ObjectDetectorOptions.class_name_whitelist)
}
inline void ObjectDetectorOptions::set_class_name_whitelist(int index, absl::string_view value) {
  _internal_mutable_class_name_whitelist()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:tflite.task.vision.ObjectDetectorOptions.class_name_whitelist)
}
inline void ObjectDetectorOptions::add_class_name_whitelist(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_class_name_whitelist()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:tflite.task.vision.ObjectDetectorOptions.class_name_whitelist)
}
inline void ObjectDetectorOptions::add_class_name_whitelist(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_class_name_whitelist()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:tflite.task.vision.ObjectDetectorOptions.class_name_whitelist)
}
inline void ObjectDetectorOptions::add_class_name_whitelist(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_class_name_whitelist()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tflite.task.vision.ObjectDetectorOptions.class_name_whitelist)
}
inline void ObjectDetectorOptions::add_class_name_whitelist(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_class_name_whitelist()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tflite.task.vision.ObjectDetectorOptions.class_name_whitelist)
}
inline void ObjectDetectorOptions::add_class_name_whitelist(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_class_name_whitelist()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:tflite.task.vision.ObjectDetectorOptions.class_name_whitelist)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ObjectDetectorOptions::class_name_whitelist() const {
  // @@protoc_insertion_point(field_list:tflite.task.vision.ObjectDetectorOptions.class_name_whitelist)
  return _internal_class_name_whitelist();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* ObjectDetectorOptions::mutable_class_name_whitelist() {
  // @@protoc_insertion_point(field_mutable_list:tflite.task.vision.ObjectDetectorOptions.class_name_whitelist)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_class_name_whitelist();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ObjectDetectorOptions::_internal_class_name_whitelist() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.class_name_whitelist_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ObjectDetectorOptions::_internal_mutable_class_name_whitelist() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.class_name_whitelist_;
}

// repeated string class_name_blacklist = 6;
inline int ObjectDetectorOptions::_internal_class_name_blacklist_size() const {
  return _internal_class_name_blacklist().size();
}
inline int ObjectDetectorOptions::class_name_blacklist_size() const {
  return _internal_class_name_blacklist_size();
}
inline void ObjectDetectorOptions::clear_class_name_blacklist() {
  _internal_mutable_class_name_blacklist()->Clear();
}
inline std::string* ObjectDetectorOptions::add_class_name_blacklist() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_class_name_blacklist()->Add();
  // @@protoc_insertion_point(field_add_mutable:tflite.task.vision.ObjectDetectorOptions.class_name_blacklist)
  return _s;
}
inline const std::string& ObjectDetectorOptions::class_name_blacklist(int index) const {
  // @@protoc_insertion_point(field_get:tflite.task.vision.ObjectDetectorOptions.class_name_blacklist)
  return _internal_class_name_blacklist().Get(index);
}
inline std::string* ObjectDetectorOptions::mutable_class_name_blacklist(int index) {
  // @@protoc_insertion_point(field_mutable:tflite.task.vision.ObjectDetectorOptions.class_name_blacklist)
  return _internal_mutable_class_name_blacklist()->Mutable(index);
}
inline void ObjectDetectorOptions::set_class_name_blacklist(int index, const std::string& value) {
  _internal_mutable_class_name_blacklist()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:tflite.task.vision.ObjectDetectorOptions.class_name_blacklist)
}
inline void ObjectDetectorOptions::set_class_name_blacklist(int index, std::string&& value) {
  _internal_mutable_class_name_blacklist()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:tflite.task.vision.ObjectDetectorOptions.class_name_blacklist)
}
inline void ObjectDetectorOptions::set_class_name_blacklist(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_class_name_blacklist()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tflite.task.vision.ObjectDetectorOptions.class_name_blacklist)
}
inline void ObjectDetectorOptions::set_class_name_blacklist(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_class_name_blacklist()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tflite.task.vision.ObjectDetectorOptions.class_name_blacklist)
}
inline void ObjectDetectorOptions::set_class_name_blacklist(int index, absl::string_view value) {
  _internal_mutable_class_name_blacklist()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:tflite.task.vision.ObjectDetectorOptions.class_name_blacklist)
}
inline void ObjectDetectorOptions::add_class_name_blacklist(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_class_name_blacklist()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:tflite.task.vision.ObjectDetectorOptions.class_name_blacklist)
}
inline void ObjectDetectorOptions::add_class_name_blacklist(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_class_name_blacklist()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:tflite.task.vision.ObjectDetectorOptions.class_name_blacklist)
}
inline void ObjectDetectorOptions::add_class_name_blacklist(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_class_name_blacklist()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tflite.task.vision.ObjectDetectorOptions.class_name_blacklist)
}
inline void ObjectDetectorOptions::add_class_name_blacklist(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_class_name_blacklist()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tflite.task.vision.ObjectDetectorOptions.class_name_blacklist)
}
inline void ObjectDetectorOptions::add_class_name_blacklist(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_class_name_blacklist()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:tflite.task.vision.ObjectDetectorOptions.class_name_blacklist)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ObjectDetectorOptions::class_name_blacklist() const {
  // @@protoc_insertion_point(field_list:tflite.task.vision.ObjectDetectorOptions.class_name_blacklist)
  return _internal_class_name_blacklist();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* ObjectDetectorOptions::mutable_class_name_blacklist() {
  // @@protoc_insertion_point(field_mutable_list:tflite.task.vision.ObjectDetectorOptions.class_name_blacklist)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_class_name_blacklist();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ObjectDetectorOptions::_internal_class_name_blacklist() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.class_name_blacklist_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ObjectDetectorOptions::_internal_mutable_class_name_blacklist() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.class_name_blacklist_;
}

// optional int32 num_threads = 7 [default = -1];
inline bool ObjectDetectorOptions::has_num_threads() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void ObjectDetectorOptions::clear_num_threads() {
  _impl_.num_threads_ = -1;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t ObjectDetectorOptions::num_threads() const {
  // @@protoc_insertion_point(field_get:tflite.task.vision.ObjectDetectorOptions.num_threads)
  return _internal_num_threads();
}
inline void ObjectDetectorOptions::set_num_threads(::int32_t value) {
  _internal_set_num_threads(value);
  // @@protoc_insertion_point(field_set:tflite.task.vision.ObjectDetectorOptions.num_threads)
}
inline ::int32_t ObjectDetectorOptions::_internal_num_threads() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_threads_;
}
inline void ObjectDetectorOptions::_internal_set_num_threads(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.num_threads_ = value;
}

// optional .tflite.proto.ComputeSettings compute_settings = 8;
inline bool ObjectDetectorOptions::has_compute_settings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.compute_settings_ != nullptr);
  return value;
}
inline const ::tflite::proto::ComputeSettings& ObjectDetectorOptions::_internal_compute_settings() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tflite::proto::ComputeSettings* p = _impl_.compute_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::tflite::proto::ComputeSettings&>(::tflite::proto::_ComputeSettings_default_instance_);
}
inline const ::tflite::proto::ComputeSettings& ObjectDetectorOptions::compute_settings() const {
  // @@protoc_insertion_point(field_get:tflite.task.vision.ObjectDetectorOptions.compute_settings)
  return _internal_compute_settings();
}
inline void ObjectDetectorOptions::unsafe_arena_set_allocated_compute_settings(::tflite::proto::ComputeSettings* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.compute_settings_);
  }
  _impl_.compute_settings_ = reinterpret_cast<::tflite::proto::ComputeSettings*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.task.vision.ObjectDetectorOptions.compute_settings)
}
inline ::tflite::proto::ComputeSettings* ObjectDetectorOptions::release_compute_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tflite::proto::ComputeSettings* released = _impl_.compute_settings_;
  _impl_.compute_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tflite::proto::ComputeSettings* ObjectDetectorOptions::unsafe_arena_release_compute_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tflite.task.vision.ObjectDetectorOptions.compute_settings)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tflite::proto::ComputeSettings* temp = _impl_.compute_settings_;
  _impl_.compute_settings_ = nullptr;
  return temp;
}
inline ::tflite::proto::ComputeSettings* ObjectDetectorOptions::_internal_mutable_compute_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.compute_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::proto::ComputeSettings>(GetArenaForAllocation());
    _impl_.compute_settings_ = reinterpret_cast<::tflite::proto::ComputeSettings*>(p);
  }
  return _impl_.compute_settings_;
}
inline ::tflite::proto::ComputeSettings* ObjectDetectorOptions::mutable_compute_settings() {
  ::tflite::proto::ComputeSettings* _msg = _internal_mutable_compute_settings();
  // @@protoc_insertion_point(field_mutable:tflite.task.vision.ObjectDetectorOptions.compute_settings)
  return _msg;
}
inline void ObjectDetectorOptions::set_allocated_compute_settings(::tflite::proto::ComputeSettings* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.compute_settings_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.compute_settings_ = reinterpret_cast<::tflite::proto::ComputeSettings*>(value);
  // @@protoc_insertion_point(field_set_allocated:tflite.task.vision.ObjectDetectorOptions.compute_settings)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace vision
}  // namespace task
}  // namespace tflite


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fobject_5fdetector_5foptions_2eproto_2epb_2eh
