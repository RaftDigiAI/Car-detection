// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_lite_support/cc/task/vision/proto/image_embedder_options.proto

#include "tensorflow_lite_support/cc/task/vision/proto/image_embedder_options.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace tflite {
namespace task {
namespace vision {
        template <typename>
PROTOBUF_CONSTEXPR ImageEmbedderOptions::ImageEmbedderOptions(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.compute_settings_)*/ nullptr,
      /*decltype(_impl_.model_file_with_metadata_)*/ nullptr,
      /*decltype(_impl_.l2_normalize_)*/ false,
      /*decltype(_impl_.quantize_)*/ false,
      /*decltype(_impl_.num_threads_)*/ 1,
    } {}
struct ImageEmbedderOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageEmbedderOptionsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageEmbedderOptionsDefaultTypeInternal() {}
  union {
    ImageEmbedderOptions _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageEmbedderOptionsDefaultTypeInternal _ImageEmbedderOptions_default_instance_;
}  // namespace vision
}  // namespace task
}  // namespace tflite
static ::_pb::Metadata file_level_metadata_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fembedder_5foptions_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fembedder_5foptions_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fembedder_5foptions_2eproto = nullptr;
const ::uint32_t TableStruct_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fembedder_5foptions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::tflite::task::vision::ImageEmbedderOptions, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tflite::task::vision::ImageEmbedderOptions, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tflite::task::vision::ImageEmbedderOptions, _impl_.model_file_with_metadata_),
    PROTOBUF_FIELD_OFFSET(::tflite::task::vision::ImageEmbedderOptions, _impl_.l2_normalize_),
    PROTOBUF_FIELD_OFFSET(::tflite::task::vision::ImageEmbedderOptions, _impl_.quantize_),
    PROTOBUF_FIELD_OFFSET(::tflite::task::vision::ImageEmbedderOptions, _impl_.num_threads_),
    PROTOBUF_FIELD_OFFSET(::tflite::task::vision::ImageEmbedderOptions, _impl_.compute_settings_),
    1,
    2,
    3,
    4,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 13, -1, sizeof(::tflite::task::vision::ImageEmbedderOptions)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::tflite::task::vision::_ImageEmbedderOptions_default_instance_._instance,
};
const char descriptor_table_protodef_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fembedder_5foptions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\nItensorflow_lite_support/cc/task/vision"
    "/proto/image_embedder_options.proto\022\022tfl"
    "ite.task.vision\032Ktensorflow/lite/experim"
    "ental/acceleration/configuration/configu"
    "ration.proto\032>tensorflow_lite_support/cc"
    "/task/core/proto/external_file.proto\"\351\001\n"
    "\024ImageEmbedderOptions\022@\n\030model_file_with"
    "_metadata\030\t \001(\0132\036.tflite.task.core.Exter"
    "nalFile\022\024\n\014l2_normalize\030\006 \001(\010\022\020\n\010quantiz"
    "e\030\002 \001(\010\022\026\n\013num_threads\030\007 \001(\005:\0011\0227\n\020compu"
    "te_settings\030\010 \001(\0132\035.tflite.proto.Compute"
    "SettingsJ\004\010\001\020\002J\004\010\003\020\004J\004\010\004\020\005J\004\010\005\020\006"
};
static const ::_pbi::DescriptorTable* const descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fembedder_5foptions_2eproto_deps[2] =
    {
        &::descriptor_table_tensorflow_2flite_2fexperimental_2facceleration_2fconfiguration_2fconfiguration_2eproto,
        &::descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fcore_2fproto_2fexternal_5ffile_2eproto,
};
static ::absl::once_flag descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fembedder_5foptions_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fembedder_5foptions_2eproto = {
    false,
    false,
    472,
    descriptor_table_protodef_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fembedder_5foptions_2eproto,
    "tensorflow_lite_support/cc/task/vision/proto/image_embedder_options.proto",
    &descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fembedder_5foptions_2eproto_once,
    descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fembedder_5foptions_2eproto_deps,
    2,
    1,
    schemas,
    file_default_instances,
    TableStruct_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fembedder_5foptions_2eproto::offsets,
    file_level_metadata_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fembedder_5foptions_2eproto,
    file_level_enum_descriptors_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fembedder_5foptions_2eproto,
    file_level_service_descriptors_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fembedder_5foptions_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fembedder_5foptions_2eproto_getter() {
  return &descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fembedder_5foptions_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fembedder_5foptions_2eproto(&descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fembedder_5foptions_2eproto);
namespace tflite {
namespace task {
namespace vision {
// ===================================================================

class ImageEmbedderOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageEmbedderOptions>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ImageEmbedderOptions, _impl_._has_bits_);
  static const ::tflite::task::core::ExternalFile& model_file_with_metadata(const ImageEmbedderOptions* msg);
  static void set_has_model_file_with_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_l2_normalize(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_quantize(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_num_threads(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::tflite::proto::ComputeSettings& compute_settings(const ImageEmbedderOptions* msg);
  static void set_has_compute_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::tflite::task::core::ExternalFile& ImageEmbedderOptions::_Internal::model_file_with_metadata(const ImageEmbedderOptions* msg) {
  return *msg->_impl_.model_file_with_metadata_;
}
const ::tflite::proto::ComputeSettings& ImageEmbedderOptions::_Internal::compute_settings(const ImageEmbedderOptions* msg) {
  return *msg->_impl_.compute_settings_;
}
void ImageEmbedderOptions::clear_model_file_with_metadata() {
  if (_impl_.model_file_with_metadata_ != nullptr) _impl_.model_file_with_metadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ImageEmbedderOptions::clear_compute_settings() {
  if (_impl_.compute_settings_ != nullptr) _impl_.compute_settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ImageEmbedderOptions::ImageEmbedderOptions(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.task.vision.ImageEmbedderOptions)
}
ImageEmbedderOptions::ImageEmbedderOptions(const ImageEmbedderOptions& from) : ::google::protobuf::Message() {
  ImageEmbedderOptions* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.compute_settings_){nullptr},
      decltype(_impl_.model_file_with_metadata_){nullptr},
      decltype(_impl_.l2_normalize_){},
      decltype(_impl_.quantize_){},
      decltype(_impl_.num_threads_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.compute_settings_ = new ::tflite::proto::ComputeSettings(*from._impl_.compute_settings_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.model_file_with_metadata_ = new ::tflite::task::core::ExternalFile(*from._impl_.model_file_with_metadata_);
  }
  ::memcpy(&_impl_.l2_normalize_, &from._impl_.l2_normalize_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.num_threads_) -
    reinterpret_cast<char*>(&_impl_.l2_normalize_)) + sizeof(_impl_.num_threads_));

  // @@protoc_insertion_point(copy_constructor:tflite.task.vision.ImageEmbedderOptions)
}
inline void ImageEmbedderOptions::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.compute_settings_){nullptr},
      decltype(_impl_.model_file_with_metadata_){nullptr},
      decltype(_impl_.l2_normalize_){false},
      decltype(_impl_.quantize_){false},
      decltype(_impl_.num_threads_){1},
  };
}
ImageEmbedderOptions::~ImageEmbedderOptions() {
  // @@protoc_insertion_point(destructor:tflite.task.vision.ImageEmbedderOptions)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ImageEmbedderOptions::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.compute_settings_;
  if (this != internal_default_instance()) delete _impl_.model_file_with_metadata_;
}
void ImageEmbedderOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ImageEmbedderOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.task.vision.ImageEmbedderOptions)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.compute_settings_ != nullptr);
      _impl_.compute_settings_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.model_file_with_metadata_ != nullptr);
      _impl_.model_file_with_metadata_->Clear();
    }
  }
  ::memset(&_impl_.l2_normalize_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.quantize_) -
      reinterpret_cast<char*>(&_impl_.l2_normalize_)) + sizeof(_impl_.quantize_));
  _impl_.num_threads_ = 1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ImageEmbedderOptions::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 2, 0, 2> ImageEmbedderOptions::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ImageEmbedderOptions, _impl_._has_bits_),
    0, // no _extensions_
    9, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966813,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ImageEmbedderOptions_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional .tflite.proto.ComputeSettings compute_settings = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 0, 0, PROTOBUF_FIELD_OFFSET(ImageEmbedderOptions, _impl_.compute_settings_)}},
    // optional .tflite.task.core.ExternalFile model_file_with_metadata = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 1, 1, PROTOBUF_FIELD_OFFSET(ImageEmbedderOptions, _impl_.model_file_with_metadata_)}},
    // optional bool quantize = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ImageEmbedderOptions, _impl_.quantize_), 3>(),
     {16, 3, 0, PROTOBUF_FIELD_OFFSET(ImageEmbedderOptions, _impl_.quantize_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional bool l2_normalize = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ImageEmbedderOptions, _impl_.l2_normalize_), 2>(),
     {48, 2, 0, PROTOBUF_FIELD_OFFSET(ImageEmbedderOptions, _impl_.l2_normalize_)}},
    // optional int32 num_threads = 7 [default = 1];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ImageEmbedderOptions, _impl_.num_threads_), 4>(),
     {56, 4, 0, PROTOBUF_FIELD_OFFSET(ImageEmbedderOptions, _impl_.num_threads_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bool quantize = 2;
    {PROTOBUF_FIELD_OFFSET(ImageEmbedderOptions, _impl_.quantize_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool l2_normalize = 6;
    {PROTOBUF_FIELD_OFFSET(ImageEmbedderOptions, _impl_.l2_normalize_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional int32 num_threads = 7 [default = 1];
    {PROTOBUF_FIELD_OFFSET(ImageEmbedderOptions, _impl_.num_threads_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional .tflite.proto.ComputeSettings compute_settings = 8;
    {PROTOBUF_FIELD_OFFSET(ImageEmbedderOptions, _impl_.compute_settings_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .tflite.task.core.ExternalFile model_file_with_metadata = 9;
    {PROTOBUF_FIELD_OFFSET(ImageEmbedderOptions, _impl_.model_file_with_metadata_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tflite::proto::ComputeSettings>()},
    {::_pbi::TcParser::GetTable<::tflite::task::core::ExternalFile>()},
  }}, {{
  }},
};

::uint8_t* ImageEmbedderOptions::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.task.vision.ImageEmbedderOptions)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool quantize = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_quantize(), target);
  }

  // optional bool l2_normalize = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_l2_normalize(), target);
  }

  // optional int32 num_threads = 7 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_num_threads(), target);
  }

  // optional .tflite.proto.ComputeSettings compute_settings = 8;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::compute_settings(this),
        _Internal::compute_settings(this).GetCachedSize(), target, stream);
  }

  // optional .tflite.task.core.ExternalFile model_file_with_metadata = 9;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::model_file_with_metadata(this),
        _Internal::model_file_with_metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.task.vision.ImageEmbedderOptions)
  return target;
}

::size_t ImageEmbedderOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.task.vision.ImageEmbedderOptions)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .tflite.proto.ComputeSettings compute_settings = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.compute_settings_);
    }

    // optional .tflite.task.core.ExternalFile model_file_with_metadata = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.model_file_with_metadata_);
    }

    // optional bool l2_normalize = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2;
    }

    // optional bool quantize = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2;
    }

    // optional int32 num_threads = 7 [default = 1];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_num_threads());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ImageEmbedderOptions::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ImageEmbedderOptions::MergeImpl
};
const ::google::protobuf::Message::ClassData*ImageEmbedderOptions::GetClassData() const { return &_class_data_; }


void ImageEmbedderOptions::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ImageEmbedderOptions*>(&to_msg);
  auto& from = static_cast<const ImageEmbedderOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.task.vision.ImageEmbedderOptions)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_compute_settings()->::tflite::proto::ComputeSettings::MergeFrom(
          from._internal_compute_settings());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_model_file_with_metadata()->::tflite::task::core::ExternalFile::MergeFrom(
          from._internal_model_file_with_metadata());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.l2_normalize_ = from._impl_.l2_normalize_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.quantize_ = from._impl_.quantize_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.num_threads_ = from._impl_.num_threads_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ImageEmbedderOptions::CopyFrom(const ImageEmbedderOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.task.vision.ImageEmbedderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ImageEmbedderOptions::IsInitialized() const {
  return true;
}

void ImageEmbedderOptions::InternalSwap(ImageEmbedderOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageEmbedderOptions, _impl_.num_threads_)
      + sizeof(ImageEmbedderOptions::_impl_.num_threads_)
      - PROTOBUF_FIELD_OFFSET(ImageEmbedderOptions, _impl_.compute_settings_)>(
          reinterpret_cast<char*>(&_impl_.compute_settings_),
          reinterpret_cast<char*>(&other->_impl_.compute_settings_));
}

::google::protobuf::Metadata ImageEmbedderOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fembedder_5foptions_2eproto_getter, &descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fembedder_5foptions_2eproto_once,
      file_level_metadata_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fimage_5fembedder_5foptions_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace vision
}  // namespace task
}  // namespace tflite
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
