// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_lite_support/cc/task/vision/proto/segmentations.proto

#include "tensorflow_lite_support/cc/task/vision/proto/segmentations.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace tflite {
namespace task {
namespace vision {
        template <typename>
PROTOBUF_CONSTEXPR SegmentationResult::SegmentationResult(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.segmentation_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct SegmentationResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SegmentationResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SegmentationResultDefaultTypeInternal() {}
  union {
    SegmentationResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SegmentationResultDefaultTypeInternal _SegmentationResult_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Segmentation_ConfidenceMask::Segmentation_ConfidenceMask(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.value_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct Segmentation_ConfidenceMaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Segmentation_ConfidenceMaskDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Segmentation_ConfidenceMaskDefaultTypeInternal() {}
  union {
    Segmentation_ConfidenceMask _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Segmentation_ConfidenceMaskDefaultTypeInternal _Segmentation_ConfidenceMask_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Segmentation_ConfidenceMasks::Segmentation_ConfidenceMasks(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.confidence_mask_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct Segmentation_ConfidenceMasksDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Segmentation_ConfidenceMasksDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Segmentation_ConfidenceMasksDefaultTypeInternal() {}
  union {
    Segmentation_ConfidenceMasks _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Segmentation_ConfidenceMasksDefaultTypeInternal _Segmentation_ConfidenceMasks_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Segmentation_ColoredLabel::Segmentation_ColoredLabel(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.class_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.display_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.r_)*/ 0u,
      /*decltype(_impl_.g_)*/ 0u,
      /*decltype(_impl_.b_)*/ 0u,
    } {}
struct Segmentation_ColoredLabelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Segmentation_ColoredLabelDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Segmentation_ColoredLabelDefaultTypeInternal() {}
  union {
    Segmentation_ColoredLabel _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Segmentation_ColoredLabelDefaultTypeInternal _Segmentation_ColoredLabel_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Segmentation::Segmentation(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.colored_labels_)*/ {},
      /*decltype(_impl_.width_)*/ 0,
      /*decltype(_impl_.height_)*/ 0,
      /*decltype(_impl_.mask_oneof_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
    } {}
struct SegmentationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SegmentationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SegmentationDefaultTypeInternal() {}
  union {
    Segmentation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SegmentationDefaultTypeInternal _Segmentation_default_instance_;
}  // namespace vision
}  // namespace task
}  // namespace tflite
static ::_pb::Metadata file_level_metadata_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fsegmentations_2eproto[5];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fsegmentations_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fsegmentations_2eproto = nullptr;
const ::uint32_t TableStruct_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fsegmentations_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tflite::task::vision::SegmentationResult, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tflite::task::vision::SegmentationResult, _impl_.segmentation_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tflite::task::vision::Segmentation_ConfidenceMask, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tflite::task::vision::Segmentation_ConfidenceMask, _impl_.value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tflite::task::vision::Segmentation_ConfidenceMasks, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tflite::task::vision::Segmentation_ConfidenceMasks, _impl_.confidence_mask_),
    PROTOBUF_FIELD_OFFSET(::tflite::task::vision::Segmentation_ColoredLabel, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tflite::task::vision::Segmentation_ColoredLabel, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tflite::task::vision::Segmentation_ColoredLabel, _impl_.r_),
    PROTOBUF_FIELD_OFFSET(::tflite::task::vision::Segmentation_ColoredLabel, _impl_.g_),
    PROTOBUF_FIELD_OFFSET(::tflite::task::vision::Segmentation_ColoredLabel, _impl_.b_),
    PROTOBUF_FIELD_OFFSET(::tflite::task::vision::Segmentation_ColoredLabel, _impl_.class_name_),
    PROTOBUF_FIELD_OFFSET(::tflite::task::vision::Segmentation_ColoredLabel, _impl_.display_name_),
    2,
    3,
    4,
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::tflite::task::vision::Segmentation, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tflite::task::vision::Segmentation, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::tflite::task::vision::Segmentation, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::tflite::task::vision::Segmentation, _impl_.width_),
    PROTOBUF_FIELD_OFFSET(::tflite::task::vision::Segmentation, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::tflite::task::vision::Segmentation, _impl_.colored_labels_),
    PROTOBUF_FIELD_OFFSET(::tflite::task::vision::Segmentation, _impl_.mask_oneof_),
    ~0u,
    ~0u,
    0,
    1,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::tflite::task::vision::SegmentationResult)},
        {9, -1, -1, sizeof(::tflite::task::vision::Segmentation_ConfidenceMask)},
        {18, -1, -1, sizeof(::tflite::task::vision::Segmentation_ConfidenceMasks)},
        {27, 40, -1, sizeof(::tflite::task::vision::Segmentation_ColoredLabel)},
        {45, 59, -1, sizeof(::tflite::task::vision::Segmentation)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::tflite::task::vision::_SegmentationResult_default_instance_._instance,
    &::tflite::task::vision::_Segmentation_ConfidenceMask_default_instance_._instance,
    &::tflite::task::vision::_Segmentation_ConfidenceMasks_default_instance_._instance,
    &::tflite::task::vision::_Segmentation_ColoredLabel_default_instance_._instance,
    &::tflite::task::vision::_Segmentation_default_instance_._instance,
};
const char descriptor_table_protodef_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fsegmentations_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n@tensorflow_lite_support/cc/task/vision"
    "/proto/segmentations.proto\022\022tflite.task."
    "vision\"L\n\022SegmentationResult\0226\n\014segmenta"
    "tion\030\001 \003(\0132 .tflite.task.vision.Segmenta"
    "tion\"\306\003\n\014Segmentation\022\027\n\rcategory_mask\030\001"
    " \001(\014H\000\022L\n\020confidence_masks\030\004 \001(\01320.tflit"
    "e.task.vision.Segmentation.ConfidenceMas"
    "ksH\000\022\r\n\005width\030\002 \001(\005\022\016\n\006height\030\003 \001(\005\022E\n\016c"
    "olored_labels\030\005 \003(\0132-.tflite.task.vision"
    ".Segmentation.ColoredLabel\032#\n\016Confidence"
    "Mask\022\021\n\005value\030\001 \003(\002B\002\020\001\032[\n\017ConfidenceMas"
    "ks\022H\n\017confidence_mask\030\001 \003(\0132/.tflite.tas"
    "k.vision.Segmentation.ConfidenceMask\032Y\n\014"
    "ColoredLabel\022\t\n\001r\030\001 \001(\r\022\t\n\001g\030\002 \001(\r\022\t\n\001b\030"
    "\003 \001(\r\022\022\n\nclass_name\030\004 \001(\t\022\024\n\014display_nam"
    "e\030\005 \001(\tB\014\n\nmask_oneof"
};
static ::absl::once_flag descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fsegmentations_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fsegmentations_2eproto = {
    false,
    false,
    621,
    descriptor_table_protodef_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fsegmentations_2eproto,
    "tensorflow_lite_support/cc/task/vision/proto/segmentations.proto",
    &descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fsegmentations_2eproto_once,
    nullptr,
    0,
    5,
    schemas,
    file_default_instances,
    TableStruct_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fsegmentations_2eproto::offsets,
    file_level_metadata_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fsegmentations_2eproto,
    file_level_enum_descriptors_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fsegmentations_2eproto,
    file_level_service_descriptors_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fsegmentations_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fsegmentations_2eproto_getter() {
  return &descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fsegmentations_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fsegmentations_2eproto(&descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fsegmentations_2eproto);
namespace tflite {
namespace task {
namespace vision {
// ===================================================================

class SegmentationResult::_Internal {
 public:
};

SegmentationResult::SegmentationResult(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.task.vision.SegmentationResult)
}
SegmentationResult::SegmentationResult(const SegmentationResult& from) : ::google::protobuf::Message() {
  SegmentationResult* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.segmentation_){from._impl_.segmentation_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:tflite.task.vision.SegmentationResult)
}
inline void SegmentationResult::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.segmentation_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
SegmentationResult::~SegmentationResult() {
  // @@protoc_insertion_point(destructor:tflite.task.vision.SegmentationResult)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SegmentationResult::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.segmentation_.~RepeatedPtrField();
}
void SegmentationResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void SegmentationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.task.vision.SegmentationResult)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_segmentation()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SegmentationResult::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SegmentationResult::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SegmentationResult_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .tflite.task.vision.Segmentation segmentation = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SegmentationResult, _impl_.segmentation_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tflite.task.vision.Segmentation segmentation = 1;
    {PROTOBUF_FIELD_OFFSET(SegmentationResult, _impl_.segmentation_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tflite::task::vision::Segmentation>()},
  }}, {{
  }},
};

::uint8_t* SegmentationResult::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.task.vision.SegmentationResult)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .tflite.task.vision.Segmentation segmentation = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_segmentation_size()); i < n; i++) {
    const auto& repfield = this->_internal_segmentation().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.task.vision.SegmentationResult)
  return target;
}

::size_t SegmentationResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.task.vision.SegmentationResult)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tflite.task.vision.Segmentation segmentation = 1;
  total_size += 1UL * this->_internal_segmentation_size();
  for (const auto& msg : this->_internal_segmentation()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SegmentationResult::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    SegmentationResult::MergeImpl
};
const ::google::protobuf::Message::ClassData*SegmentationResult::GetClassData() const { return &_class_data_; }


void SegmentationResult::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SegmentationResult*>(&to_msg);
  auto& from = static_cast<const SegmentationResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.task.vision.SegmentationResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_segmentation()->MergeFrom(from._internal_segmentation());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SegmentationResult::CopyFrom(const SegmentationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.task.vision.SegmentationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SegmentationResult::IsInitialized() const {
  return true;
}

void SegmentationResult::InternalSwap(SegmentationResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.segmentation_.InternalSwap(&other->_impl_.segmentation_);
}

::google::protobuf::Metadata SegmentationResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fsegmentations_2eproto_getter, &descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fsegmentations_2eproto_once,
      file_level_metadata_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fsegmentations_2eproto[0]);
}
// ===================================================================

class Segmentation_ConfidenceMask::_Internal {
 public:
};

Segmentation_ConfidenceMask::Segmentation_ConfidenceMask(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.task.vision.Segmentation.ConfidenceMask)
}
Segmentation_ConfidenceMask::Segmentation_ConfidenceMask(const Segmentation_ConfidenceMask& from) : ::google::protobuf::Message() {
  Segmentation_ConfidenceMask* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){from._impl_.value_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:tflite.task.vision.Segmentation.ConfidenceMask)
}
inline void Segmentation_ConfidenceMask::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
Segmentation_ConfidenceMask::~Segmentation_ConfidenceMask() {
  // @@protoc_insertion_point(destructor:tflite.task.vision.Segmentation.ConfidenceMask)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Segmentation_ConfidenceMask::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.~RepeatedField();
}
void Segmentation_ConfidenceMask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Segmentation_ConfidenceMask::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.task.vision.Segmentation.ConfidenceMask)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_value()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Segmentation_ConfidenceMask::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> Segmentation_ConfidenceMask::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Segmentation_ConfidenceMask_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated float value = 1 [packed = true];
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Segmentation_ConfidenceMask, _impl_.value_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float value = 1 [packed = true];
    {PROTOBUF_FIELD_OFFSET(Segmentation_ConfidenceMask, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Segmentation_ConfidenceMask::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.task.vision.Segmentation.ConfidenceMask)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float value = 1 [packed = true];
  if (this->_internal_value_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.task.vision.Segmentation.ConfidenceMask)
  return target;
}

::size_t Segmentation_ConfidenceMask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.task.vision.Segmentation.ConfidenceMask)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float value = 1 [packed = true];
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_value_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Segmentation_ConfidenceMask::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Segmentation_ConfidenceMask::MergeImpl
};
const ::google::protobuf::Message::ClassData*Segmentation_ConfidenceMask::GetClassData() const { return &_class_data_; }


void Segmentation_ConfidenceMask::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Segmentation_ConfidenceMask*>(&to_msg);
  auto& from = static_cast<const Segmentation_ConfidenceMask&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.task.vision.Segmentation.ConfidenceMask)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_value()->MergeFrom(from._internal_value());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Segmentation_ConfidenceMask::CopyFrom(const Segmentation_ConfidenceMask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.task.vision.Segmentation.ConfidenceMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Segmentation_ConfidenceMask::IsInitialized() const {
  return true;
}

void Segmentation_ConfidenceMask::InternalSwap(Segmentation_ConfidenceMask* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
}

::google::protobuf::Metadata Segmentation_ConfidenceMask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fsegmentations_2eproto_getter, &descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fsegmentations_2eproto_once,
      file_level_metadata_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fsegmentations_2eproto[1]);
}
// ===================================================================

class Segmentation_ConfidenceMasks::_Internal {
 public:
};

Segmentation_ConfidenceMasks::Segmentation_ConfidenceMasks(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.task.vision.Segmentation.ConfidenceMasks)
}
Segmentation_ConfidenceMasks::Segmentation_ConfidenceMasks(const Segmentation_ConfidenceMasks& from) : ::google::protobuf::Message() {
  Segmentation_ConfidenceMasks* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.confidence_mask_){from._impl_.confidence_mask_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:tflite.task.vision.Segmentation.ConfidenceMasks)
}
inline void Segmentation_ConfidenceMasks::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.confidence_mask_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
Segmentation_ConfidenceMasks::~Segmentation_ConfidenceMasks() {
  // @@protoc_insertion_point(destructor:tflite.task.vision.Segmentation.ConfidenceMasks)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Segmentation_ConfidenceMasks::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.confidence_mask_.~RepeatedPtrField();
}
void Segmentation_ConfidenceMasks::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Segmentation_ConfidenceMasks::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.task.vision.Segmentation.ConfidenceMasks)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_confidence_mask()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Segmentation_ConfidenceMasks::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> Segmentation_ConfidenceMasks::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Segmentation_ConfidenceMasks_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .tflite.task.vision.Segmentation.ConfidenceMask confidence_mask = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Segmentation_ConfidenceMasks, _impl_.confidence_mask_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tflite.task.vision.Segmentation.ConfidenceMask confidence_mask = 1;
    {PROTOBUF_FIELD_OFFSET(Segmentation_ConfidenceMasks, _impl_.confidence_mask_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tflite::task::vision::Segmentation_ConfidenceMask>()},
  }}, {{
  }},
};

::uint8_t* Segmentation_ConfidenceMasks::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.task.vision.Segmentation.ConfidenceMasks)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .tflite.task.vision.Segmentation.ConfidenceMask confidence_mask = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_confidence_mask_size()); i < n; i++) {
    const auto& repfield = this->_internal_confidence_mask().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.task.vision.Segmentation.ConfidenceMasks)
  return target;
}

::size_t Segmentation_ConfidenceMasks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.task.vision.Segmentation.ConfidenceMasks)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tflite.task.vision.Segmentation.ConfidenceMask confidence_mask = 1;
  total_size += 1UL * this->_internal_confidence_mask_size();
  for (const auto& msg : this->_internal_confidence_mask()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Segmentation_ConfidenceMasks::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Segmentation_ConfidenceMasks::MergeImpl
};
const ::google::protobuf::Message::ClassData*Segmentation_ConfidenceMasks::GetClassData() const { return &_class_data_; }


void Segmentation_ConfidenceMasks::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Segmentation_ConfidenceMasks*>(&to_msg);
  auto& from = static_cast<const Segmentation_ConfidenceMasks&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.task.vision.Segmentation.ConfidenceMasks)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_confidence_mask()->MergeFrom(from._internal_confidence_mask());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Segmentation_ConfidenceMasks::CopyFrom(const Segmentation_ConfidenceMasks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.task.vision.Segmentation.ConfidenceMasks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Segmentation_ConfidenceMasks::IsInitialized() const {
  return true;
}

void Segmentation_ConfidenceMasks::InternalSwap(Segmentation_ConfidenceMasks* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.confidence_mask_.InternalSwap(&other->_impl_.confidence_mask_);
}

::google::protobuf::Metadata Segmentation_ConfidenceMasks::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fsegmentations_2eproto_getter, &descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fsegmentations_2eproto_once,
      file_level_metadata_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fsegmentations_2eproto[2]);
}
// ===================================================================

class Segmentation_ColoredLabel::_Internal {
 public:
  using HasBits = decltype(std::declval<Segmentation_ColoredLabel>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Segmentation_ColoredLabel, _impl_._has_bits_);
  static void set_has_r(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_g(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_class_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_display_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Segmentation_ColoredLabel::Segmentation_ColoredLabel(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.task.vision.Segmentation.ColoredLabel)
}
Segmentation_ColoredLabel::Segmentation_ColoredLabel(const Segmentation_ColoredLabel& from) : ::google::protobuf::Message() {
  Segmentation_ColoredLabel* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.class_name_){},
      decltype(_impl_.display_name_){},
      decltype(_impl_.r_){},
      decltype(_impl_.g_){},
      decltype(_impl_.b_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.class_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.class_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.class_name_.Set(from._internal_class_name(), _this->GetArenaForAllocation());
  }
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.display_name_.Set(from._internal_display_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.r_, &from._impl_.r_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.b_) -
    reinterpret_cast<char*>(&_impl_.r_)) + sizeof(_impl_.b_));

  // @@protoc_insertion_point(copy_constructor:tflite.task.vision.Segmentation.ColoredLabel)
}
inline void Segmentation_ColoredLabel::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.class_name_){},
      decltype(_impl_.display_name_){},
      decltype(_impl_.r_){0u},
      decltype(_impl_.g_){0u},
      decltype(_impl_.b_){0u},
  };
  _impl_.class_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.class_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
Segmentation_ColoredLabel::~Segmentation_ColoredLabel() {
  // @@protoc_insertion_point(destructor:tflite.task.vision.Segmentation.ColoredLabel)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Segmentation_ColoredLabel::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.class_name_.Destroy();
  _impl_.display_name_.Destroy();
}
void Segmentation_ColoredLabel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Segmentation_ColoredLabel::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.task.vision.Segmentation.ColoredLabel)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.class_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.display_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.r_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.b_) -
        reinterpret_cast<char*>(&_impl_.r_)) + sizeof(_impl_.b_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Segmentation_ColoredLabel::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 75, 2> Segmentation_ColoredLabel::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Segmentation_ColoredLabel, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Segmentation_ColoredLabel_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 r = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Segmentation_ColoredLabel, _impl_.r_), 2>(),
     {8, 2, 0, PROTOBUF_FIELD_OFFSET(Segmentation_ColoredLabel, _impl_.r_)}},
    // optional uint32 g = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Segmentation_ColoredLabel, _impl_.g_), 3>(),
     {16, 3, 0, PROTOBUF_FIELD_OFFSET(Segmentation_ColoredLabel, _impl_.g_)}},
    // optional uint32 b = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Segmentation_ColoredLabel, _impl_.b_), 4>(),
     {24, 4, 0, PROTOBUF_FIELD_OFFSET(Segmentation_ColoredLabel, _impl_.b_)}},
    // optional string class_name = 4;
    {::_pbi::TcParser::FastSS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(Segmentation_ColoredLabel, _impl_.class_name_)}},
    // optional string display_name = 5;
    {::_pbi::TcParser::FastSS1,
     {42, 1, 0, PROTOBUF_FIELD_OFFSET(Segmentation_ColoredLabel, _impl_.display_name_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 r = 1;
    {PROTOBUF_FIELD_OFFSET(Segmentation_ColoredLabel, _impl_.r_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 g = 2;
    {PROTOBUF_FIELD_OFFSET(Segmentation_ColoredLabel, _impl_.g_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 b = 3;
    {PROTOBUF_FIELD_OFFSET(Segmentation_ColoredLabel, _impl_.b_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional string class_name = 4;
    {PROTOBUF_FIELD_OFFSET(Segmentation_ColoredLabel, _impl_.class_name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string display_name = 5;
    {PROTOBUF_FIELD_OFFSET(Segmentation_ColoredLabel, _impl_.display_name_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\54\0\0\0\12\14\0\0"
    "tflite.task.vision.Segmentation.ColoredLabel"
    "class_name"
    "display_name"
  }},
};

::uint8_t* Segmentation_ColoredLabel::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.task.vision.Segmentation.ColoredLabel)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 r = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_r(), target);
  }

  // optional uint32 g = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_g(), target);
  }

  // optional uint32 b = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_b(), target);
  }

  // optional string class_name = 4;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_class_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "tflite.task.vision.Segmentation.ColoredLabel.class_name");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional string display_name = 5;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_display_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "tflite.task.vision.Segmentation.ColoredLabel.display_name");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.task.vision.Segmentation.ColoredLabel)
  return target;
}

::size_t Segmentation_ColoredLabel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.task.vision.Segmentation.ColoredLabel)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string class_name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_class_name());
    }

    // optional string display_name = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_display_name());
    }

    // optional uint32 r = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_r());
    }

    // optional uint32 g = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_g());
    }

    // optional uint32 b = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_b());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Segmentation_ColoredLabel::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Segmentation_ColoredLabel::MergeImpl
};
const ::google::protobuf::Message::ClassData*Segmentation_ColoredLabel::GetClassData() const { return &_class_data_; }


void Segmentation_ColoredLabel::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Segmentation_ColoredLabel*>(&to_msg);
  auto& from = static_cast<const Segmentation_ColoredLabel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.task.vision.Segmentation.ColoredLabel)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_class_name(from._internal_class_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_display_name(from._internal_display_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.r_ = from._impl_.r_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.g_ = from._impl_.g_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.b_ = from._impl_.b_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Segmentation_ColoredLabel::CopyFrom(const Segmentation_ColoredLabel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.task.vision.Segmentation.ColoredLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Segmentation_ColoredLabel::IsInitialized() const {
  return true;
}

void Segmentation_ColoredLabel::InternalSwap(Segmentation_ColoredLabel* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.class_name_, lhs_arena,
                                       &other->_impl_.class_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.display_name_, lhs_arena,
                                       &other->_impl_.display_name_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Segmentation_ColoredLabel, _impl_.b_)
      + sizeof(Segmentation_ColoredLabel::_impl_.b_)
      - PROTOBUF_FIELD_OFFSET(Segmentation_ColoredLabel, _impl_.r_)>(
          reinterpret_cast<char*>(&_impl_.r_),
          reinterpret_cast<char*>(&other->_impl_.r_));
}

::google::protobuf::Metadata Segmentation_ColoredLabel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fsegmentations_2eproto_getter, &descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fsegmentations_2eproto_once,
      file_level_metadata_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fsegmentations_2eproto[3]);
}
// ===================================================================

class Segmentation::_Internal {
 public:
  using HasBits = decltype(std::declval<Segmentation>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Segmentation, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::tflite::task::vision::Segmentation, _impl_._oneof_case_);
  static const ::tflite::task::vision::Segmentation_ConfidenceMasks& confidence_masks(const Segmentation* msg);
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::tflite::task::vision::Segmentation_ConfidenceMasks& Segmentation::_Internal::confidence_masks(const Segmentation* msg) {
  return *msg->_impl_.mask_oneof_.confidence_masks_;
}
void Segmentation::set_allocated_confidence_masks(::tflite::task::vision::Segmentation_ConfidenceMasks* confidence_masks) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_mask_oneof();
  if (confidence_masks) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::InternalGetOwningArena(confidence_masks);
    if (message_arena != submessage_arena) {
      confidence_masks = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, confidence_masks, submessage_arena);
    }
    set_has_confidence_masks();
    _impl_.mask_oneof_.confidence_masks_ = confidence_masks;
  }
  // @@protoc_insertion_point(field_set_allocated:tflite.task.vision.Segmentation.confidence_masks)
}
Segmentation::Segmentation(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.task.vision.Segmentation)
}
Segmentation::Segmentation(const Segmentation& from) : ::google::protobuf::Message() {
  Segmentation* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.colored_labels_){from._impl_.colored_labels_},
      decltype(_impl_.width_){},
      decltype(_impl_.height_){},
      decltype(_impl_.mask_oneof_){},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  ::memcpy(&_impl_.width_, &from._impl_.width_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  clear_has_mask_oneof();
  switch (from.mask_oneof_case()) {
    case kCategoryMask: {
      _this->_internal_set_category_mask(from._internal_category_mask());
      break;
    }
    case kConfidenceMasks: {
      _this->_internal_mutable_confidence_masks()->::tflite::task::vision::Segmentation_ConfidenceMasks::MergeFrom(
          from._internal_confidence_masks());
      break;
    }
    case MASK_ONEOF_NOT_SET: {
      break;
    }
  }

  // @@protoc_insertion_point(copy_constructor:tflite.task.vision.Segmentation)
}
inline void Segmentation::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.colored_labels_){arena},
      decltype(_impl_.width_){0},
      decltype(_impl_.height_){0},
      decltype(_impl_.mask_oneof_){},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  clear_has_mask_oneof();
}
Segmentation::~Segmentation() {
  // @@protoc_insertion_point(destructor:tflite.task.vision.Segmentation)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Segmentation::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.colored_labels_.~RepeatedPtrField();
  if (has_mask_oneof()) {
    clear_mask_oneof();
  }
}
void Segmentation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Segmentation::clear_mask_oneof() {
// @@protoc_insertion_point(one_of_clear_start:tflite.task.vision.Segmentation)
  switch (mask_oneof_case()) {
    case kCategoryMask: {
      _impl_.mask_oneof_.category_mask_.Destroy();
      break;
    }
    case kConfidenceMasks: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.mask_oneof_.confidence_masks_;
      }
      break;
    }
    case MASK_ONEOF_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MASK_ONEOF_NOT_SET;
}


PROTOBUF_NOINLINE void Segmentation::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.task.vision.Segmentation)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_colored_labels()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.width_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.height_) -
        reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  }
  clear_mask_oneof();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Segmentation::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 5, 2, 0, 2> Segmentation::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Segmentation, _impl_._has_bits_),
    0, // no _extensions_
    5, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Segmentation_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .tflite.task.vision.Segmentation.ColoredLabel colored_labels = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 1, PROTOBUF_FIELD_OFFSET(Segmentation, _impl_.colored_labels_)}},
    // optional int32 width = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Segmentation, _impl_.width_), 0>(),
     {16, 0, 0, PROTOBUF_FIELD_OFFSET(Segmentation, _impl_.width_)}},
    // optional int32 height = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Segmentation, _impl_.height_), 1>(),
     {24, 1, 0, PROTOBUF_FIELD_OFFSET(Segmentation, _impl_.height_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes category_mask = 1;
    {PROTOBUF_FIELD_OFFSET(Segmentation, _impl_.mask_oneof_.category_mask_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional int32 width = 2;
    {PROTOBUF_FIELD_OFFSET(Segmentation, _impl_.width_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 height = 3;
    {PROTOBUF_FIELD_OFFSET(Segmentation, _impl_.height_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // .tflite.task.vision.Segmentation.ConfidenceMasks confidence_masks = 4;
    {PROTOBUF_FIELD_OFFSET(Segmentation, _impl_.mask_oneof_.confidence_masks_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .tflite.task.vision.Segmentation.ColoredLabel colored_labels = 5;
    {PROTOBUF_FIELD_OFFSET(Segmentation, _impl_.colored_labels_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tflite::task::vision::Segmentation_ConfidenceMasks>()},
    {::_pbi::TcParser::GetTable<::tflite::task::vision::Segmentation_ColoredLabel>()},
  }}, {{
  }},
};

::uint8_t* Segmentation::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.task.vision.Segmentation)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bytes category_mask = 1;
  if (mask_oneof_case() == kCategoryMask) {
    const std::string& _s = this->_internal_category_mask();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 width = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_width(), target);
  }

  // optional int32 height = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_height(), target);
  }

  // .tflite.task.vision.Segmentation.ConfidenceMasks confidence_masks = 4;
  if (mask_oneof_case() == kConfidenceMasks) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::confidence_masks(this),
        _Internal::confidence_masks(this).GetCachedSize(), target, stream);
  }

  // repeated .tflite.task.vision.Segmentation.ColoredLabel colored_labels = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_colored_labels_size()); i < n; i++) {
    const auto& repfield = this->_internal_colored_labels().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.task.vision.Segmentation)
  return target;
}

::size_t Segmentation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.task.vision.Segmentation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tflite.task.vision.Segmentation.ColoredLabel colored_labels = 5;
  total_size += 1UL * this->_internal_colored_labels_size();
  for (const auto& msg : this->_internal_colored_labels()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 width = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_width());
    }

    // optional int32 height = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_height());
    }

  }
  switch (mask_oneof_case()) {
    // bytes category_mask = 1;
    case kCategoryMask: {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_category_mask());
      break;
    }
    // .tflite.task.vision.Segmentation.ConfidenceMasks confidence_masks = 4;
    case kConfidenceMasks: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.mask_oneof_.confidence_masks_);
      break;
    }
    case MASK_ONEOF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Segmentation::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Segmentation::MergeImpl
};
const ::google::protobuf::Message::ClassData*Segmentation::GetClassData() const { return &_class_data_; }


void Segmentation::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Segmentation*>(&to_msg);
  auto& from = static_cast<const Segmentation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tflite.task.vision.Segmentation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_colored_labels()->MergeFrom(from._internal_colored_labels());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.height_ = from._impl_.height_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.mask_oneof_case()) {
    case kCategoryMask: {
      _this->_internal_set_category_mask(from._internal_category_mask());
      break;
    }
    case kConfidenceMasks: {
      _this->_internal_mutable_confidence_masks()->::tflite::task::vision::Segmentation_ConfidenceMasks::MergeFrom(
          from._internal_confidence_masks());
      break;
    }
    case MASK_ONEOF_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Segmentation::CopyFrom(const Segmentation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.task.vision.Segmentation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Segmentation::IsInitialized() const {
  return true;
}

void Segmentation::InternalSwap(Segmentation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.colored_labels_.InternalSwap(&other->_impl_.colored_labels_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Segmentation, _impl_.height_)
      + sizeof(Segmentation::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(Segmentation, _impl_.width_)>(
          reinterpret_cast<char*>(&_impl_.width_),
          reinterpret_cast<char*>(&other->_impl_.width_));
  swap(_impl_.mask_oneof_, other->_impl_.mask_oneof_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata Segmentation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fsegmentations_2eproto_getter, &descriptor_table_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fsegmentations_2eproto_once,
      file_level_metadata_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fsegmentations_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace vision
}  // namespace task
}  // namespace tflite
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
